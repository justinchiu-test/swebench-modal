[{"repo": "mwaskom/seaborn", "instance_id": "mwaskom__seaborn-3190", "base_commit": "4a9e54962a29c12a8b103d75f838e0e795a6974d", "patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,7 +346,7 @@ def _setup(\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n+            vmin, vmax = map(float, axis.convert_units((vmin, vmax)))\n             a = forward(vmin)\n             b = forward(vmax) - forward(vmin)\n \n", "test_patch": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -90,6 +90,12 @@ def test_interval_with_range_norm_and_transform(self, x):\n         s = Continuous((2, 3), (10, 100), \"log\")._setup(x, IntervalProperty())\n         assert_array_equal(s(x), [1, 2, 3])\n \n+    def test_interval_with_bools(self):\n+\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n     def test_color_defaults(self, x):\n \n         cmap = color_palette(\"ch:\", as_cmap=True)\n", "problem_statement": "Color mapping fails with boolean data\n```python\r\nso.Plot([\"a\", \"b\"], [1, 2], color=[True, False]).add(so.Bar())\r\n```\r\n```python-traceback\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n...\r\nFile ~/code/seaborn/seaborn/_core/plot.py:841, in Plot._plot(self, pyplot)\r\n    838 plotter._compute_stats(self, layers)\r\n    840 # Process scale spec for semantic variables and coordinates computed by stat\r\n--> 841 plotter._setup_scales(self, common, layers)\r\n    843 # TODO Remove these after updating other methods\r\n    844 # ---- Maybe have debug= param that attaches these when True?\r\n    845 plotter._data = common\r\n\r\nFile ~/code/seaborn/seaborn/_core/plot.py:1252, in Plotter._setup_scales(self, p, common, layers, variables)\r\n   1250     self._scales[var] = Scale._identity()\r\n   1251 else:\r\n-> 1252     self._scales[var] = scale._setup(var_df[var], prop)\r\n   1254 # Everything below here applies only to coordinate variables\r\n   1255 # We additionally skip it when we're working with a value\r\n   1256 # that is derived from a coordinate we've already processed.\r\n   1257 # e.g., the Stat consumed y and added ymin/ymax. In that case,\r\n   1258 # we've already setup the y scale and ymin/max are in scale space.\r\n   1259 if axis is None or (var != coord and coord in p._variables):\r\n\r\nFile ~/code/seaborn/seaborn/_core/scales.py:351, in ContinuousBase._setup(self, data, prop, axis)\r\n    349 vmin, vmax = axis.convert_units((vmin, vmax))\r\n    350 a = forward(vmin)\r\n--> 351 b = forward(vmax) - forward(vmin)\r\n    353 def normalize(x):\r\n    354     return (x - a) / b\r\n\r\nTypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead.\r\n```\n", "hints_text": "Would this simply mean refactoring the code to use `^` or `xor` functions instead?", "created_at": "2022-12-18T17:13:51Z", "version": "0.12", "FAIL_TO_PASS": "[\"tests/_core/test_scales.py::TestContinuous::test_interval_with_bools\"]", "PASS_TO_PASS": "[\"tests/_core/test_scales.py::TestContinuous::test_coordinate_defaults\", \"tests/_core/test_scales.py::TestContinuous::test_coordinate_transform\", \"tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_with_parameter\", \"tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_error\", \"tests/_core/test_scales.py::TestContinuous::test_interval_defaults\", \"tests/_core/test_scales.py::TestContinuous::test_interval_with_range\", \"tests/_core/test_scales.py::TestContinuous::test_interval_with_norm\", \"tests/_core/test_scales.py::TestContinuous::test_interval_with_range_norm_and_transform\", \"tests/_core/test_scales.py::TestContinuous::test_color_defaults\", \"tests/_core/test_scales.py::TestContinuous::test_color_named_values\", \"tests/_core/test_scales.py::TestContinuous::test_color_tuple_values\", \"tests/_core/test_scales.py::TestContinuous::test_color_callable_values\", \"tests/_core/test_scales.py::TestContinuous::test_color_with_norm\", \"tests/_core/test_scales.py::TestContinuous::test_color_with_transform\", \"tests/_core/test_scales.py::TestContinuous::test_tick_locator\", \"tests/_core/test_scales.py::TestContinuous::test_tick_locator_input_check\", \"tests/_core/test_scales.py::TestContinuous::test_tick_upto\", \"tests/_core/test_scales.py::TestContinuous::test_tick_every\", \"tests/_core/test_scales.py::TestContinuous::test_tick_every_between\", \"tests/_core/test_scales.py::TestContinuous::test_tick_at\", \"tests/_core/test_scales.py::TestContinuous::test_tick_count\", \"tests/_core/test_scales.py::TestContinuous::test_tick_count_between\", \"tests/_core/test_scales.py::TestContinuous::test_tick_minor\", \"tests/_core/test_scales.py::TestContinuous::test_log_tick_default\", \"tests/_core/test_scales.py::TestContinuous::test_log_tick_upto\", \"tests/_core/test_scales.py::TestContinuous::test_log_tick_count\", \"tests/_core/test_scales.py::TestContinuous::test_log_tick_format_disabled\", \"tests/_core/test_scales.py::TestContinuous::test_log_tick_every\", \"tests/_core/test_scales.py::TestContinuous::test_symlog_tick_default\", \"tests/_core/test_scales.py::TestContinuous::test_label_formatter\", \"tests/_core/test_scales.py::TestContinuous::test_label_like_pattern\", \"tests/_core/test_scales.py::TestContinuous::test_label_like_string\", \"tests/_core/test_scales.py::TestContinuous::test_label_like_function\", \"tests/_core/test_scales.py::TestContinuous::test_label_base\", \"tests/_core/test_scales.py::TestContinuous::test_label_unit\", \"tests/_core/test_scales.py::TestContinuous::test_label_unit_with_sep\", \"tests/_core/test_scales.py::TestContinuous::test_label_empty_unit\", \"tests/_core/test_scales.py::TestContinuous::test_label_base_from_transform\", \"tests/_core/test_scales.py::TestContinuous::test_label_type_checks\", \"tests/_core/test_scales.py::TestNominal::test_coordinate_defaults\", \"tests/_core/test_scales.py::TestNominal::test_coordinate_with_order\", \"tests/_core/test_scales.py::TestNominal::test_coordinate_with_subset_order\", \"tests/_core/test_scales.py::TestNominal::test_coordinate_axis\", \"tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_order\", \"tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_subset_order\", \"tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_category_dtype\", \"tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data\", \"tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data_with_order\", \"tests/_core/test_scales.py::TestNominal::test_color_defaults\", \"tests/_core/test_scales.py::TestNominal::test_color_named_palette\", \"tests/_core/test_scales.py::TestNominal::test_color_list_palette\", \"tests/_core/test_scales.py::TestNominal::test_color_dict_palette\", \"tests/_core/test_scales.py::TestNominal::test_color_numeric_data\", \"tests/_core/test_scales.py::TestNominal::test_color_numeric_with_order_subset\", \"tests/_core/test_scales.py::TestNominal::test_color_alpha_in_palette\", \"tests/_core/test_scales.py::TestNominal::test_color_unknown_palette\", \"tests/_core/test_scales.py::TestNominal::test_object_defaults\", \"tests/_core/test_scales.py::TestNominal::test_object_list\", \"tests/_core/test_scales.py::TestNominal::test_object_dict\", \"tests/_core/test_scales.py::TestNominal::test_object_order\", \"tests/_core/test_scales.py::TestNominal::test_object_order_subset\", \"tests/_core/test_scales.py::TestNominal::test_objects_that_are_weird\", \"tests/_core/test_scales.py::TestNominal::test_alpha_default\", \"tests/_core/test_scales.py::TestNominal::test_fill\", \"tests/_core/test_scales.py::TestNominal::test_fill_dict\", \"tests/_core/test_scales.py::TestNominal::test_fill_nunique_warning\", \"tests/_core/test_scales.py::TestNominal::test_interval_defaults\", \"tests/_core/test_scales.py::TestNominal::test_interval_tuple\", \"tests/_core/test_scales.py::TestNominal::test_interval_tuple_numeric\", \"tests/_core/test_scales.py::TestNominal::test_interval_list\", \"tests/_core/test_scales.py::TestNominal::test_interval_dict\", \"tests/_core/test_scales.py::TestNominal::test_interval_with_transform\", \"tests/_core/test_scales.py::TestNominal::test_empty_data\", \"tests/_core/test_scales.py::TestTemporal::test_coordinate_defaults\", \"tests/_core/test_scales.py::TestTemporal::test_interval_defaults\", \"tests/_core/test_scales.py::TestTemporal::test_interval_with_range\", \"tests/_core/test_scales.py::TestTemporal::test_interval_with_norm\", \"tests/_core/test_scales.py::TestTemporal::test_color_defaults\", \"tests/_core/test_scales.py::TestTemporal::test_color_named_values\", \"tests/_core/test_scales.py::TestTemporal::test_coordinate_axis\", \"tests/_core/test_scales.py::TestTemporal::test_tick_locator\", \"tests/_core/test_scales.py::TestTemporal::test_tick_upto\", \"tests/_core/test_scales.py::TestTemporal::test_label_formatter\", \"tests/_core/test_scales.py::TestTemporal::test_label_concise\"]", "environment_setup_commit": "d25872b0fc99dbf7e666a91f59bd4ed125186aa1"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   seaborn/_core/scales.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 4a9e54962a29c12a8b103d75f838e0e795a6974d\nAuthor: Michael Waskom <mwaskom@users.noreply.github.com>\nDate:   Tue Dec 27 20:09:15 2022 -0500\n\n    Improve user feedback for errors during plot compilation (#3203)\n    \n    * Improve user feedback for errors during plot compilation\n    \n    * Update release notes and fix flaky test\n    \n    * Fix pytest.raises usage and improve tests\n    \n    * Simplify comments for cleaner tracebacks\n\ndiff --git a/doc/whatsnew/v0.12.2.rst b/doc/whatsnew/v0.12.2.rst\nindex aa8def9a..927c4fa0 100644\n--- a/doc/whatsnew/v0.12.2.rst\n+++ b/doc/whatsnew/v0.12.2.rst\n@@ -6,9 +6,11 @@ v0.12.2 (Unreleased)\n \n - |Enhancement| Automatic mark widths are now calculated separately for unshared facet axes (:pr:`3119`).\n \n+- |Enhancement| Improved user feedback for failures during plot compilation by catching exceptions an reraising with a `PlotSpecError` that provides additional context (:pr:`3203`).\n+\n - |Fix| Fixed a bug where legends for numeric variables with large values with be incorrectly shown (i.e. with a missing offset or exponent; :pr:`3187`).\n \n-- |Fix| Improve robustness to empty data in several components of the objects interface (:pr:`3202`).\n+- |Fix| Improved robustness to empty data in several components of the objects interface (:pr:`3202`).\n \n - |Fix| Fixed a regression in v0.12.0 where manually-added labels could have duplicate legend entries (:pr:`3116`).\n \ndiff --git a/seaborn/_core/exceptions.py b/seaborn/_core/exceptions.py\nnew file mode 100644\nindex 00000000..048443b0\n--- /dev/null\n+++ b/seaborn/_core/exceptions.py\n@@ -0,0 +1,32 @@\n+\"\"\"\n+Custom exceptions for the seaborn.objects interface.\n+\n+This is very lightweight, but it's a separate module to avoid circular imports.\n+\n+\"\"\"\n+from __future__ import annotations\n+\n+\n+class PlotSpecError(RuntimeError):\n+    \"\"\"\n+    Error class raised from seaborn.objects.Plot for compile-time failures.\n+\n+    In the declarative Plot interface, exceptions may not be triggered immediately\n+    by bad user input (and validation at input time may not be possible). This class\n+    is used to signal that indirect dependency. It should be raised in an exception\n+    chain when compile-time operations fail with an error message providing useful\n+    context (e.g., scaling errors could specify the variable that failed.)\n+\n+    \"\"\"\n+    @classmethod\n+    def _during(cls, step: str, var: str = \"\") -> PlotSpecError:\n+        \"\"\"\n+        Initialize the class to report the failure of a specific operation.\n+        \"\"\"\n+        message = []\n+        if var:\n+            message.append(f\"{step} failed for the `{var}` variable.\")\n+        else:\n+            message.append(f\"{step} failed.\")\n+        message.append(\"See the traceback above for more information.\")\n+        return cls(\" \".join(message))\ndiff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 64f59cb2..6c7202c6 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -36,6 +36,7 @@ from seaborn._core.typing import (\n     OrderSpec,\n     Default,\n )\n+from seaborn._core.exceptions import PlotSpecError\n from seaborn._core.rules import categorical_order\n from seaborn._compat import set_scale_obj, set_layout_engine\n from seaborn.rcmod import axes_style, plotting_context\n@@ -1249,14 +1250,13 @@ class Plotter:\n             if scale is None:\n                 self._scales[var] = Scale._identity()\n             else:\n-                self._scales[var] = scale._setup(var_df[var], prop)\n+                try:\n+                    self._scales[var] = scale._setup(var_df[var], prop)\n+                except Exception as err:\n+                    raise PlotSpecError._during(\"Scale setup\", var) from err\n \n-            # Everything below here applies only to coordinate variables\n-            # We additionally skip it when we're working with a value\n-            # that is derived from a coordinate we've already processed.\n-            # e.g., the Stat consumed y and added ymin/ymax. In that case,\n-            # we've already setup the y scale and ymin/max are in scale space.\n             if axis is None or (var != coord and coord in p._variables):\n+                # Everything below here applies only to coordinate variables\n                 continue\n \n             # Set up an empty series to receive the transformed values.\n@@ -1276,9 +1276,15 @@ class Plotter:\n \n                 for layer, new_series in zip(layers, transformed_data):\n                     layer_df = layer[\"data\"].frame\n-                    if var in layer_df:\n-                        idx = self._get_subplot_index(layer_df, view)\n+                    if var not in layer_df:\n+                        continue\n+\n+                    idx = self._get_subplot_index(layer_df, view)\n+                    try:\n                         new_series.loc[idx] = view_scale(layer_df.loc[idx, var])\n+                    except Exception as err:\n+                        spec_error = PlotSpecError._during(\"Scaling operation\", var)\n+                        raise spec_error from err\n \n             # Now the transformed data series are complete, set update the layer data\n             for layer, new_series in zip(layers, transformed_data):\ndiff --git a/seaborn/_marks/base.py b/seaborn/_marks/base.py\nindex 87e0216d..324d0221 100644\n--- a/seaborn/_marks/base.py\n+++ b/seaborn/_marks/base.py\n@@ -20,6 +20,7 @@ from seaborn._core.properties import (\n     DashPattern,\n     DashPatternWithOffset,\n )\n+from seaborn._core.exceptions import PlotSpecError\n \n \n class Mappable:\n@@ -172,7 +173,13 @@ class Mark:\n                 # TODO Might this obviate the identity scale? Just don't add a scale?\n                 feature = data[name]\n             else:\n-                feature = scales[name](data[name])\n+                scale = scales[name]\n+                value = data[name]\n+                try:\n+                    feature = scale(value)\n+                except Exception as err:\n+                    raise PlotSpecError._during(\"Scaling operation\", name) from err\n+\n             if return_array:\n                 feature = np.asarray(feature)\n             return feature\ndiff --git a/seaborn/palettes.py b/seaborn/palettes.py\nindex 3306b0f2..f1214b2a 100644\n--- a/seaborn/palettes.py\n+++ b/seaborn/palettes.py\n@@ -234,7 +234,7 @@ def color_palette(palette=None, n_colors=None, desat=None, as_cmap=False):\n                 # Perhaps a named matplotlib colormap?\n                 palette = mpl_palette(palette, n_colors, as_cmap=as_cmap)\n             except (ValueError, KeyError):  # Error class changed in mpl36\n-                raise ValueError(f\"{palette} is not a valid palette name\")\n+                raise ValueError(f\"{palette!r} is not a valid palette name\")\n \n     if desat is not None:\n         palette = [desaturate(c, desat) for c in palette]\ndiff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 50673962..6862dbf8 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -15,12 +15,14 @@ from pandas.testing import assert_frame_equal, assert_series_equal\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n \n from seaborn._core.plot import Plot, Default\n-from seaborn._core.scales import Nominal, Continuous\n-from seaborn._core.rules import categorical_order\n+from seaborn._core.scales import Continuous, Nominal, Temporal\n from seaborn._core.moves import Move, Shift, Dodge\n-from seaborn._stats.aggregation import Agg\n+from seaborn._core.rules import categorical_order\n+from seaborn._core.exceptions import PlotSpecError\n from seaborn._marks.base import Mark\n from seaborn._stats.base import Stat\n+from seaborn._marks.dot import Dot\n+from seaborn._stats.aggregation import Agg\n from seaborn.external.version import Version\n \n assert_vector_equal = functools.partial(\n@@ -1249,6 +1251,54 @@ class TestPlotting:\n             assert ax.get_title() == expected\n \n \n+class TestExceptions:\n+\n+    def test_scale_setup(self):\n+\n+        x = y = color = [\"a\", \"b\"]\n+        bad_palette = \"not_a_palette\"\n+        p = Plot(x, y, color=color).add(MockMark()).scale(color=bad_palette)\n+\n+        msg = \"Scale setup failed for the `color` variable.\"\n+        with pytest.raises(PlotSpecError, match=msg) as err:\n+            p.plot()\n+        assert isinstance(err.value.__cause__, ValueError)\n+        assert bad_palette in str(err.value.__cause__)\n+\n+    def test_coordinate_scaling(self):\n+\n+        x = [\"a\", \"b\"]\n+        y = [1, 2]\n+        p = Plot(x, y).add(MockMark()).scale(x=Temporal())\n+\n+        msg = \"Scaling operation failed for the `x` variable.\"\n+        with pytest.raises(PlotSpecError, match=msg) as err:\n+            p.plot()\n+        # Don't test the cause contents b/c matplotlib owns them here.\n+        assert hasattr(err.value, \"__cause__\")\n+\n+    def test_semantic_scaling(self):\n+\n+        class ErrorRaising(Continuous):\n+\n+            def _setup(self, data, prop, axis=None):\n+\n+                def f(x):\n+                    raise ValueError(\"This is a test\")\n+\n+                new = super()._setup(data, prop, axis)\n+                new._pipeline = [f]\n+                return new\n+\n+        x = y = color = [1, 2]\n+        p = Plot(x, y, color=color).add(Dot()).scale(color=ErrorRaising())\n+        msg = \"Scaling operation failed for the `color` variable.\"\n+        with pytest.raises(PlotSpecError, match=msg) as err:\n+            p.plot()\n+        assert isinstance(err.value.__cause__, ValueError)\n+        assert str(err.value.__cause__) == \"This is a test\"\n+\n+\n class TestFacetInterface:\n \n     @pytest.fixture(scope=\"class\", params=[\"row\", \"col\"])\ndiff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 5baf53ce..2d967cc2 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -448,7 +448,7 @@ class TestNominal:\n     def test_color_unknown_palette(self, x):\n \n         pal = \"not_a_palette\"\n-        err = f\"{pal} is not a valid palette name\"\n+        err = f\"'{pal}' is not a valid palette name\"\n         with pytest.raises(ValueError, match=err):\n             Nominal(pal)._setup(x, Color())\n \ndiff --git a/tests/test_distributions.py b/tests/test_distributions.py\nindex 78cd5fe4..c5ac036c 100644\n--- a/tests/test_distributions.py\n+++ b/tests/test_distributions.py\n@@ -1934,8 +1934,8 @@ class TestHistPlotBivariate:\n         edges = itertools.product(y_edges[:-1], x_edges[:-1])\n         for i, (y_i, x_i) in enumerate(edges):\n             path = mesh.get_paths()[i]\n-            assert path.vertices[0, 0] == 10 ** x_i\n-            assert path.vertices[0, 1] == 10 ** y_i\n+            assert path.vertices[0, 0] == pytest.approx(10 ** x_i)\n+            assert path.vertices[0, 1] == pytest.approx(10 ** y_i)\n \n     def test_mesh_thresh(self, long_df):\n \ndiff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..3c215a60 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,7 +346,7 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n+            vmin, vmax = map(float, axis.convert_units((vmin, vmax)))\n             a = forward(vmin)\n             b = forward(vmax) - forward(vmin)\n \nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: numpy!=1.24.0,>=1.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (1.25.2)\nRequirement already satisfied: pandas>=0.25 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (2.0.0)\nRequirement already satisfied: matplotlib!=3.6.1,>=3.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (3.7.2)\nRequirement already satisfied: pytest in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (8.3.3)\nRequirement already satisfied: pytest-cov in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (5.0.0)\nRequirement already satisfied: pytest-xdist in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (3.6.1)\nRequirement already satisfied: flake8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (7.1.1)\nRequirement already satisfied: mypy in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (1.11.2)\nRequirement already satisfied: pandas-stubs in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (2.2.2.240807)\nRequirement already satisfied: pre-commit in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (4.0.0)\nRequirement already satisfied: flit in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.2.dev0) (3.9.0)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (1.1.0)\nRequirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (0.11.0)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (4.42.1)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (1.4.5)\nRequirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (23.1)\nRequirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (10.0.0)\nRequirement already satisfied: pyparsing<3.1,>=2.3.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (3.0.9)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (2.8.2)\nRequirement already satisfied: importlib-resources>=3.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (6.0.1)\nRequirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas>=0.25->seaborn==0.12.2.dev0) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas>=0.25->seaborn==0.12.2.dev0) (2023.1)\nRequirement already satisfied: mccabe<0.8.0,>=0.7.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flake8->seaborn==0.12.2.dev0) (0.7.0)\nRequirement already satisfied: pycodestyle<2.13.0,>=2.12.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flake8->seaborn==0.12.2.dev0) (2.12.1)\nRequirement already satisfied: pyflakes<3.3.0,>=3.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flake8->seaborn==0.12.2.dev0) (3.2.0)\nRequirement already satisfied: flit_core>=3.9.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.12.2.dev0) (3.9.0)\nRequirement already satisfied: requests in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.12.2.dev0) (2.32.3)\nRequirement already satisfied: docutils in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.12.2.dev0) (0.21.2)\nRequirement already satisfied: tomli-w in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.12.2.dev0) (1.0.0)\nRequirement already satisfied: typing-extensions>=4.6.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from mypy->seaborn==0.12.2.dev0) (4.12.2)\nRequirement already satisfied: mypy-extensions>=1.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from mypy->seaborn==0.12.2.dev0) (1.0.0)\nRequirement already satisfied: tomli>=1.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from mypy->seaborn==0.12.2.dev0) (2.0.2)\nRequirement already satisfied: types-pytz>=2022.1.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas-stubs->seaborn==0.12.2.dev0) (2024.2.0.20241003)\nRequirement already satisfied: cfgv>=2.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.12.2.dev0) (3.4.0)\nRequirement already satisfied: identify>=1.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.12.2.dev0) (2.6.1)\nRequirement already satisfied: nodeenv>=0.11.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.12.2.dev0) (1.9.1)\nRequirement already satisfied: pyyaml>=5.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.12.2.dev0) (6.0.2)\nRequirement already satisfied: virtualenv>=20.10.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.12.2.dev0) (20.26.6)\nRequirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->seaborn==0.12.2.dev0) (2.0.0)\nRequirement already satisfied: pluggy<2,>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->seaborn==0.12.2.dev0) (1.5.0)\nRequirement already satisfied: exceptiongroup>=1.0.0rc8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->seaborn==0.12.2.dev0) (1.2.2)\nRequirement already satisfied: coverage>=5.2.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from coverage[toml]>=5.2.1->pytest-cov->seaborn==0.12.2.dev0) (7.6.1)\nRequirement already satisfied: execnet>=2.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-xdist->seaborn==0.12.2.dev0) (2.1.1)\nRequirement already satisfied: zipp>=3.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from importlib-resources>=3.2.0->matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (3.16.2)\nRequirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.1->seaborn==0.12.2.dev0) (1.16.0)\nRequirement already satisfied: distlib<1,>=0.3.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from virtualenv>=20.10.0->pre-commit->seaborn==0.12.2.dev0) (0.3.8)\nRequirement already satisfied: filelock<4,>=3.12.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from virtualenv>=20.10.0->pre-commit->seaborn==0.12.2.dev0) (3.16.1)\nRequirement already satisfied: platformdirs<5,>=3.9.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from virtualenv>=20.10.0->pre-commit->seaborn==0.12.2.dev0) (4.3.6)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.12.2.dev0) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.12.2.dev0) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.12.2.dev0) (2.2.3)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.12.2.dev0) (2024.8.30)\nBuilding wheels for collected packages: seaborn\n  Building editable for seaborn (pyproject.toml): started\n  Building editable for seaborn (pyproject.toml): finished with status 'done'\n  Created wheel for seaborn: filename=seaborn-0.12.2.dev0-py3-none-any.whl size=3924 sha256=08ffc9e975c878ab063e65d5c48980339376618e3dd16e7ce3eb2ef0693e6478\n  Stored in directory: /tmp/pip-ephem-wheel-cache-7j2f58t0/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built seaborn\nInstalling collected packages: seaborn\n  Attempting uninstall: seaborn\n    Found existing installation: seaborn 0.12.2.dev0\n    Uninstalling seaborn-0.12.2.dev0:\n      Successfully uninstalled seaborn-0.12.2.dev0\nSuccessfully installed seaborn-0.12.2.dev0\n============================= test session starts ==============================\ncollected 86 items\n\ntests/_core/test_scales.py ............................................. [ 52%]\n..........x..............................                                [100%]\n\n=============================== warnings summary ===============================\ntests/_core/test_scales.py::TestNominal::test_color_numeric_with_order_subset\n  /testbed/seaborn/_core/properties.py:643: RuntimeWarning: invalid value encountered in cast\n    ixs = np.asarray(x, np.intp)\n\ntests/_core/test_scales.py::TestNominal::test_object_order_subset\n  /testbed/seaborn/_core/properties.py:366: RuntimeWarning: invalid value encountered in cast\n    ixs = np.asarray(x, np.intp)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n==================================== PASSES ====================================\n=========================== short test summary info ============================\nPASSED tests/_core/test_scales.py::TestContinuous::test_coordinate_defaults\nPASSED tests/_core/test_scales.py::TestContinuous::test_coordinate_transform\nPASSED tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_with_parameter\nPASSED tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_error\nPASSED tests/_core/test_scales.py::TestContinuous::test_interval_defaults\nPASSED tests/_core/test_scales.py::TestContinuous::test_interval_with_range\nPASSED tests/_core/test_scales.py::TestContinuous::test_interval_with_norm\nPASSED tests/_core/test_scales.py::TestContinuous::test_interval_with_range_norm_and_transform\nPASSED tests/_core/test_scales.py::TestContinuous::test_interval_with_bools\nPASSED tests/_core/test_scales.py::TestContinuous::test_color_defaults\nPASSED tests/_core/test_scales.py::TestContinuous::test_color_named_values\nPASSED tests/_core/test_scales.py::TestContinuous::test_color_tuple_values\nPASSED tests/_core/test_scales.py::TestContinuous::test_color_callable_values\nPASSED tests/_core/test_scales.py::TestContinuous::test_color_with_norm\nPASSED tests/_core/test_scales.py::TestContinuous::test_color_with_transform\nPASSED tests/_core/test_scales.py::TestContinuous::test_tick_locator\nPASSED tests/_core/test_scales.py::TestContinuous::test_tick_locator_input_check\nPASSED tests/_core/test_scales.py::TestContinuous::test_tick_upto\nPASSED tests/_core/test_scales.py::TestContinuous::test_tick_every\nPASSED tests/_core/test_scales.py::TestContinuous::test_tick_every_between\nPASSED tests/_core/test_scales.py::TestContinuous::test_tick_at\nPASSED tests/_core/test_scales.py::TestContinuous::test_tick_count\nPASSED tests/_core/test_scales.py::TestContinuous::test_tick_count_between\nPASSED tests/_core/test_scales.py::TestContinuous::test_tick_minor\nPASSED tests/_core/test_scales.py::TestContinuous::test_log_tick_default\nPASSED tests/_core/test_scales.py::TestContinuous::test_log_tick_upto\nPASSED tests/_core/test_scales.py::TestContinuous::test_log_tick_count\nPASSED tests/_core/test_scales.py::TestContinuous::test_log_tick_format_disabled\nPASSED tests/_core/test_scales.py::TestContinuous::test_log_tick_every\nPASSED tests/_core/test_scales.py::TestContinuous::test_symlog_tick_default\nPASSED tests/_core/test_scales.py::TestContinuous::test_label_formatter\nPASSED tests/_core/test_scales.py::TestContinuous::test_label_like_pattern\nPASSED tests/_core/test_scales.py::TestContinuous::test_label_like_string\nPASSED tests/_core/test_scales.py::TestContinuous::test_label_like_function\nPASSED tests/_core/test_scales.py::TestContinuous::test_label_base\nPASSED tests/_core/test_scales.py::TestContinuous::test_label_unit\nPASSED tests/_core/test_scales.py::TestContinuous::test_label_unit_with_sep\nPASSED tests/_core/test_scales.py::TestContinuous::test_label_empty_unit\nPASSED tests/_core/test_scales.py::TestContinuous::test_label_base_from_transform\nPASSED tests/_core/test_scales.py::TestContinuous::test_label_type_checks\nPASSED tests/_core/test_scales.py::TestNominal::test_coordinate_defaults\nPASSED tests/_core/test_scales.py::TestNominal::test_coordinate_with_order\nPASSED tests/_core/test_scales.py::TestNominal::test_coordinate_with_subset_order\nPASSED tests/_core/test_scales.py::TestNominal::test_coordinate_axis\nPASSED tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_order\nPASSED tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_subset_order\nPASSED tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_category_dtype\nPASSED tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data\nPASSED tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data_with_order\nPASSED tests/_core/test_scales.py::TestNominal::test_color_defaults\nPASSED tests/_core/test_scales.py::TestNominal::test_color_named_palette\nPASSED tests/_core/test_scales.py::TestNominal::test_color_list_palette\nPASSED tests/_core/test_scales.py::TestNominal::test_color_dict_palette\nPASSED tests/_core/test_scales.py::TestNominal::test_color_numeric_data\nPASSED tests/_core/test_scales.py::TestNominal::test_color_numeric_with_order_subset\nPASSED tests/_core/test_scales.py::TestNominal::test_color_alpha_in_palette\nPASSED tests/_core/test_scales.py::TestNominal::test_color_unknown_palette\nPASSED tests/_core/test_scales.py::TestNominal::test_object_defaults\nPASSED tests/_core/test_scales.py::TestNominal::test_object_list\nPASSED tests/_core/test_scales.py::TestNominal::test_object_dict\nPASSED tests/_core/test_scales.py::TestNominal::test_object_order\nPASSED tests/_core/test_scales.py::TestNominal::test_object_order_subset\nPASSED tests/_core/test_scales.py::TestNominal::test_objects_that_are_weird\nPASSED tests/_core/test_scales.py::TestNominal::test_alpha_default\nPASSED tests/_core/test_scales.py::TestNominal::test_fill\nPASSED tests/_core/test_scales.py::TestNominal::test_fill_dict\nPASSED tests/_core/test_scales.py::TestNominal::test_fill_nunique_warning\nPASSED tests/_core/test_scales.py::TestNominal::test_interval_defaults\nPASSED tests/_core/test_scales.py::TestNominal::test_interval_tuple\nPASSED tests/_core/test_scales.py::TestNominal::test_interval_tuple_numeric\nPASSED tests/_core/test_scales.py::TestNominal::test_interval_list\nPASSED tests/_core/test_scales.py::TestNominal::test_interval_dict\nPASSED tests/_core/test_scales.py::TestNominal::test_interval_with_transform\nPASSED tests/_core/test_scales.py::TestNominal::test_empty_data\nPASSED tests/_core/test_scales.py::TestTemporal::test_coordinate_defaults\nPASSED tests/_core/test_scales.py::TestTemporal::test_interval_defaults\nPASSED tests/_core/test_scales.py::TestTemporal::test_interval_with_range\nPASSED tests/_core/test_scales.py::TestTemporal::test_interval_with_norm\nPASSED tests/_core/test_scales.py::TestTemporal::test_color_defaults\nPASSED tests/_core/test_scales.py::TestTemporal::test_color_named_values\nPASSED tests/_core/test_scales.py::TestTemporal::test_coordinate_axis\nPASSED tests/_core/test_scales.py::TestTemporal::test_tick_locator\nPASSED tests/_core/test_scales.py::TestTemporal::test_tick_upto\nPASSED tests/_core/test_scales.py::TestTemporal::test_label_formatter\nPASSED tests/_core/test_scales.py::TestTemporal::test_label_concise\nXFAIL tests/_core/test_scales.py::TestNominal::test_color_numeric_int_float_mix - Need to sort out float/int order\n================== 85 passed, 1 xfailed, 2 warnings in 1.34s ===================\n", {"tests/_core/test_scales.py::TestContinuous::test_coordinate_defaults": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_with_parameter": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_error": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_interval_defaults": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_interval_with_range": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_interval_with_norm": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_interval_with_range_norm_and_transform": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_interval_with_bools": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_color_defaults": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_color_named_values": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_color_tuple_values": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_color_callable_values": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_color_with_norm": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_color_with_transform": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_tick_locator": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_tick_locator_input_check": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_tick_upto": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_tick_every": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_tick_every_between": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_tick_at": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_tick_count": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_tick_count_between": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_tick_minor": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_log_tick_default": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_log_tick_upto": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_log_tick_count": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_log_tick_format_disabled": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_log_tick_every": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_symlog_tick_default": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_label_formatter": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_label_like_pattern": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_label_like_string": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_label_like_function": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_label_base": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_label_unit": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_label_unit_with_sep": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_label_empty_unit": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_label_base_from_transform": "PASSED", "tests/_core/test_scales.py::TestContinuous::test_label_type_checks": "PASSED", "tests/_core/test_scales.py::TestNominal::test_coordinate_defaults": "PASSED", "tests/_core/test_scales.py::TestNominal::test_coordinate_with_order": "PASSED", "tests/_core/test_scales.py::TestNominal::test_coordinate_with_subset_order": "PASSED", "tests/_core/test_scales.py::TestNominal::test_coordinate_axis": "PASSED", "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_order": "PASSED", "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_subset_order": "PASSED", "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_category_dtype": "PASSED", "tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data": "PASSED", "tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data_with_order": "PASSED", "tests/_core/test_scales.py::TestNominal::test_color_defaults": "PASSED", "tests/_core/test_scales.py::TestNominal::test_color_named_palette": "PASSED", "tests/_core/test_scales.py::TestNominal::test_color_list_palette": "PASSED", "tests/_core/test_scales.py::TestNominal::test_color_dict_palette": "PASSED", "tests/_core/test_scales.py::TestNominal::test_color_numeric_data": "PASSED", "tests/_core/test_scales.py::TestNominal::test_color_numeric_with_order_subset": "PASSED", "tests/_core/test_scales.py::TestNominal::test_color_alpha_in_palette": "PASSED", "tests/_core/test_scales.py::TestNominal::test_color_unknown_palette": "PASSED", "tests/_core/test_scales.py::TestNominal::test_object_defaults": "PASSED", "tests/_core/test_scales.py::TestNominal::test_object_list": "PASSED", "tests/_core/test_scales.py::TestNominal::test_object_dict": "PASSED", "tests/_core/test_scales.py::TestNominal::test_object_order": "PASSED", "tests/_core/test_scales.py::TestNominal::test_object_order_subset": "PASSED", "tests/_core/test_scales.py::TestNominal::test_objects_that_are_weird": "PASSED", "tests/_core/test_scales.py::TestNominal::test_alpha_default": "PASSED", "tests/_core/test_scales.py::TestNominal::test_fill": "PASSED", "tests/_core/test_scales.py::TestNominal::test_fill_dict": "PASSED", "tests/_core/test_scales.py::TestNominal::test_fill_nunique_warning": "PASSED", "tests/_core/test_scales.py::TestNominal::test_interval_defaults": "PASSED", "tests/_core/test_scales.py::TestNominal::test_interval_tuple": "PASSED", "tests/_core/test_scales.py::TestNominal::test_interval_tuple_numeric": "PASSED", "tests/_core/test_scales.py::TestNominal::test_interval_list": "PASSED", "tests/_core/test_scales.py::TestNominal::test_interval_dict": "PASSED", "tests/_core/test_scales.py::TestNominal::test_interval_with_transform": "PASSED", "tests/_core/test_scales.py::TestNominal::test_empty_data": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_coordinate_defaults": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_interval_defaults": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_interval_with_range": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_interval_with_norm": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_color_defaults": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_color_named_values": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_coordinate_axis": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_tick_locator": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_tick_upto": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_label_formatter": "PASSED", "tests/_core/test_scales.py::TestTemporal::test_label_concise": "PASSED"}]