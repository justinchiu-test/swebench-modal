[{"repo": "pylint-dev/pylint", "instance_id": "pylint-dev__pylint-7228", "base_commit": "d597f252915ddcaaa15ccdfcb35670152cb83587", "patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,20 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regex_transformer(value: str) -> Pattern[str]:\n+    \"\"\"Return `re.compile(value)`.\"\"\"\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        msg = f\"Error in provided regular expression: {value} beginning at index {e.pos}: {e.msg}\"\n+        raise argparse.ArgumentTypeError(msg)\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_regex_transformer(pattern))\n     return patterns\n \n \n@@ -130,7 +139,7 @@ def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+    \"regexp\": _regex_transformer,\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\n", "test_patch": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -111,6 +111,36 @@ def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     assert \"the-newest has an invalid format, should be a version string.\" in output.err\n \n \n+def test_regex_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly error when an an option is passed whose value is an invalid regular expression.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run(\n+            [str(EMPTY_MODULE), r\"--function-rgx=[\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$\"],\n+            exit=False,\n+        )\n+    output = capsys.readouterr()\n+    assert (\n+        r\"Error in provided regular expression: [\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$ beginning at index 1: bad escape \\p\"\n+        in output.err\n+    )\n+\n+\n+def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly error when an option is passed and one\n+    of its comma-separated regular expressions values is an invalid regular expression.\n+    \"\"\"\n+    with pytest.raises(SystemExit):\n+        Run(\n+            [str(EMPTY_MODULE), r\"--bad-names-rgx=(foo{1,3})\"],\n+            exit=False,\n+        )\n+    output = capsys.readouterr()\n+    assert (\n+        r\"Error in provided regular expression: (foo{1 beginning at index 0: missing ), unterminated subpattern\"\n+        in output.err\n+    )\n+\n+\n def test_short_verbose(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly handle the -v flag.\"\"\"\n     Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n", "problem_statement": "rxg include '\\p{Han}' will throw error\n### Bug description\r\n\r\nconfig rxg in pylintrc with \\p{Han} will throw err\r\n\r\n### Configuration\r\n.pylintrc:\r\n\r\n```ini\r\nfunction-rgx=[\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$\r\n```\r\n\r\n### Command used\r\n\r\n```shell\r\npylint\r\n```\r\n\r\n\r\n### Pylint output\r\n\r\n```shell\r\n(venvtest) tsung-hande-MacBook-Pro:robot_is_comming tsung-han$ pylint\r\nTraceback (most recent call last):\r\n  File \"/Users/tsung-han/PycharmProjects/robot_is_comming/venvtest/bin/pylint\", line 8, in <module>\r\n    sys.exit(run_pylint())\r\n  File \"/Users/tsung-han/PycharmProjects/robot_is_comming/venvtest/lib/python3.9/site-packages/pylint/__init__.py\", line 25, in run_pylint\r\n    PylintRun(argv or sys.argv[1:])\r\n  File \"/Users/tsung-han/PycharmProjects/robot_is_comming/venvtest/lib/python3.9/site-packages/pylint/lint/run.py\", line 161, in __init__\r\n    args = _config_initialization(\r\n  File \"/Users/tsung-han/PycharmProjects/robot_is_comming/venvtest/lib/python3.9/site-packages/pylint/config/config_initialization.py\", line 57, in _config_initialization\r\n    linter._parse_configuration_file(config_args)\r\n  File \"/Users/tsung-han/PycharmProjects/robot_is_comming/venvtest/lib/python3.9/site-packages/pylint/config/arguments_manager.py\", line 244, in _parse_configuration_file\r\n    self.config, parsed_args = self._arg_parser.parse_known_args(\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 1858, in parse_known_args\r\n    namespace, args = self._parse_known_args(args, namespace)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 2067, in _parse_known_args\r\n    start_index = consume_optional(start_index)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 2007, in consume_optional\r\n    take_action(action, args, option_string)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 1919, in take_action\r\n    argument_values = self._get_values(action, argument_strings)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 2450, in _get_values\r\n    value = self._get_value(action, arg_string)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 2483, in _get_value\r\n    result = type_func(arg_string)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/re.py\", line 252, in compile\r\n    return _compile(pattern, flags)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/re.py\", line 304, in _compile\r\n    p = sre_compile.compile(pattern, flags)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/sre_compile.py\", line 788, in compile\r\n    p = sre_parse.parse(p, flags)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/sre_parse.py\", line 955, in parse\r\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/sre_parse.py\", line 444, in _parse_sub\r\n    itemsappend(_parse(source, state, verbose, nested + 1,\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/sre_parse.py\", line 555, in _parse\r\n    code1 = _class_escape(source, this)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/sre_parse.py\", line 350, in _class_escape\r\n    raise source.error('bad escape %s' % escape, len(escape))\r\nre.error: bad escape \\p at position 1\r\n```\r\n\r\n### Expected behavior\r\n\r\nnot throw error\r\n\r\n### Pylint version\r\n\r\n```shell\r\npylint 2.14.4\r\nastroid 2.11.7\r\nPython 3.9.13 (main, May 24 2022, 21:28:44) \r\n[Clang 13.0.0 (clang-1300.0.29.30)]\r\n```\r\n\r\n\r\n### OS / Environment\r\n\r\nmacOS 11.6.7\r\n\n", "hints_text": "This doesn't seem like it is a `pylint` issue?\r\n\r\n`re.compile(\"[\\p{Han}a-z_]\")` also raises normally. `\\p` also isn't documented: https://docs.python.org/3/howto/regex.html\r\nIs this a supported character?\nI think this could be improved! Similar to the helpful output when passing an unrecognized option to Pylint, we could give a friendly output indicating that the regex pattern is invalid without the traceback; happy to put a MR together if you agree.\nThanks @mbyrnepr2 I did not even realize it was a crash that we had to fix before your comment.\n@mbyrnepr2 I think in the above stacktrace on line 1858 makes the most sense.\n\nWe need to decide though if we continue to run the program. I think it makes sense to still quit. If we catch regex errors there and pass we will also \"allow\" ignore path regexes that don't work. I don't think we should do that.\n\nImo, incorrect regexes are a little different from other \"incorrect\" options, since there is little risk that they are valid on other interpreters or versions such as old messages etc. Therefore, I'd prefer to (cleanly) exit.\nIndeed @DanielNoord I think we are on the same page regarding this point; I would also exit instead of passing if the regex is invalid. That line you mention, we can basically try/except on re.error and exit printing the details of the pattern which is invalid.", "created_at": "2022-07-25T17:19:11Z", "version": "2.15", "FAIL_TO_PASS": "[\"tests/config/test_config.py::test_regex_error\", \"tests/config/test_config.py::test_csv_regex_error\"]", "PASS_TO_PASS": "[\"tests/config/test_config.py::test_can_read_toml_env_variable\", \"tests/config/test_config.py::test_unknown_message_id\", \"tests/config/test_config.py::test_unknown_option_name\", \"tests/config/test_config.py::test_unknown_short_option_name\", \"tests/config/test_config.py::test_unknown_confidence\", \"tests/config/test_config.py::test_empty_confidence\", \"tests/config/test_config.py::test_unknown_yes_no\", \"tests/config/test_config.py::test_unknown_py_version\", \"tests/config/test_config.py::test_short_verbose\", \"tests/config/test_config.py::test_argument_separator\"]", "environment_setup_commit": "e90702074e68e20dc8e5df5013ee3ecf22139c3e"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   pylint/config/argument.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit d597f252915ddcaaa15ccdfcb35670152cb83587\nAuthor: Dani\u00ebl van Noord <13665637+DanielNoord@users.noreply.github.com>\nDate:   Sun Jul 31 19:11:20 2022 +0200\n\n    Remove ``setup.py`` (#7249)\n\ndiff --git a/setup.py b/setup.py\ndeleted file mode 100644\nindex 917c2a0b2..000000000\n--- a/setup.py\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-# Keep file until dependabot issue is resolved\n-# https://github.com/dependabot/dependabot-core/issues/4483\n-\n-from setuptools import setup\n-\n-setup()\ndiff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 3c2951517..375801c55 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -99,11 +99,20 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:\n     return version\n \n \n+def _regex_transformer(value: str) -> Pattern[str]:\n+    \"\"\"Return `re.compile(value)`.\"\"\"\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        msg = f\"Error in provided regular expression: {value} beginning at index {e.pos}: {e.msg}\"\n+        raise argparse.ArgumentTypeError(msg)\n+\n+\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n-        patterns.append(re.compile(pattern))\n+        patterns.append(_regex_transformer(pattern))\n     return patterns\n \n \n@@ -130,7 +139,7 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {\n     \"non_empty_string\": _non_empty_string_transformer,\n     \"path\": _path_transformer,\n     \"py_version\": _py_version_transformer,\n-    \"regexp\": re.compile,\n+    \"regexp\": _regex_transformer,\n     \"regexp_csv\": _regexp_csv_transfomer,\n     \"regexp_paths_csv\": _regexp_paths_csv_transfomer,\n     \"string\": pylint_utils._unquote,\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'done'\n  Preparing metadata (pyproject.toml): started\n  Preparing metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: dill>=0.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (0.3.9)\nRequirement already satisfied: platformdirs>=2.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (4.3.6)\nRequirement already satisfied: astroid<=2.14.0-dev0,>=2.12.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (2.12.13)\nRequirement already satisfied: isort<6,>=4.2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (5.10.1)\nRequirement already satisfied: mccabe<0.8,>=0.6 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (0.7.0)\nRequirement already satisfied: tomlkit>=0.10.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (0.13.2)\nRequirement already satisfied: typing-extensions>=3.10.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (4.12.2)\nRequirement already satisfied: tomli>=1.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (2.0.2)\nRequirement already satisfied: lazy-object-proxy>=1.4.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astroid<=2.14.0-dev0,>=2.12.2->pylint==2.15.0a0) (1.10.0)\nRequirement already satisfied: wrapt<2,>=1.11 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astroid<=2.14.0-dev0,>=2.12.2->pylint==2.15.0a0) (1.16.0)\nInstalling collected packages: pylint\n  Attempting uninstall: pylint\n    Found existing installation: pylint 2.15.0a0\n    Uninstalling pylint-2.15.0a0:\n      Successfully uninstalled pylint-2.15.0a0\n  Running setup.py develop for pylint\nSuccessfully installed pylint\n============================= test session starts ==============================\nplatform linux -- Python 3.9.20, pytest-7.4.4, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /testbed\nconfigfile: setup.cfg\nplugins: timeout-2.3.1, profiling-1.7.0, forked-1.6.0, cov-3.0.0, benchmark-4.0.0, xdist-2.5.0\ncollected 12 items\n\ntests/config/test_config.py ............                                 [100%]\n\n==================================== PASSES ====================================\n=========================== short test summary info ============================\nPASSED tests/config/test_config.py::test_can_read_toml_env_variable\nPASSED tests/config/test_config.py::test_unknown_message_id\nPASSED tests/config/test_config.py::test_unknown_option_name\nPASSED tests/config/test_config.py::test_unknown_short_option_name\nPASSED tests/config/test_config.py::test_unknown_confidence\nPASSED tests/config/test_config.py::test_empty_confidence\nPASSED tests/config/test_config.py::test_unknown_yes_no\nPASSED tests/config/test_config.py::test_unknown_py_version\nPASSED tests/config/test_config.py::test_regex_error\nPASSED tests/config/test_config.py::test_csv_regex_error\nPASSED tests/config/test_config.py::test_short_verbose\nPASSED tests/config/test_config.py::test_argument_separator\n============================== 12 passed in 1.35s ==============================\n", {"tests/config/test_config.py::test_can_read_toml_env_variable": "PASSED", "tests/config/test_config.py::test_unknown_message_id": "PASSED", "tests/config/test_config.py::test_unknown_option_name": "PASSED", "tests/config/test_config.py::test_unknown_short_option_name": "PASSED", "tests/config/test_config.py::test_unknown_confidence": "PASSED", "tests/config/test_config.py::test_empty_confidence": "PASSED", "tests/config/test_config.py::test_unknown_yes_no": "PASSED", "tests/config/test_config.py::test_unknown_py_version": "PASSED", "tests/config/test_config.py::test_regex_error": "PASSED", "tests/config/test_config.py::test_csv_regex_error": "PASSED", "tests/config/test_config.py::test_short_verbose": "PASSED", "tests/config/test_config.py::test_argument_separator": "PASSED"}]