[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-17022", "base_commit": "f91de695585c1fbc7d4f49ee061f64fcb1c2c4d8", "patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -608,6 +608,13 @@ def _print_MatrixBase(self, expr):\n             func = self._module_format('numpy.array')\n         return \"%s(%s)\" % (func, self._print(expr.tolist()))\n \n+    def _print_Identity(self, expr):\n+        shape = expr.shape\n+        if all([dim.is_Integer for dim in shape]):\n+            return \"%s(%s)\" % (self._module_format('numpy.eye'), self._print(expr.shape[0]))\n+        else:\n+            raise NotImplementedError(\"Symbolic matrix dimensions are not yet supported for identity matrices\")\n+\n     def _print_BlockMatrix(self, expr):\n         return '{0}({1})'.format(self._module_format('numpy.block'),\n                                  self._print(expr.args[0].tolist()))\n", "test_patch": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,6 +1,6 @@\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n-    MatrixSymbol, BlockMatrix\n+    MatrixSymbol, BlockMatrix, Identity\n )\n from sympy import eye\n from sympy.abc import x, i, j, a, b, c, d\n@@ -11,7 +11,7 @@\n from sympy.printing.lambdarepr import NumPyPrinter\n \n from sympy.utilities.pytest import warns_deprecated_sympy\n-from sympy.utilities.pytest import skip\n+from sympy.utilities.pytest import skip, raises\n from sympy.external import import_module\n \n np = import_module('numpy')\n@@ -252,3 +252,21 @@ def test_16857():\n \n     printer = NumPyPrinter()\n     assert printer.doprint(A) == 'numpy.block([[a_1, a_2], [a_3, a_4]])'\n+\n+\n+def test_issue_17006():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    M = MatrixSymbol(\"M\", 2, 2)\n+\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+\n+    assert (f(ma) == mr).all()\n+\n+    from sympy import symbols\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"M\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -7,7 +7,7 @@\n from sympy.core.numbers import pi\n from sympy.functions import acos, Piecewise, sign\n from sympy.logic import And, Or\n-from sympy.matrices import SparseMatrix, MatrixSymbol\n+from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n@@ -49,6 +49,7 @@ def test_NumPyPrinter():\n     A = MatrixSymbol(\"A\", 2, 2)\n     assert p.doprint(A**(-1)) == \"numpy.linalg.inv(A)\"\n     assert p.doprint(A**5) == \"numpy.linalg.matrix_power(A, 5)\"\n+    assert p.doprint(Identity(3)) == \"numpy.eye(3)\"\n \n \n def test_SciPyPrinter():\n", "problem_statement": "Lambdify misinterprets some matrix expressions\nUsing lambdify on an expression containing an identity matrix gives us an unexpected result:\r\n\r\n```python\r\n>>> import numpy as np\r\n>>> n = symbols('n', integer=True)\r\n>>> A = MatrixSymbol(\"A\", n, n)\r\n>>> a = np.array([[1, 2], [3, 4]])\r\n>>> f = lambdify(A, A + Identity(n))\r\n>>> f(a)\r\narray([[1.+1.j, 2.+1.j],\r\n       [3.+1.j, 4.+1.j]])\r\n```\r\n\r\nInstead, the output should be  `array([[2, 2], [3, 5]])`, since we're adding an identity matrix to the array. Inspecting the globals and source code of `f` shows us why we get the result:\r\n\r\n```python\r\n>>> import inspect\r\n>>> print(inspect.getsource(f))\r\ndef _lambdifygenerated(A):\r\n    return (I + A)\r\n>>> f.__globals__['I']\r\n1j\r\n```\r\n\r\nThe code printer prints `I`, which is currently being interpreted as a Python built-in complex number. The printer should support printing identity matrices, and signal an error for unsupported expressions that might be misinterpreted.\n", "hints_text": "If the shape is an explicit number, we can just print `eye(n)`. For unknown shape, it's harder. We can raise an exception for now. It's better to raise an exception than give a wrong answer. ", "created_at": "2019-06-12T21:54:57Z", "version": "1.5", "FAIL_TO_PASS": "[\"test_NumPyPrinter\"]", "PASS_TO_PASS": "[\"test_numpy_piecewise_regression\", \"test_PythonCodePrinter\", \"test_MpmathPrinter\", \"test_SciPyPrinter\", \"test_pycode_reserved_words\", \"test_printmethod\", \"test_codegen_ast_nodes\", \"test_issue_14283\"]", "environment_setup_commit": "70381f282f2d9d039da860e391fe51649df2779d"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   sympy/printing/pycode.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit f91de695585c1fbc7d4f49ee061f64fcb1c2c4d8\nMerge: 3bfd5f8a8e f1d20aeb19\nAuthor: Chris Smith <smichr@gmail.com>\nDate:   Wed Jun 12 16:15:02 2019 -0400\n\n    Merge pull request #17016 from tBuLi/fit_17015\n    \n    Use the symbol used to initiate a MatrixSymbol in all manipulations\n\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 6ec7bd891c..662fa6c819 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -608,6 +608,13 @@ def _print_MatrixBase(self, expr):\n             func = self._module_format('numpy.array')\n         return \"%s(%s)\" % (func, self._print(expr.tolist()))\n \n+    def _print_Identity(self, expr):\n+        shape = expr.shape\n+        if all([dim.is_Integer for dim in shape]):\n+            return \"%s(%s)\" % (self._module_format('numpy.eye'), self._print(expr.shape[0]))\n+        else:\n+            raise NotImplementedError(\"Symbolic matrix dimensions are not yet supported for identity matrices\")\n+\n     def _print_BlockMatrix(self, expr):\n         return '{0}({1})'.format(self._module_format('numpy.block'),\n                                  self._print(expr.args[0].tolist()))\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.5.dev0) (1.3.0)\nInstalling collected packages: sympy\n  Attempting uninstall: sympy\n    Found existing installation: sympy 1.5.dev0\n    Uninstalling sympy-1.5.dev0:\n      Successfully uninstalled sympy-1.5.dev0\n  Running setup.py develop for sympy\nSuccessfully installed sympy\n============================= test process starts ==============================\nexecutable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]\narchitecture:       64-bit\ncache:              no\nground types:       python \nnumpy:              None\nrandom seed:        95738252\nhash randomization: off\n\nsympy/printing/tests/test_numpy.py[18] \ntest_numpy_piecewise_regression ok\ntest_sum NumPy not installed s\ntest_multiple_sums NumPy not installed s\ntest_codegen_einsum NumPy not installed s\ntest_codegen_extra NumPy not installed s\ntest_relational NumPy not installed s\ntest_mod NumPy not installed s\ntest_expm1 NumPy not installed s\ntest_log1p NumPy not installed s\ntest_hypot NumPy not installed s\ntest_log10 NumPy not installed s\ntest_exp2 NumPy not installed s\ntest_log2 NumPy not installed s\ntest_Sqrt NumPy not installed s\ntest_sqrt NumPy not installed s\ntest_issue_15601 Numpy not installed s\ntest_16857 NumPy not installed s\ntest_issue_17006 NumPy not installed s                                      [OK]\n\nsympy/printing/tests/test_pycode.py[9] \ntest_PythonCodePrinter ok\ntest_MpmathPrinter ok\ntest_NumPyPrinter ok\ntest_SciPyPrinter ok\ntest_pycode_reserved_words ok\ntest_printmethod ok\ntest_codegen_ast_nodes ok\ntest_issue_14283 ok\ntest_NumPyPrinter_print_seq ok                                              [OK]\n\n\n============ tests finished: 10 passed, 17 skipped, in 0.05 seconds ============\n", {"test_numpy_piecewise_regression": "PASSED", "test_PythonCodePrinter": "PASSED", "test_MpmathPrinter": "PASSED", "test_NumPyPrinter": "PASSED", "test_SciPyPrinter": "PASSED", "test_pycode_reserved_words": "PASSED", "test_printmethod": "PASSED", "test_codegen_ast_nodes": "PASSED", "test_issue_14283": "PASSED"}]