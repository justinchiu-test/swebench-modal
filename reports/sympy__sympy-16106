[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-16106", "base_commit": "0e987498b00167fdd4a08a41c852a97cb70ce8f2", "patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -1271,6 +1271,26 @@ def _print_Lambda(self, e):\n         return x\n \n \n+    def _print_tuple(self, e):\n+        x = self.dom.createElement('mfenced')\n+        for i in e:\n+            x.appendChild(self._print(i))\n+        return x\n+\n+\n+    def _print_IndexedBase(self, e):\n+        return self._print(e.label)\n+\n+    def _print_Indexed(self, e):\n+        x = self.dom.createElement('msub')\n+        x.appendChild(self._print(e.base))\n+        if len(e.indices) == 1:\n+            x.appendChild(self._print(e.indices[0]))\n+            return x\n+        x.appendChild(self._print(e.indices))\n+        return x\n+\n+\n def mathml(expr, printer='content', **settings):\n     \"\"\"Returns the MathML representation of expr. If printer is presentation then\n      prints Presentation MathML else prints content MathML.\n", "test_patch": "diff --git a/sympy/printing/tests/test_mathml.py b/sympy/printing/tests/test_mathml.py\n--- a/sympy/printing/tests/test_mathml.py\n+++ b/sympy/printing/tests/test_mathml.py\n@@ -1,7 +1,7 @@\n from sympy import diff, Integral, Limit, sin, Symbol, Integer, Rational, cos, \\\n     tan, asin, acos, atan, sinh, cosh, tanh, asinh, acosh, atanh, E, I, oo, \\\n     pi, GoldenRatio, EulerGamma, Sum, Eq, Ne, Ge, Lt, Float, Matrix, Basic, S, \\\n-    MatrixSymbol, Function, Derivative, log, Lambda\n+    MatrixSymbol, Function, Derivative, log, Lambda, IndexedBase, symbols\n from sympy.core.containers import Tuple\n from sympy.functions.elementary.complexes import re, im, Abs, conjugate\n from sympy.functions.elementary.integers import floor, ceiling\n@@ -1139,3 +1139,17 @@ def test_print_random_symbol():\n     R = RandomSymbol(Symbol('R'))\n     assert mpp.doprint(R) == '<mi>R</mi>'\n     assert mp.doprint(R) == '<ci>R</ci>'\n+\n+\n+def test_print_IndexedBase():\n+    a,b,c,d,e = symbols('a b c d e')\n+    assert mathml(IndexedBase(a)[b],printer='presentation') == '<msub><mi>a</mi><mi>b</mi></msub>'\n+    assert mathml(IndexedBase(a)[b,c,d],printer = 'presentation') == '<msub><mi>a</mi><mfenced><mi>b</mi><mi>c</mi><mi>d</mi></mfenced></msub>'\n+    assert mathml(IndexedBase(a)[b]*IndexedBase(c)[d]*IndexedBase(e),printer = 'presentation') == '<mrow><msub><mi>a</mi><mi>b</mi></msub><mo>&InvisibleTimes;</mo><msub><mi>c</mi><mi>d</mi></msub><mo>&InvisibleTimes;</mo><mi>e</mi></mrow>'\n+\n+\n+def test_print_Indexed():\n+    a,b,c = symbols('a b c')\n+    assert mathml(IndexedBase(a),printer = 'presentation') == '<mi>a</mi>'\n+    assert mathml(IndexedBase(a/b),printer = 'presentation') == '<mrow><mfrac><mi>a</mi><mi>b</mi></mfrac></mrow>'\n+    assert mathml(IndexedBase((a,b)),printer = 'presentation') == '<mrow><mfenced><mi>a</mi><mi>b</mi></mfenced></mrow>'\n", "problem_statement": "mathml printer for IndexedBase required\nWriting an `Indexed` object to MathML fails with a `TypeError` exception: `TypeError: 'Indexed' object is not iterable`:\r\n\r\n```\r\nIn [340]: sympy.__version__\r\nOut[340]: '1.0.1.dev'\r\n\r\nIn [341]: from sympy.abc import (a, b)\r\n\r\nIn [342]: sympy.printing.mathml(sympy.IndexedBase(a)[b])\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-342-b32e493b70d3> in <module>()\r\n----> 1 sympy.printing.mathml(sympy.IndexedBase(a)[b])\r\n\r\n/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/mathml.py in mathml(expr, **settings)\r\n    442 def mathml(expr, **settings):\r\n    443     \"\"\"Returns the MathML representation of expr\"\"\"\r\n--> 444     return MathMLPrinter(settings).doprint(expr)\r\n    445 \r\n    446 \r\n\r\n/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/mathml.py in doprint(self, expr)\r\n     36         Prints the expression as MathML.\r\n     37         \"\"\"\r\n---> 38         mathML = Printer._print(self, expr)\r\n     39         unistr = mathML.toxml()\r\n     40         xmlbstr = unistr.encode('ascii', 'xmlcharrefreplace')\r\n\r\n/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/printer.py in _print(self, expr, *args, **kwargs)\r\n    255                 printmethod = '_print_' + cls.__name__\r\n    256                 if hasattr(self, printmethod):\r\n--> 257                     return getattr(self, printmethod)(expr, *args, **kwargs)\r\n    258             # Unknown object, fall back to the emptyPrinter.\r\n    259             return self.emptyPrinter(expr)\r\n\r\n/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/mathml.py in _print_Basic(self, e)\r\n    356     def _print_Basic(self, e):\r\n    357         x = self.dom.createElement(self.mathml_tag(e))\r\n--> 358         for arg in e:\r\n    359             x.appendChild(self._print(arg))\r\n    360         return x\r\n\r\nTypeError: 'Indexed' object is not iterable\r\n```\r\n\r\nIt also fails for more complex expressions where at least one element is Indexed.\n", "hints_text": "Now it returns\r\n```\r\n'<indexed><indexedbase><ci>a</ci></indexedbase><ci>b</ci></indexed>'\r\n```\r\nfor content printer and \r\n```\r\n'<mrow><mi>indexed</mi><mfenced><mrow><mi>indexedbase</mi><mfenced><mi>a</mi></mfenced></mrow><mi>b</mi></mfenced></mrow>'\r\n```\r\nfor presentation printer.\r\n\r\nProbably not correct as it seems like it falls back to the printer for `Basic`.\r\n\r\nHence, a method `_print_IndexedBase` is required. Could be good to look at the LaTeX version to see how subscripts etc are handled.\nHi, can I take up this issue if it still needs fixing?\n@pragyanmehrotra It is still needed so please go ahead!\n@oscargus Sure I'll start working on it right ahead! However, Idk what exactly needs to be done so if you could point out how the output should look like and do I have to implement a new function or edit a current function it'd be a great help, Thanks.\n```\r\nfrom sympy import IndexedBase\r\na, b = symbols('a b')\r\nIndexedBase(a)[b]\r\n```\r\nwhich renders as\r\n![image](https://user-images.githubusercontent.com/8114497/53299790-abec5c80-383f-11e9-82c4-6dd3424f37a7.png)\r\n\r\nMeaning that the presentation MathML output should be something like\r\n`<msub><mi>a<mi><mi>b<mi></msub>`\r\n\r\nHave a look at #16036 for some good resources.\r\n\r\nBasically you need to do something like:\r\n```\r\nm = self.dom.createElement('msub')\r\nm.appendChild(self._print(Whatever holds a))\r\nm.appendChild(self._print(Whatever holds b))\r\n```\r\nin a function called `_print_IndexedBase`.", "created_at": "2019-02-28T17:21:46Z", "version": "1.4", "FAIL_TO_PASS": "[\"test_print_IndexedBase\"]", "PASS_TO_PASS": "[\"test_mathml_printer\", \"test_content_printmethod\", \"test_content_mathml_core\", \"test_content_mathml_functions\", \"test_content_mathml_limits\", \"test_content_mathml_integrals\", \"test_content_mathml_matrices\", \"test_content_mathml_sums\", \"test_content_mathml_tuples\", \"test_content_mathml_add\", \"test_content_mathml_Rational\", \"test_content_mathml_constants\", \"test_content_mathml_trig\", \"test_content_mathml_relational\", \"test_content_symbol\", \"test_content_mathml_greek\", \"test_content_mathml_order\", \"test_content_settings\", \"test_presentation_printmethod\", \"test_presentation_mathml_core\", \"test_presentation_mathml_functions\", \"test_print_derivative\", \"test_presentation_mathml_limits\", \"test_presentation_mathml_integrals\", \"test_presentation_mathml_matrices\", \"test_presentation_mathml_sums\", \"test_presentation_mathml_add\", \"test_presentation_mathml_Rational\", \"test_presentation_mathml_constants\", \"test_presentation_mathml_trig\", \"test_presentation_mathml_relational\", \"test_presentation_symbol\", \"test_presentation_mathml_greek\", \"test_presentation_mathml_order\", \"test_print_tuples\", \"test_print_re_im\", \"test_presentation_settings\", \"test_toprettyxml_hooking\", \"test_print_domains\", \"test_print_expression_with_minus\", \"test_print_AssocOp\", \"test_print_basic\", \"test_ln_notation_print\", \"test_mul_symbol_print\", \"test_print_lerchphi\", \"test_print_polylog\", \"test_print_logic\", \"test_root_notation_print\", \"test_fold_frac_powers_print\", \"test_fold_short_frac_print\", \"test_print_factorials\", \"test_print_Lambda\", \"test_print_conjugate\", \"test_print_matrix_symbol\", \"test_print_random_symbol\"]", "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   sympy/printing/mathml.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 0e987498b00167fdd4a08a41c852a97cb70ce8f2\nMerge: 6ad7e8d132 4171f26ebd\nAuthor: Chris Smith <smichr@gmail.com>\nDate:   Thu Mar 7 07:57:15 2019 -0600\n\n    Merge pull request #16185 from RituRajSingh878/diff\n    \n    abs(f(x)).diff(f(x)) behaves more like abs(x).diff(x)\n\ndiff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 1aa0ee01a2..2cdc05a7b6 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -1271,6 +1271,26 @@ def _print_Lambda(self, e):\n         return x\n \n \n+    def _print_tuple(self, e):\n+        x = self.dom.createElement('mfenced')\n+        for i in e:\n+            x.appendChild(self._print(i))\n+        return x\n+\n+\n+    def _print_IndexedBase(self, e):\n+        return self._print(e.label)\n+\n+    def _print_Indexed(self, e):\n+        x = self.dom.createElement('msub')\n+        x.appendChild(self._print(e.base))\n+        if len(e.indices) == 1:\n+            x.appendChild(self._print(e.indices[0]))\n+            return x\n+        x.appendChild(self._print(e.indices))\n+        return x\n+\n+\n def mathml(expr, printer='content', **settings):\n     \"\"\"Returns the MathML representation of expr. If printer is presentation then\n      prints Presentation MathML else prints content MathML.\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.4.dev0) (1.3.0)\nInstalling collected packages: sympy\n  Attempting uninstall: sympy\n    Found existing installation: sympy 1.4.dev0\n    Uninstalling sympy-1.4.dev0:\n      Successfully uninstalled sympy-1.4.dev0\n  Running setup.py develop for sympy\nSuccessfully installed sympy\n============================= test process starts ==============================\nexecutable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]\narchitecture:       64-bit\ncache:              no\nground types:       python \nnumpy:              None\nrandom seed:        7607415\nhash randomization: off\n\nsympy/printing/tests/test_mathml.py[66] \ntest_mathml_printer ok\ntest_content_printmethod ok\ntest_content_mathml_core ok\ntest_content_mathml_functions ok\ntest_content_mathml_limits ok\ntest_content_mathml_integrals ok\ntest_content_mathml_matrices ok\ntest_content_mathml_sums ok\ntest_content_mathml_tuples ok\ntest_content_mathml_add ok\ntest_content_mathml_Rational ok\ntest_content_mathml_constants ok\ntest_content_mathml_trig ok\ntest_content_mathml_relational ok\ntest_content_symbol ok\ntest_content_mathml_greek ok\ntest_content_mathml_order ok\ntest_content_settings ok\ntest_presentation_printmethod ok\ntest_presentation_mathml_core ok\ntest_presentation_mathml_functions ok\ntest_print_derivative ok\ntest_presentation_mathml_limits ok\ntest_presentation_mathml_integrals ok\ntest_presentation_mathml_matrices ok\ntest_presentation_mathml_sums ok\ntest_presentation_mathml_add ok\ntest_presentation_mathml_Rational ok\ntest_presentation_mathml_constants ok\ntest_presentation_mathml_trig ok\ntest_presentation_mathml_relational ok\ntest_presentation_symbol ok\ntest_presentation_mathml_greek ok\ntest_presentation_mathml_order ok\ntest_print_intervals F\ntest_print_tuples ok\ntest_print_re_im ok\ntest_print_Abs F\ntest_print_Determinant F\ntest_presentation_settings ok\ntest_toprettyxml_hooking ok\ntest_print_domains ok\ntest_print_expression_with_minus ok\ntest_print_AssocOp ok\ntest_print_basic ok\ntest_mat_delim_print F\ntest_ln_notation_print ok\ntest_mul_symbol_print ok\ntest_print_lerchphi ok\ntest_print_polylog ok\ntest_print_set_frozenset F\ntest_print_FiniteSet F\ntest_print_SetOp F\ntest_print_logic ok\ntest_root_notation_print ok\ntest_fold_frac_powers_print ok\ntest_fold_short_frac_print ok\ntest_print_factorials ok\ntest_print_floor F\ntest_print_ceiling F\ntest_print_Lambda ok\ntest_print_conjugate ok\ntest_print_matrix_symbol ok\ntest_print_random_symbol ok\ntest_print_IndexedBase ok\ntest_print_Indexed ok                                                     [FAIL]\n\n\n________________________________________________________________________________\n___________ sympy/printing/tests/test_mathml.py:test_print_intervals ___________\nTraceback (most recent call last):\n  File \"/testbed/sympy/printing/tests/test_mathml.py\", line 922, in test_print_intervals\n    assert mpp.doprint(Interval(0, a)) == '<mrow><mfenced close=\"]\" open=\"[\"><mn>0</mn><mi>a</mi></mfenced></mrow>'\nAssertionError\n________________________________________________________________________________\n______________ sympy/printing/tests/test_mathml.py:test_print_Abs ______________\nTraceback (most recent call last):\n  File \"/testbed/sympy/printing/tests/test_mathml.py\", line 948, in test_print_Abs\n    assert mpp.doprint(Abs(x)) == '<mrow><mfenced close=\"|\" open=\"|\"><mi>x</mi></mfenced></mrow>'\nAssertionError\n________________________________________________________________________________\n__________ sympy/printing/tests/test_mathml.py:test_print_Determinant __________\nTraceback (most recent call last):\n  File \"/testbed/sympy/printing/tests/test_mathml.py\", line 953, in test_print_Determinant\n    assert mpp.doprint(Determinant(Matrix([[1, 2], [3, 4]]))) == '<mrow><mfenced close=\"|\" open=\"|\"><mfenced close=\"]\" open=\"[\"><mtable><mtr><mtd><mn>1</mn></mtd><mtd><mn>2</mn></mtd></mtr><mtr><mtd><mn>3</mn></mtd><mtd><mn>4</mn></mtd></mtr></mtable></mfenced></mfenced></mrow>'\nAssertionError\n________________________________________________________________________________\n___________ sympy/printing/tests/test_mathml.py:test_mat_delim_print ___________\nTraceback (most recent call last):\n  File \"/testbed/sympy/printing/tests/test_mathml.py\", line 1009, in test_mat_delim_print\n    assert mathml(expr, printer='presentation', mat_delim='[') == '<mfenced close=\"]\" open=\"[\"><mtable><mtr><mtd><mn>1</mn></mtd><mtd><mn>2</mn></mtd></mtr><mtr><mtd><mn>3</mn></mtd><mtd><mn>4</mn></mtd></mtr></mtable></mfenced>'\nAssertionError\n________________________________________________________________________________\n_________ sympy/printing/tests/test_mathml.py:test_print_set_frozenset _________\nTraceback (most recent call last):\n  File \"/testbed/sympy/printing/tests/test_mathml.py\", line 1041, in test_print_set_frozenset\n    assert mpp.doprint(f) == '<mfenced close=\"}\" open=\"{\"><mn>1</mn><mn>3</mn><mn>5</mn></mfenced>'\nAssertionError\n________________________________________________________________________________\n___________ sympy/printing/tests/test_mathml.py:test_print_FiniteSet ___________\nTraceback (most recent call last):\n  File \"/testbed/sympy/printing/tests/test_mathml.py\", line 1048, in test_print_FiniteSet\n    assert mpp.doprint(f1) == '<mfenced close=\"}\" open=\"{\"><mn>1</mn><mn>3</mn><mi>x</mi></mfenced>'\nAssertionError\n________________________________________________________________________________\n_____________ sympy/printing/tests/test_mathml.py:test_print_SetOp _____________\nTraceback (most recent call last):\n  File \"/testbed/sympy/printing/tests/test_mathml.py\", line 1055, in test_print_SetOp\n    assert mpp.doprint(Union(f1, f2, evaluate=False)) == '<mrow><mfenced close=\"}\" open=\"{\"><mn>1</mn><mn>3</mn><mi>x</mi></mfenced><mo>&#x222A;</mo><mfenced close=\"}\" open=\"{\"><mn>2</mn><mn>4</mn><mi>y</mi></mfenced></mrow>'\nAssertionError\n________________________________________________________________________________\n_____________ sympy/printing/tests/test_mathml.py:test_print_floor _____________\nTraceback (most recent call last):\n  File \"/testbed/sympy/printing/tests/test_mathml.py\", line 1110, in test_print_floor\n    assert mathml(expr, printer='presentation') == '<mrow><mfenced close=\"&#8971;\" open=\"&#8970;\"><mi>x</mi></mfenced></mrow>'\nAssertionError\n________________________________________________________________________________\n____________ sympy/printing/tests/test_mathml.py:test_print_ceiling ____________\nTraceback (most recent call last):\n  File \"/testbed/sympy/printing/tests/test_mathml.py\", line 1115, in test_print_ceiling\n    assert mathml(expr, printer='presentation') == '<mrow><mfenced close=\"&#8969;\" open=\"&#8968;\"><mi>x</mi></mfenced></mrow>'\nAssertionError\n\n============= tests finished: 57 passed, 9 failed, in 0.20 seconds =============\nDO *NOT* COMMIT!\n", {"sympy/printing/tests/test_mathml.py:test_print_intervals": "FAILED", "sympy/printing/tests/test_mathml.py:test_print_Abs": "FAILED", "sympy/printing/tests/test_mathml.py:test_print_Determinant": "FAILED", "sympy/printing/tests/test_mathml.py:test_mat_delim_print": "FAILED", "sympy/printing/tests/test_mathml.py:test_print_set_frozenset": "FAILED", "sympy/printing/tests/test_mathml.py:test_print_FiniteSet": "FAILED", "sympy/printing/tests/test_mathml.py:test_print_SetOp": "FAILED", "sympy/printing/tests/test_mathml.py:test_print_floor": "FAILED", "sympy/printing/tests/test_mathml.py:test_print_ceiling": "FAILED", "test_mathml_printer": "PASSED", "test_content_printmethod": "PASSED", "test_content_mathml_core": "PASSED", "test_content_mathml_functions": "PASSED", "test_content_mathml_limits": "PASSED", "test_content_mathml_integrals": "PASSED", "test_content_mathml_matrices": "PASSED", "test_content_mathml_sums": "PASSED", "test_content_mathml_tuples": "PASSED", "test_content_mathml_add": "PASSED", "test_content_mathml_Rational": "PASSED", "test_content_mathml_constants": "PASSED", "test_content_mathml_trig": "PASSED", "test_content_mathml_relational": "PASSED", "test_content_symbol": "PASSED", "test_content_mathml_greek": "PASSED", "test_content_mathml_order": "PASSED", "test_content_settings": "PASSED", "test_presentation_printmethod": "PASSED", "test_presentation_mathml_core": "PASSED", "test_presentation_mathml_functions": "PASSED", "test_print_derivative": "PASSED", "test_presentation_mathml_limits": "PASSED", "test_presentation_mathml_integrals": "PASSED", "test_presentation_mathml_matrices": "PASSED", "test_presentation_mathml_sums": "PASSED", "test_presentation_mathml_add": "PASSED", "test_presentation_mathml_Rational": "PASSED", "test_presentation_mathml_constants": "PASSED", "test_presentation_mathml_trig": "PASSED", "test_presentation_mathml_relational": "PASSED", "test_presentation_symbol": "PASSED", "test_presentation_mathml_greek": "PASSED", "test_presentation_mathml_order": "PASSED", "test_print_intervals": "FAILED", "test_print_tuples": "PASSED", "test_print_re_im": "PASSED", "test_print_Abs": "FAILED", "test_print_Determinant": "FAILED", "test_presentation_settings": "PASSED", "test_toprettyxml_hooking": "PASSED", "test_print_domains": "PASSED", "test_print_expression_with_minus": "PASSED", "test_print_AssocOp": "PASSED", "test_print_basic": "PASSED", "test_mat_delim_print": "FAILED", "test_ln_notation_print": "PASSED", "test_mul_symbol_print": "PASSED", "test_print_lerchphi": "PASSED", "test_print_polylog": "PASSED", "test_print_set_frozenset": "FAILED", "test_print_FiniteSet": "FAILED", "test_print_SetOp": "FAILED", "test_print_logic": "PASSED", "test_root_notation_print": "PASSED", "test_fold_frac_powers_print": "PASSED", "test_fold_short_frac_print": "PASSED", "test_print_factorials": "PASSED", "test_print_floor": "FAILED", "test_print_ceiling": "FAILED", "test_print_Lambda": "PASSED", "test_print_conjugate": "PASSED", "test_print_matrix_symbol": "PASSED", "test_print_random_symbol": "PASSED", "test_print_IndexedBase": "PASSED"}]