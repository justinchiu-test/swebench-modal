[{"repo": "django/django", "instance_id": "django__django-16255", "base_commit": "444b6da7cc229a58a2c476a52e45233001dc7073", "patch": "diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -167,7 +167,7 @@ def get_latest_lastmod(self):\n             return None\n         if callable(self.lastmod):\n             try:\n-                return max([self.lastmod(item) for item in self.items()])\n+                return max([self.lastmod(item) for item in self.items()], default=None)\n             except TypeError:\n                 return None\n         else:\n", "test_patch": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,16 @@ def test_callable_sitemod_full(self):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\ndiff --git a/tests/sitemaps_tests/urls/http.py b/tests/sitemaps_tests/urls/http.py\n--- a/tests/sitemaps_tests/urls/http.py\n+++ b/tests/sitemaps_tests/urls/http.py\n@@ -114,6 +114,16 @@ def lastmod(self, obj):\n         return obj.lastmod\n \n \n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+\n class GetLatestLastmodNoneSiteMap(Sitemap):\n     changefreq = \"never\"\n     priority = 0.5\n@@ -233,6 +243,10 @@ def testmodelview(request, id):\n     \"callable-lastmod\": CallableLastmodFullSitemap,\n }\n \n+callable_lastmod_no_items_sitemap = {\n+    \"callable-lastmod\": CallableLastmodNoItemsSitemap,\n+}\n+\n urlpatterns = [\n     path(\"simple/index.xml\", views.index, {\"sitemaps\": simple_sitemaps}),\n     path(\"simple-paged/index.xml\", views.index, {\"sitemaps\": simple_sitemaps_paged}),\n@@ -417,6 +431,11 @@ def testmodelview(request, id):\n         views.sitemap,\n         {\"sitemaps\": callable_lastmod_full_sitemap},\n     ),\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": callable_lastmod_no_items_sitemap},\n+    ),\n     path(\n         \"generic-lastmod/index.xml\",\n         views.index,\n", "problem_statement": "Sitemaps without items raise ValueError on callable lastmod.\nDescription\n\t\nWhen sitemap contains not items, but supports returning lastmod for an item, it fails with a ValueError:\nTraceback (most recent call last):\n File \"/usr/local/lib/python3.10/site-packages/django/core/handlers/exception.py\", line 55, in inner\n\tresponse = get_response(request)\n File \"/usr/local/lib/python3.10/site-packages/django/core/handlers/base.py\", line 197, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\n File \"/usr/local/lib/python3.10/site-packages/django/utils/decorators.py\", line 133, in _wrapped_view\n\tresponse = view_func(request, *args, **kwargs)\n File \"/usr/local/lib/python3.10/site-packages/django/contrib/sitemaps/views.py\", line 34, in inner\n\tresponse = func(request, *args, **kwargs)\n File \"/usr/local/lib/python3.10/site-packages/django/contrib/sitemaps/views.py\", line 76, in index\n\tsite_lastmod = site.get_latest_lastmod()\n File \"/usr/local/lib/python3.10/site-packages/django/contrib/sitemaps/__init__.py\", line 170, in get_latest_lastmod\n\treturn max([self.lastmod(item) for item in self.items()])\nException Type: ValueError at /sitemap.xml\nException Value: max() arg is an empty sequence\nSomething like this might be a solution:\n\t def get_latest_lastmod(self):\n\t\t if not hasattr(self, \"lastmod\"):\n\t\t\t return None\n\t\t if callable(self.lastmod):\n\t\t\t try:\n\t\t\t\t return max([self.lastmod(item) for item in self.items()])\n-\t\t\texcept TypeError:\n+\t\t\texcept (TypeError, ValueError):\n\t\t\t\t return None\n\t\t else:\n\t\t\t return self.lastmod\n", "hints_text": "Thanks for the report.\nThe default argument of max() can be used.", "created_at": "2022-11-04T13:49:40Z", "version": "4.2", "FAIL_TO_PASS": "[\"test_callable_sitemod_no_items (sitemaps_tests.test_http.HTTPSitemapTests)\"]", "PASS_TO_PASS": "[\"A simple sitemap index can be rendered with a custom template\", \"test_simple_sitemap_custom_index_warning (sitemaps_tests.test_http.DeprecatedTests)\", \"A i18n sitemap with alternate/hreflang links can be rendered.\", \"A i18n sitemap index with limited languages can be rendered.\", \"A i18n sitemap index with x-default can be rendered.\", \"A cached sitemap index can be rendered (#2713).\", \"All items in the sitemap have `lastmod`. The `Last-Modified` header\", \"Not all items have `lastmod`. Therefore the `Last-Modified` header\", \"test_empty_page (sitemaps_tests.test_http.HTTPSitemapTests)\", \"test_empty_sitemap (sitemaps_tests.test_http.HTTPSitemapTests)\", \"The priority value should not be localized.\", \"test_no_section (sitemaps_tests.test_http.HTTPSitemapTests)\", \"test_page_not_int (sitemaps_tests.test_http.HTTPSitemapTests)\", \"A sitemap may have multiple pages.\", \"test_requestsite_sitemap (sitemaps_tests.test_http.HTTPSitemapTests)\", \"A simple sitemap can be rendered with a custom template\", \"A simple i18n sitemap index can be rendered, without logging variable\", \"A simple sitemap can be rendered\", \"A simple sitemap index can be rendered\", \"A simple sitemap section can be rendered\", \"sitemapindex.lastmod is included when Sitemap.lastmod is\", \"sitemapindex.lastmod is omitted when Sitemap.lastmod is\", \"Check we get ImproperlyConfigured if we don't pass a site object to\", \"Check we get ImproperlyConfigured when we don't pass a site object to\", \"Check to make sure that the raw item is included with each\", \"Last-Modified header is set correctly\", \"The Last-Modified header should be support dates (without time).\", \"Last-Modified header is missing when sitemap has no lastmod\", \"Last-Modified header is omitted when lastmod not on all items\", \"The Last-Modified header should be converted from timezone aware dates\", \"lastmod datestamp shows timezones if Sitemap.get_latest_lastmod\", \"A sitemap may not be callable.\", \"test_sitemap_without_entries (sitemaps_tests.test_http.HTTPSitemapTests)\", \"The Last-Modified header is set to the most recent sitemap lastmod.\", \"The Last-Modified header is omitted when lastmod isn't found in all\", \"test_x_robots_sitemap (sitemaps_tests.test_http.HTTPSitemapTests)\"]", "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/contrib/sitemaps/__init__.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 444b6da7cc229a58a2c476a52e45233001dc7073\nAuthor: Adam Johnson <me@adamj.eu>\nDate:   Wed Oct 12 09:25:04 2022 +0100\n\n    Refs #33939 -- Improved transaction.on_commit() docs.\n\ndiff --git a/docs/topics/db/transactions.txt b/docs/topics/db/transactions.txt\nindex 004f8351b8..d0b67b86f4 100644\n--- a/docs/topics/db/transactions.txt\n+++ b/docs/topics/db/transactions.txt\n@@ -290,45 +290,47 @@ Performing actions after commit\n \n Sometimes you need to perform an action related to the current database\n transaction, but only if the transaction successfully commits. Examples might\n-include a `Celery`_ task, an email notification, or a cache invalidation.\n+include a background task, an email notification, or a cache invalidation.\n \n-.. _Celery: https://pypi.org/project/celery/\n-\n-Django provides the :func:`on_commit` function to register callback functions\n-that should be executed after a transaction is successfully committed:\n+:func:`on_commit` allows you to register callbacks that will be executed after\n+the open transaction is successfully committed:\n \n .. function:: on_commit(func, using=None, robust=False)\n \n-Pass any function (that takes no arguments) to :func:`on_commit`::\n+Pass a function, or any callable, to :func:`on_commit`::\n \n     from django.db import transaction\n \n-    def do_something():\n-        pass  # send a mail, invalidate a cache, fire off a Celery task, etc.\n+    def send_welcome_email():\n+        ...\n \n-    transaction.on_commit(do_something)\n+    transaction.on_commit(send_welcome_email)\n \n-You can also bind arguments to your function using :func:`functools.partial`::\n+Callbacks will not be passed any arguments, but you can bind them with\n+:func:`functools.partial`::\n \n     from functools import partial\n \n-    transaction.on_commit(partial(some_celery_task.delay, 'arg1'))\n+    for user in users:\n+        transaction.on_commit(\n+            partial(send_invite_email, user=user)\n+        )\n \n-The function you pass in will be called immediately after a hypothetical\n-database write made where ``on_commit()`` is called would be successfully\n-committed.\n+Callbacks are called after the open transaction is successfully committed. If\n+the transaction is instead rolled back (typically when an unhandled exception\n+is raised in an :func:`atomic` block), the callback will be discarded, and\n+never called.\n \n-If you call ``on_commit()`` while there isn't an active transaction, the\n-callback will be executed immediately.\n+If you call ``on_commit()`` while there isn't an open transaction,\n+the callback will be executed immediately.\n \n-If that hypothetical database write is instead rolled back (typically when an\n-unhandled exception is raised in an :func:`atomic` block), your function will\n-be discarded and never called.\n+It's sometimes useful to register callbacks that can fail. Passing\n+``robust=True`` allows the next callbacks to be executed even if the current\n+one throws an exception. All errors derived from Python's ``Exception`` class\n+are caught and logged to the ``django.db.backends.base`` logger.\n \n-It's sometimes useful to register callback functions that can fail. Passing\n-``robust=True`` allows the next functions to be executed even if the current\n-function throws an exception. All errors derived from Python's ``Exception``\n-class are caught and logged to the ``django.db.backends.base`` logger.\n+You can use :meth:`.TestCase.captureOnCommitCallbacks` to test callbacks\n+registered with :func:`on_commit`.\n \n .. versionchanged:: 4.2\n \n@@ -390,8 +392,8 @@ Timing of execution\n Your callbacks are executed *after* a successful commit, so a failure in a\n callback will not cause the transaction to roll back. They are executed\n conditionally upon the success of the transaction, but they are not *part* of\n-the transaction. For the intended use cases (mail notifications, Celery tasks,\n-etc.), this should be fine. If it's not (if your follow-up action is so\n+the transaction. For the intended use cases (mail notifications, background\n+tasks, etc.), this should be fine. If it's not (if your follow-up action is so\n critical that its failure should mean the failure of the transaction itself),\n then you don't want to use the :func:`on_commit` hook. Instead, you may want\n `two-phase commit`_ such as the :ref:`psycopg Two-Phase Commit protocol support\ndiff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 27756d9d96..3d276b60d4 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -167,7 +167,7 @@ class Sitemap:\n             return None\n         if callable(self.lastmod):\n             try:\n-                return max([self.lastmod(item) for item in self.items()])\n+                return max([self.lastmod(item) for item in self.items()], default=None)\n             except TypeError:\n                 return None\n         else:\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.5.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20221104112025) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20221104112025) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.5.2->Django==4.2.dev20221104112025) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.2.dev20221104112025-0.editable-py3-none-any.whl size=27227 sha256=f3a890532b9ddd30eecf1cf4e59b21fdc36eac4bb6c0282d3eebe59e0b8239b4\n  Stored in directory: /tmp/pip-ephem-wheel-cache-wxwx6ozl/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.2.dev20221104112025\n    Uninstalling Django-4.2.dev20221104112025:\n      Successfully uninstalled Django-4.2.dev20221104112025\nSuccessfully installed Django-4.2.dev20221104112025\nTesting against Django installed in '/testbed/django'\nImporting application sitemaps_tests\nFound 40 test(s).\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, sitemaps_tests, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table sitemaps_tests_testmodel\n    Creating table sitemaps_tests_i18ntestmodel\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]