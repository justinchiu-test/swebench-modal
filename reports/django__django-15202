[{"repo": "django/django", "instance_id": "django__django-15202", "base_commit": "4fd3044ca0135da903a70dfb66992293f529ecf1", "patch": "diff --git a/django/core/validators.py b/django/core/validators.py\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -108,15 +108,16 @@ def __call__(self, value):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # Then check full URL\n+        try:\n+            splitted_url = urlsplit(value)\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         try:\n             super().__call__(value)\n         except ValidationError as e:\n             # Trivial case failed. Try for possible IDN domain\n             if value:\n-                try:\n-                    scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:  # for example, \"Invalid IPv6 URL\"\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+                scheme, netloc, path, query, fragment = splitted_url\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n                 except UnicodeError:  # invalid domain part\n@@ -127,7 +128,7 @@ def __call__(self, value):\n                 raise\n         else:\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', splitted_url.netloc)\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -139,7 +140,7 @@ def __call__(self, value):\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        if splitted_url.hostname is None or len(splitted_url.hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n", "test_patch": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -100,6 +100,10 @@ def test_urlfield_clean_invalid(self):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # urlsplit() raises ValueError.\n+            '////]@N.AN',\n+            # Empty hostname.\n+            '#@A.bO',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n", "problem_statement": "URLField throws ValueError instead of ValidationError on clean\nDescription\n\t\nforms.URLField( ).clean('////]@N.AN')\nresults in:\n\tValueError: Invalid IPv6 URL\n\tTraceback (most recent call last):\n\t File \"basic_fuzzer.py\", line 22, in TestOneInput\n\t File \"fuzzers.py\", line 350, in test_forms_URLField\n\t File \"django/forms/fields.py\", line 151, in clean\n\t File \"django/forms/fields.py\", line 136, in run_validators\n\t File \"django/core/validators.py\", line 130, in __call__\n\t File \"urllib/parse.py\", line 440, in urlsplit\n", "hints_text": "", "created_at": "2021-12-15T15:04:13Z", "version": "4.1", "FAIL_TO_PASS": "[\"test_urlfield_clean_invalid (forms_tests.field_tests.test_urlfield.URLFieldTest)\", \"test_urlfield_clean_not_required (forms_tests.field_tests.test_urlfield.URLFieldTest)\"]", "PASS_TO_PASS": "[\"test_urlfield_clean (forms_tests.field_tests.test_urlfield.URLFieldTest)\", \"test_urlfield_clean_required (forms_tests.field_tests.test_urlfield.URLFieldTest)\", \"test_urlfield_strip_on_none_value (forms_tests.field_tests.test_urlfield.URLFieldTest)\", \"test_urlfield_unable_to_set_strip_kwarg (forms_tests.field_tests.test_urlfield.URLFieldTest)\", \"test_urlfield_widget (forms_tests.field_tests.test_urlfield.URLFieldTest)\", \"test_urlfield_widget_max_min_length (forms_tests.field_tests.test_urlfield.URLFieldTest)\"]", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/core/validators.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 4fd3044ca0135da903a70dfb66992293f529ecf1\nAuthor: mendespedro <windowsxpedro@gmail.com>\nDate:   Wed Dec 15 13:56:04 2021 -0300\n\n    Fixed #33368 -- Fixed parse_duration() crash on invalid separators for decimal fractions.\n\ndiff --git a/django/utils/dateparse.py b/django/utils/dateparse.py\nindex 238c727cb1..e2a806c8e8 100644\n--- a/django/utils/dateparse.py\n+++ b/django/utils/dateparse.py\n@@ -42,11 +42,11 @@ standard_duration_re = _lazy_re_compile(\n iso8601_duration_re = _lazy_re_compile(\n     r'^(?P<sign>[-+]?)'\n     r'P'\n-    r'(?:(?P<days>\\d+(.\\d+)?)D)?'\n+    r'(?:(?P<days>\\d+([\\.,]\\d+)?)D)?'\n     r'(?:T'\n-    r'(?:(?P<hours>\\d+(.\\d+)?)H)?'\n-    r'(?:(?P<minutes>\\d+(.\\d+)?)M)?'\n-    r'(?:(?P<seconds>\\d+(.\\d+)?)S)?'\n+    r'(?:(?P<hours>\\d+([\\.,]\\d+)?)H)?'\n+    r'(?:(?P<minutes>\\d+([\\.,]\\d+)?)M)?'\n+    r'(?:(?P<seconds>\\d+([\\.,]\\d+)?)S)?'\n     r')?'\n     r'$'\n )\ndiff --git a/tests/forms_tests/field_tests/test_durationfield.py b/tests/forms_tests/field_tests/test_durationfield.py\nindex f5125aa571..dae139446d 100644\n--- a/tests/forms_tests/field_tests/test_durationfield.py\n+++ b/tests/forms_tests/field_tests/test_durationfield.py\n@@ -30,6 +30,8 @@ class DurationFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n         msg = 'Enter a valid duration.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.clean('not_a_time')\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            DurationField().clean('P3(3D')\n \n     def test_durationfield_clean_not_required(self):\n         f = DurationField(required=False)\ndiff --git a/tests/utils_tests/test_dateparse.py b/tests/utils_tests/test_dateparse.py\nindex 0880de2034..f2f66f351d 100644\n--- a/tests/utils_tests/test_dateparse.py\n+++ b/tests/utils_tests/test_dateparse.py\n@@ -161,6 +161,11 @@ class DurationParseTests(unittest.TestCase):\n             ('-PT0.000005S', timedelta(microseconds=-5)),\n             ('-PT0,000005S', timedelta(microseconds=-5)),\n             ('-P4DT1H', timedelta(days=-4, hours=-1)),\n+            # Invalid separators for decimal fractions.\n+            ('P3(3D', None),\n+            ('PT3)3H', None),\n+            ('PT3|3M', None),\n+            ('PT3/3S', None),\n         )\n         for source, expected in test_values:\n             with self.subTest(source=source):\ndiff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..eec7803714 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -108,15 +108,16 @@ class URLValidator(RegexValidator):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # Then check full URL\n+        try:\n+            splitted_url = urlsplit(value)\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         try:\n             super().__call__(value)\n         except ValidationError as e:\n             # Trivial case failed. Try for possible IDN domain\n             if value:\n-                try:\n-                    scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:  # for example, \"Invalid IPv6 URL\"\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+                scheme, netloc, path, query, fragment = splitted_url\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n                 except UnicodeError:  # invalid domain part\n@@ -127,7 +128,7 @@ class URLValidator(RegexValidator):\n                 raise\n         else:\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', splitted_url.netloc)\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n@@ -139,7 +140,7 @@ class URLValidator(RegexValidator):\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        if splitted_url.hostname is None or len(splitted_url.hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20211220054634) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20211220054634) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20211220054634) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.1.dev20211220054634-0.editable-py3-none-any.whl size=26874 sha256=9807ddb13f1214045957c07924679fe806bcf6a9401746759f75c707a2f97cf0\n  Stored in directory: /tmp/pip-ephem-wheel-cache-e47joi_m/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.1.dev20211220054634\n    Uninstalling Django-4.1.dev20211220054634:\n      Successfully uninstalled Django-4.1.dev20211220054634\nSuccessfully installed Django-4.1.dev20211220054634\nTesting against Django installed in '/testbed/django'\nImporting application forms_tests\nFound 8 test(s).\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n", {}]