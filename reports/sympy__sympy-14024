[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-14024", "base_commit": "b17abcb09cbcee80a90f6750e0f9b53f0247656c", "patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1678,11 +1678,7 @@ def _eval_power(self, expt):\n                 if (ne is S.One):\n                     return Rational(self.q, self.p)\n                 if self.is_negative:\n-                    if expt.q != 1:\n-                        return -(S.NegativeOne)**((expt.p % expt.q) /\n-                               S(expt.q))*Rational(self.q, -self.p)**ne\n-                    else:\n-                        return S.NegativeOne**ne*Rational(self.q, -self.p)**ne\n+                    return S.NegativeOne**expt*Rational(self.q, -self.p)**ne\n                 else:\n                     return Rational(self.q, self.p)**ne\n             if expt is S.Infinity:  # -oo already caught by test for negative\n@@ -2223,11 +2219,7 @@ def _eval_power(self, expt):\n             # invert base and change sign on exponent\n             ne = -expt\n             if self.is_negative:\n-                if expt.q != 1:\n-                    return -(S.NegativeOne)**((expt.p % expt.q) /\n-                            S(expt.q))*Rational(1, -self)**ne\n-                else:\n-                    return (S.NegativeOne)**ne*Rational(1, -self)**ne\n+                    return S.NegativeOne**expt*Rational(1, -self)**ne\n             else:\n                 return Rational(1, self.p)**ne\n         # see if base is a perfect root, sqrt(4) --> 2\n", "test_patch": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -1041,6 +1041,10 @@ def test_powers_Integer():\n         -(-1)**Rational(2, 3)*3**Rational(2, 3)/27\n     assert (-3) ** Rational(-2, 3) == \\\n         -(-1)**Rational(1, 3)*3**Rational(1, 3)/3\n+    assert (-2) ** Rational(-10, 3) == \\\n+        (-1)**Rational(2, 3)*2**Rational(2, 3)/16\n+    assert abs(Pow(-2, Rational(-10, 3)).n() -\n+        Pow(-2, Rational(-10, 3), evaluate=False).n()) < 1e-16\n \n     # negative base and rational power with some simplification\n     assert (-8) ** Rational(2, 5) == \\\n@@ -1121,6 +1125,10 @@ def test_powers_Rational():\n         -4*(-1)**Rational(2, 3)*2**Rational(1, 3)*3**Rational(2, 3)/27\n     assert Rational(-3, 2)**Rational(-2, 3) == \\\n         -(-1)**Rational(1, 3)*2**Rational(2, 3)*3**Rational(1, 3)/3\n+    assert Rational(-3, 2)**Rational(-10, 3) == \\\n+        8*(-1)**Rational(2, 3)*2**Rational(1, 3)*3**Rational(2, 3)/81\n+    assert abs(Pow(Rational(-2, 3), Rational(-7, 4)).n() -\n+        Pow(Rational(-2, 3), Rational(-7, 4), evaluate=False).n()) < 1e-16\n \n     # negative integer power and negative rational base\n     assert Rational(-2, 3) ** Rational(-2, 1) == Rational(9, 4)\n", "problem_statement": "Inconsistency when simplifying (-a)**x * a**(-x), a a positive integer\nCompare:\r\n\r\n```\r\n>>> a = Symbol('a', integer=True, positive=True)\r\n>>> e = (-a)**x * a**(-x)\r\n>>> f = simplify(e)\r\n>>> print(e)\r\na**(-x)*(-a)**x\r\n>>> print(f)\r\n(-1)**x\r\n>>> t = -S(10)/3\r\n>>> n1 = e.subs(x,t)\r\n>>> n2 = f.subs(x,t)\r\n>>> print(N(n1))\r\n-0.5 + 0.866025403784439*I\r\n>>> print(N(n2))\r\n-0.5 + 0.866025403784439*I\r\n```\r\n\r\nvs\r\n\r\n```\r\n>>> a = S(2)\r\n>>> e = (-a)**x * a**(-x)\r\n>>> f = simplify(e)\r\n>>> print(e)\r\n(-2)**x*2**(-x)\r\n>>> print(f)\r\n(-1)**x\r\n>>> t = -S(10)/3\r\n>>> n1 = e.subs(x,t)\r\n>>> n2 = f.subs(x,t)\r\n>>> print(N(n1))\r\n0.5 - 0.866025403784439*I\r\n>>> print(N(n2))\r\n-0.5 + 0.866025403784439*I\r\n```\n", "hints_text": "More succinctly, the problem is\r\n```\r\n>>> (-2)**(-S(10)/3)\r\n-(-2)**(2/3)/16\r\n```\r\nPow is supposed to use the principal branch, which means (-2) has complex argument pi, which under exponentiation becomes `-10*pi/3` or equivalently `2*pi/3`. But the result of automatic simplification is different: its argument is -pi/3. \r\n\r\nThe base (-1) is handled correctly, though.\r\n```\r\n>>> (-1)**(-S(10)/3)\r\n(-1)**(2/3)\r\n```\r\nHence the inconsistency, because the simplified form of the product has (-1) in its base.", "created_at": "2018-01-27T05:55:11Z", "version": "1.1", "FAIL_TO_PASS": "[\"test_powers_Integer\", \"test_powers_Rational\"]", "PASS_TO_PASS": "[\"test_integers_cache\", \"test_seterr\", \"test_mod\", \"test_divmod\", \"test_igcd\", \"test_igcd_lehmer\", \"test_igcd2\", \"test_ilcm\", \"test_igcdex\", \"test_Integer_new\", \"test_Rational_new\", \"test_Number_new\", \"test_Rational_cmp\", \"test_Float\", \"test_float_mpf\", \"test_Float_RealElement\", \"test_Float_default_to_highprec_from_str\", \"test_Float_eval\", \"test_Float_issue_2107\", \"test_Float_from_tuple\", \"test_Infinity\", \"test_Infinity_2\", \"test_Mul_Infinity_Zero\", \"test_Div_By_Zero\", \"test_Infinity_inequations\", \"test_NaN\", \"test_special_numbers\", \"test_powers\", \"test_integer_nthroot_overflow\", \"test_integer_log\", \"test_isqrt\", \"test_powers_Float\", \"test_abs1\", \"test_accept_int\", \"test_dont_accept_str\", \"test_int\", \"test_long\", \"test_real_bug\", \"test_bug_sqrt\", \"test_pi_Pi\", \"test_no_len\", \"test_issue_3321\", \"test_issue_3692\", \"test_issue_3423\", \"test_issue_3449\", \"test_issue_13890\", \"test_Integer_factors\", \"test_Rational_factors\", \"test_issue_4107\", \"test_IntegerInteger\", \"test_Rational_gcd_lcm_cofactors\", \"test_Float_gcd_lcm_cofactors\", \"test_issue_4611\", \"test_conversion_to_mpmath\", \"test_relational\", \"test_Integer_as_index\", \"test_Rational_int\", \"test_zoo\", \"test_issue_4122\", \"test_GoldenRatio_expand\", \"test_as_content_primitive\", \"test_hashing_sympy_integers\", \"test_issue_4172\", \"test_Catalan_EulerGamma_prec\", \"test_Float_eq\", \"test_int_NumberSymbols\", \"test_issue_6640\", \"test_issue_6349\", \"test_mpf_norm\", \"test_latex\", \"test_issue_7742\", \"test_simplify_AlgebraicNumber\", \"test_Float_idempotence\", \"test_comp\", \"test_issue_9491\", \"test_issue_10063\", \"test_issue_10020\", \"test_invert_numbers\", \"test_mod_inverse\", \"test_golden_ratio_rewrite_as_sqrt\", \"test_comparisons_with_unknown_type\", \"test_NumberSymbol_comparison\", \"test_Integer_precision\"]", "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   sympy/core/numbers.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit b17abcb09cbcee80a90f6750e0f9b53f0247656c\nMerge: 1e8b5da3ed 658e976d11\nAuthor: Chris Smith <smichr@gmail.com>\nDate:   Thu Jan 25 22:05:05 2018 -0600\n\n    Merge pull request #13836 from vishalg2235/invmatmat\n    \n    Attribute inv() added in matexpr.py\n\ndiff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c6cfc127e1..30e954a282 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1678,11 +1678,7 @@ def _eval_power(self, expt):\n                 if (ne is S.One):\n                     return Rational(self.q, self.p)\n                 if self.is_negative:\n-                    if expt.q != 1:\n-                        return -(S.NegativeOne)**((expt.p % expt.q) /\n-                               S(expt.q))*Rational(self.q, -self.p)**ne\n-                    else:\n-                        return S.NegativeOne**ne*Rational(self.q, -self.p)**ne\n+                    return S.NegativeOne**expt*Rational(self.q, -self.p)**ne\n                 else:\n                     return Rational(self.q, self.p)**ne\n             if expt is S.Infinity:  # -oo already caught by test for negative\n@@ -2223,11 +2219,7 @@ def _eval_power(self, expt):\n             # invert base and change sign on exponent\n             ne = -expt\n             if self.is_negative:\n-                if expt.q != 1:\n-                    return -(S.NegativeOne)**((expt.p % expt.q) /\n-                            S(expt.q))*Rational(1, -self)**ne\n-                else:\n-                    return (S.NegativeOne)**ne*Rational(1, -self)**ne\n+                    return S.NegativeOne**expt*Rational(1, -self)**ne\n             else:\n                 return Rational(1, self.p)**ne\n         # see if base is a perfect root, sqrt(4) --> 2\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)\nInstalling collected packages: sympy\n  Attempting uninstall: sympy\n    Found existing installation: sympy 1.1.2.dev0\n    Uninstalling sympy-1.1.2.dev0:\n      Successfully uninstalled sympy-1.1.2.dev0\n  Running setup.py develop for sympy\nSuccessfully installed sympy\n============================= test process starts ==============================\nexecutable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]\narchitecture:       64-bit\ncache:              no\nground types:       python \nnumpy:              None\nrandom seed:        92793909\nhash randomization: off\n\nsympy/core/tests/test_numbers.py[87] \ntest_integers_cache ok\ntest_seterr ok\ntest_mod ok\ntest_divmod ok\ntest_igcd ok\ntest_igcd_lehmer ok\ntest_igcd2 ok\ntest_ilcm ok\ntest_igcdex ok\ntest_Integer_new ok\ntest_Rational_new ok\ntest_Number_new ok\ntest_Rational_cmp ok\ntest_Float ok\ntest_float_mpf ok\ntest_Float_RealElement ok\ntest_Float_default_to_highprec_from_str ok\ntest_Float_eval ok\ntest_Float_issue_2107 ok\ntest_Float_from_tuple ok\ntest_Infinity ok\ntest_Infinity_2 ok\ntest_Mul_Infinity_Zero ok\ntest_Div_By_Zero ok\ntest_Infinity_inequations ok\ntest_NaN ok\ntest_special_numbers ok\ntest_powers ok\ntest_integer_nthroot_overflow ok\ntest_integer_log ok\ntest_isqrt ok\ntest_powers_Integer ok\ntest_powers_Rational ok\ntest_powers_Float ok\ntest_abs1 ok\ntest_accept_int ok\ntest_dont_accept_str ok\ntest_int ok\ntest_long ok\ntest_real_bug ok\ntest_bug_sqrt ok\ntest_pi_Pi ok\ntest_no_len ok\ntest_issue_3321 ok\ntest_issue_3692 ok\ntest_issue_3423 ok\ntest_issue_3449 ok\ntest_issue_13890 ok\ntest_Integer_factors ok\ntest_Rational_factors ok\ntest_issue_4107 ok\ntest_IntegerInteger ok\ntest_Rational_gcd_lcm_cofactors ok\ntest_Float_gcd_lcm_cofactors ok\ntest_issue_4611 ok\ntest_conversion_to_mpmath ok\ntest_relational ok\ntest_Integer_as_index ok\ntest_Rational_int ok\ntest_zoo ok\ntest_issue_4122 ok\ntest_GoldenRatio_expand ok\ntest_as_content_primitive ok\ntest_hashing_sympy_integers ok\ntest_issue_4172 ok\ntest_mpmath_issues f\ntest_Catalan_EulerGamma_prec ok\ntest_Float_eq ok\ntest_int_NumberSymbols ok\ntest_issue_6640 ok\ntest_issue_6349 ok\ntest_mpf_norm ok\ntest_latex ok\ntest_issue_7742 ok\ntest_simplify_AlgebraicNumber ok\ntest_Float_idempotence ok\ntest_comp ok\ntest_issue_9491 ok\ntest_issue_10063 ok\ntest_issue_10020 ok\ntest_invert_numbers ok\ntest_mod_inverse ok\ntest_golden_ratio_rewrite_as_sqrt ok\ntest_comparisons_with_unknown_type ok\ntest_NumberSymbol_comparison ok\ntest_Integer_precision ok\ntest_numpy_to_float numpy not installed. Abort numpy tests. s               [OK]\n\n\n== tests finished: 85 passed, 1 skipped, 1 expected to fail, in 2.35 seconds ===\n", {"test_integers_cache": "PASSED", "test_seterr": "PASSED", "test_mod": "PASSED", "test_divmod": "PASSED", "test_igcd": "PASSED", "test_igcd_lehmer": "PASSED", "test_igcd2": "PASSED", "test_ilcm": "PASSED", "test_igcdex": "PASSED", "test_Integer_new": "PASSED", "test_Rational_new": "PASSED", "test_Number_new": "PASSED", "test_Rational_cmp": "PASSED", "test_Float": "PASSED", "test_float_mpf": "PASSED", "test_Float_RealElement": "PASSED", "test_Float_default_to_highprec_from_str": "PASSED", "test_Float_eval": "PASSED", "test_Float_issue_2107": "PASSED", "test_Float_from_tuple": "PASSED", "test_Infinity": "PASSED", "test_Infinity_2": "PASSED", "test_Mul_Infinity_Zero": "PASSED", "test_Div_By_Zero": "PASSED", "test_Infinity_inequations": "PASSED", "test_NaN": "PASSED", "test_special_numbers": "PASSED", "test_powers": "PASSED", "test_integer_nthroot_overflow": "PASSED", "test_integer_log": "PASSED", "test_isqrt": "PASSED", "test_powers_Integer": "PASSED", "test_powers_Rational": "PASSED", "test_powers_Float": "PASSED", "test_abs1": "PASSED", "test_accept_int": "PASSED", "test_dont_accept_str": "PASSED", "test_int": "PASSED", "test_long": "PASSED", "test_real_bug": "PASSED", "test_bug_sqrt": "PASSED", "test_pi_Pi": "PASSED", "test_no_len": "PASSED", "test_issue_3321": "PASSED", "test_issue_3692": "PASSED", "test_issue_3423": "PASSED", "test_issue_3449": "PASSED", "test_issue_13890": "PASSED", "test_Integer_factors": "PASSED", "test_Rational_factors": "PASSED", "test_issue_4107": "PASSED", "test_IntegerInteger": "PASSED", "test_Rational_gcd_lcm_cofactors": "PASSED", "test_Float_gcd_lcm_cofactors": "PASSED", "test_issue_4611": "PASSED", "test_conversion_to_mpmath": "PASSED", "test_relational": "PASSED", "test_Integer_as_index": "PASSED", "test_Rational_int": "PASSED", "test_zoo": "PASSED", "test_issue_4122": "PASSED", "test_GoldenRatio_expand": "PASSED", "test_as_content_primitive": "PASSED", "test_hashing_sympy_integers": "PASSED", "test_issue_4172": "PASSED", "test_Catalan_EulerGamma_prec": "PASSED", "test_Float_eq": "PASSED", "test_int_NumberSymbols": "PASSED", "test_issue_6640": "PASSED", "test_issue_6349": "PASSED", "test_mpf_norm": "PASSED", "test_latex": "PASSED", "test_issue_7742": "PASSED", "test_simplify_AlgebraicNumber": "PASSED", "test_Float_idempotence": "PASSED", "test_comp": "PASSED", "test_issue_9491": "PASSED", "test_issue_10063": "PASSED", "test_issue_10020": "PASSED", "test_invert_numbers": "PASSED", "test_mod_inverse": "PASSED", "test_golden_ratio_rewrite_as_sqrt": "PASSED", "test_comparisons_with_unknown_type": "PASSED", "test_NumberSymbol_comparison": "PASSED", "test_Integer_precision": "PASSED"}]