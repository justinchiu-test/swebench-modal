[{"repo": "django/django", "instance_id": "django__django-12747", "base_commit": "c86201b6ed4f8256b0a0520c08aa674f623d4127", "patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -408,7 +408,8 @@ def delete(self):\n             # fast deletes\n             for qs in self.fast_deletes:\n                 count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                if count:\n+                    deleted_counter[qs.model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n@@ -426,7 +427,8 @@ def delete(self):\n                 query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n                 count = query.delete_batch(pk_list, self.using)\n-                deleted_counter[model._meta.label] += count\n+                if count:\n+                    deleted_counter[model._meta.label] += count\n \n                 if not model._meta.auto_created:\n                     for obj in instances:\n", "test_patch": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -522,11 +522,10 @@ def test_queryset_delete_returns_num_rows(self):\n         existed_objs = {\n             R._meta.label: R.objects.count(),\n             HiddenUser._meta.label: HiddenUser.objects.count(),\n-            A._meta.label: A.objects.count(),\n-            MR._meta.label: MR.objects.count(),\n             HiddenUserProfile._meta.label: HiddenUserProfile.objects.count(),\n         }\n         deleted, deleted_objs = R.objects.all().delete()\n+        self.assertCountEqual(deleted_objs.keys(), existed_objs.keys())\n         for k, v in existed_objs.items():\n             self.assertEqual(deleted_objs[k], v)\n \n@@ -550,13 +549,13 @@ def test_model_delete_returns_num_rows(self):\n         existed_objs = {\n             R._meta.label: R.objects.count(),\n             HiddenUser._meta.label: HiddenUser.objects.count(),\n-            A._meta.label: A.objects.count(),\n             MR._meta.label: MR.objects.count(),\n             HiddenUserProfile._meta.label: HiddenUserProfile.objects.count(),\n             M.m2m.through._meta.label: M.m2m.through.objects.count(),\n         }\n         deleted, deleted_objs = r.delete()\n         self.assertEqual(deleted, sum(existed_objs.values()))\n+        self.assertCountEqual(deleted_objs.keys(), existed_objs.keys())\n         for k, v in existed_objs.items():\n             self.assertEqual(deleted_objs[k], v)\n \n@@ -694,7 +693,7 @@ def test_fast_delete_empty_no_update_can_self_select(self):\n         with self.assertNumQueries(1):\n             self.assertEqual(\n                 User.objects.filter(avatar__desc='missing').delete(),\n-                (0, {'delete.User': 0})\n+                (0, {}),\n             )\n \n     def test_fast_delete_combined_relationships(self):\n", "problem_statement": "QuerySet.Delete - inconsistent result when zero objects deleted\nDescription\n\t\nThe result format of the QuerySet.Delete method is a tuple: (X, Y) \nX - is the total amount of deleted objects (including foreign key deleted objects)\nY - is a dictionary specifying counters of deleted objects for each specific model (the key is the _meta.label of the model and the value is counter of deleted objects of this model).\nExample: <class 'tuple'>: (2, {'my_app.FileAccess': 1, 'my_app.File': 1})\nWhen there are zero objects to delete in total - the result is inconsistent:\nFor models with foreign keys - the result will be: <class 'tuple'>: (0, {})\nFor \"simple\" models without foreign key - the result will be: <class 'tuple'>: (0, {'my_app.BlockLibrary': 0})\nI would expect there will be no difference between the two cases: Either both will have the empty dictionary OR both will have dictionary with model-label keys and zero value.\n", "hints_text": "I guess we could adapt the code not to include any key if the count is zero in the second case.", "created_at": "2020-04-18T16:41:40Z", "version": "3.1", "FAIL_TO_PASS": "[\"test_fast_delete_empty_no_update_can_self_select (delete.tests.FastDeleteTests)\", \"test_model_delete_returns_num_rows (delete.tests.DeletionTests)\", \"test_queryset_delete_returns_num_rows (delete.tests.DeletionTests)\"]", "PASS_TO_PASS": "[\"test_fast_delete_combined_relationships (delete.tests.FastDeleteTests)\", \"test_fast_delete_fk (delete.tests.FastDeleteTests)\", \"test_fast_delete_inheritance (delete.tests.FastDeleteTests)\", \"test_fast_delete_instance_set_pk_none (delete.tests.FastDeleteTests)\", \"test_fast_delete_joined_qs (delete.tests.FastDeleteTests)\", \"test_fast_delete_large_batch (delete.tests.FastDeleteTests)\", \"test_fast_delete_m2m (delete.tests.FastDeleteTests)\", \"test_fast_delete_qs (delete.tests.FastDeleteTests)\", \"test_fast_delete_revm2m (delete.tests.FastDeleteTests)\", \"test_auto (delete.tests.OnDeleteTests)\", \"test_auto_nullable (delete.tests.OnDeleteTests)\", \"test_cascade (delete.tests.OnDeleteTests)\", \"test_cascade_from_child (delete.tests.OnDeleteTests)\", \"test_cascade_from_parent (delete.tests.OnDeleteTests)\", \"test_cascade_nullable (delete.tests.OnDeleteTests)\", \"test_do_nothing (delete.tests.OnDeleteTests)\", \"test_do_nothing_qscount (delete.tests.OnDeleteTests)\", \"test_inheritance_cascade_down (delete.tests.OnDeleteTests)\", \"test_inheritance_cascade_up (delete.tests.OnDeleteTests)\", \"test_non_callable (delete.tests.OnDeleteTests)\", \"test_o2o_setnull (delete.tests.OnDeleteTests)\", \"test_protect (delete.tests.OnDeleteTests)\", \"test_protect_multiple (delete.tests.OnDeleteTests)\", \"test_protect_path (delete.tests.OnDeleteTests)\", \"test_restrict (delete.tests.OnDeleteTests)\", \"test_restrict_gfk_no_fast_delete (delete.tests.OnDeleteTests)\", \"test_restrict_multiple (delete.tests.OnDeleteTests)\", \"test_restrict_path_cascade_direct (delete.tests.OnDeleteTests)\", \"test_restrict_path_cascade_indirect (delete.tests.OnDeleteTests)\", \"test_restrict_path_cascade_indirect_diamond (delete.tests.OnDeleteTests)\", \"test_setdefault (delete.tests.OnDeleteTests)\", \"test_setdefault_none (delete.tests.OnDeleteTests)\", \"test_setnull (delete.tests.OnDeleteTests)\", \"test_setnull_from_child (delete.tests.OnDeleteTests)\", \"test_setnull_from_parent (delete.tests.OnDeleteTests)\", \"test_setvalue (delete.tests.OnDeleteTests)\", \"test_bulk (delete.tests.DeletionTests)\", \"test_can_defer_constraint_checks (delete.tests.DeletionTests)\", \"test_delete_with_keeping_parents (delete.tests.DeletionTests)\", \"test_delete_with_keeping_parents_relationships (delete.tests.DeletionTests)\", \"test_deletion_order (delete.tests.DeletionTests)\", \"test_hidden_related (delete.tests.DeletionTests)\", \"test_instance_update (delete.tests.DeletionTests)\", \"test_large_delete (delete.tests.DeletionTests)\", \"test_large_delete_related (delete.tests.DeletionTests)\", \"test_m2m (delete.tests.DeletionTests)\", \"test_only_referenced_fields_selected (delete.tests.DeletionTests)\", \"test_proxied_model_duplicate_queries (delete.tests.DeletionTests)\", \"test_relational_post_delete_signals_happen_before_parent_object (delete.tests.DeletionTests)\"]", "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab"}, "Generating locales (this might take a while)...\n  en_US.UTF-8... done\nGeneration complete.\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/db/models/deletion.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit c86201b6ed4f8256b0a0520c08aa674f623d4127\nAuthor: Fran\u00e7ois Freitag <mail@franek.fr>\nDate:   Sat Apr 18 12:27:43 2020 +0200\n\n    Disabled management commands output with verbosity 0 in various tests.\n    \n    Instead of capturing the command output and discard it immediately,\n    tell the command not to log.\n\ndiff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex fa2fc93fd6..8b2d9775a2 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -990,7 +990,7 @@ class CreatesuperuserManagementCommandTestCase(TestCase):\n         'DJANGO_SUPERUSER_FIRST_NAME': 'ignored_first_name',\n     })\n     def test_environment_variable_non_interactive(self):\n-        call_command('createsuperuser', interactive=False, stdout=StringIO())\n+        call_command('createsuperuser', interactive=False, verbosity=0)\n         user = User.objects.get(username='test_superuser')\n         self.assertEqual(user.email, 'joe@somewhere.org')\n         self.assertTrue(user.check_password('test_password'))\n@@ -1009,7 +1009,7 @@ class CreatesuperuserManagementCommandTestCase(TestCase):\n             interactive=False,\n             username='cmd_superuser',\n             email='cmd@somewhere.org',\n-            stdout=StringIO(),\n+            verbosity=0,\n         )\n         user = User.objects.get(username='cmd_superuser')\n         self.assertEqual(user.email, 'cmd@somewhere.org')\n@@ -1030,7 +1030,7 @@ class CreatesuperuserManagementCommandTestCase(TestCase):\n                 username='cmd_superuser',\n                 email='cmd@somewhere.org',\n                 stdin=MockTTY(),\n-                stdout=StringIO(),\n+                verbosity=0,\n             )\n             user = User.objects.get(username='cmd_superuser')\n             self.assertEqual(user.email, 'cmd@somewhere.org')\ndiff --git a/tests/i18n/test_compilation.py b/tests/i18n/test_compilation.py\nindex cda5592155..04958bcbb4 100644\n--- a/tests/i18n/test_compilation.py\n+++ b/tests/i18n/test_compilation.py\n@@ -38,7 +38,7 @@ class PoFileTests(MessageCompilationTests):\n     def test_bom_rejection(self):\n         stderr = StringIO()\n         with self.assertRaisesMessage(CommandError, 'compilemessages generated one or more errors.'):\n-            call_command('compilemessages', locale=[self.LOCALE], stdout=StringIO(), stderr=stderr)\n+            call_command('compilemessages', locale=[self.LOCALE], verbosity=0, stderr=stderr)\n         self.assertIn('file has a BOM (Byte Order Mark)', stderr.getvalue())\n         self.assertFalse(os.path.exists(self.MO_FILE))\n \n@@ -63,7 +63,7 @@ class PoFileContentsTests(MessageCompilationTests):\n     MO_FILE = 'locale/%s/LC_MESSAGES/django.mo' % LOCALE\n \n     def test_percent_symbol_in_po_file(self):\n-        call_command('compilemessages', locale=[self.LOCALE], stdout=StringIO())\n+        call_command('compilemessages', locale=[self.LOCALE], verbosity=0)\n         self.assertTrue(os.path.exists(self.MO_FILE))\n \n \n@@ -80,13 +80,13 @@ class MultipleLocaleCompilationTests(MessageCompilationTests):\n \n     def test_one_locale(self):\n         with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n-            call_command('compilemessages', locale=['hr'], stdout=StringIO())\n+            call_command('compilemessages', locale=['hr'], verbosity=0)\n \n             self.assertTrue(os.path.exists(self.MO_FILE_HR))\n \n     def test_multiple_locales(self):\n         with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n-            call_command('compilemessages', locale=['hr', 'fr'], stdout=StringIO())\n+            call_command('compilemessages', locale=['hr', 'fr'], verbosity=0)\n \n             self.assertTrue(os.path.exists(self.MO_FILE_HR))\n             self.assertTrue(os.path.exists(self.MO_FILE_FR))\n@@ -110,26 +110,25 @@ class ExcludedLocaleCompilationTests(MessageCompilationTests):\n             execute_from_command_line(['django-admin', 'help', 'compilemessages'])\n \n     def test_one_locale_excluded(self):\n-        call_command('compilemessages', exclude=['it'], stdout=StringIO())\n+        call_command('compilemessages', exclude=['it'], verbosity=0)\n         self.assertTrue(os.path.exists(self.MO_FILE % 'en'))\n         self.assertTrue(os.path.exists(self.MO_FILE % 'fr'))\n         self.assertFalse(os.path.exists(self.MO_FILE % 'it'))\n \n     def test_multiple_locales_excluded(self):\n-        call_command('compilemessages', exclude=['it', 'fr'], stdout=StringIO())\n+        call_command('compilemessages', exclude=['it', 'fr'], verbosity=0)\n         self.assertTrue(os.path.exists(self.MO_FILE % 'en'))\n         self.assertFalse(os.path.exists(self.MO_FILE % 'fr'))\n         self.assertFalse(os.path.exists(self.MO_FILE % 'it'))\n \n     def test_one_locale_excluded_with_locale(self):\n-        call_command('compilemessages', locale=['en', 'fr'], exclude=['fr'], stdout=StringIO())\n+        call_command('compilemessages', locale=['en', 'fr'], exclude=['fr'], verbosity=0)\n         self.assertTrue(os.path.exists(self.MO_FILE % 'en'))\n         self.assertFalse(os.path.exists(self.MO_FILE % 'fr'))\n         self.assertFalse(os.path.exists(self.MO_FILE % 'it'))\n \n     def test_multiple_locales_excluded_with_locale(self):\n-        call_command('compilemessages', locale=['en', 'fr', 'it'], exclude=['fr', 'it'],\n-                     stdout=StringIO())\n+        call_command('compilemessages', locale=['en', 'fr', 'it'], exclude=['fr', 'it'], verbosity=0)\n         self.assertTrue(os.path.exists(self.MO_FILE % 'en'))\n         self.assertFalse(os.path.exists(self.MO_FILE % 'fr'))\n         self.assertFalse(os.path.exists(self.MO_FILE % 'it'))\n@@ -177,7 +176,7 @@ class CompilationErrorHandling(MessageCompilationTests):\n     def test_error_reported_by_msgfmt(self):\n         # po file contains wrong po formatting.\n         with self.assertRaises(CommandError):\n-            call_command('compilemessages', locale=['ja'], verbosity=0, stderr=StringIO())\n+            call_command('compilemessages', locale=['ja'], verbosity=0)\n \n     def test_msgfmt_error_including_non_ascii(self):\n         # po file contains invalid msgstr content (triggers non-ascii error content).\n@@ -208,14 +207,14 @@ class FuzzyTranslationTest(ProjectAndAppTests):\n \n     def test_nofuzzy_compiling(self):\n         with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n-            call_command('compilemessages', locale=[self.LOCALE], stdout=StringIO())\n+            call_command('compilemessages', locale=[self.LOCALE], verbosity=0)\n             with translation.override(self.LOCALE):\n                 self.assertEqual(gettext('Lenin'), '\u041b\u0435\u043d\u0438\u043d')\n                 self.assertEqual(gettext('Vodka'), 'Vodka')\n \n     def test_fuzzy_compiling(self):\n         with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n-            call_command('compilemessages', locale=[self.LOCALE], fuzzy=True, stdout=StringIO())\n+            call_command('compilemessages', locale=[self.LOCALE], fuzzy=True, verbosity=0)\n             with translation.override(self.LOCALE):\n                 self.assertEqual(gettext('Lenin'), '\u041b\u0435\u043d\u0438\u043d')\n                 self.assertEqual(gettext('Vodka'), '\u0412\u043e\u0434\u043a\u0430')\n@@ -224,7 +223,7 @@ class FuzzyTranslationTest(ProjectAndAppTests):\n class AppCompilationTest(ProjectAndAppTests):\n \n     def test_app_locale_compiled(self):\n-        call_command('compilemessages', locale=[self.LOCALE], stdout=StringIO())\n+        call_command('compilemessages', locale=[self.LOCALE], verbosity=0)\n         self.assertTrue(os.path.exists(self.PROJECT_MO_FILE))\n         self.assertTrue(os.path.exists(self.APP_MO_FILE))\n \n@@ -234,5 +233,5 @@ class PathLibLocaleCompilationTests(MessageCompilationTests):\n \n     def test_locale_paths_pathlib(self):\n         with override_settings(LOCALE_PATHS=[Path(self.test_dir) / 'canned_locale']):\n-            call_command('compilemessages', locale=['fr'], stdout=StringIO())\n+            call_command('compilemessages', locale=['fr'], verbosity=0)\n             self.assertTrue(os.path.exists('canned_locale/fr/LC_MESSAGES/django.mo'))\ndiff --git a/tests/i18n/test_extraction.py b/tests/i18n/test_extraction.py\nindex 5d6d00fcef..a6a0060910 100644\n--- a/tests/i18n/test_extraction.py\n+++ b/tests/i18n/test_extraction.py\n@@ -715,26 +715,25 @@ class ExcludedLocaleExtractionTests(ExtractorTests):\n             execute_from_command_line(['django-admin', 'help', 'makemessages'])\n \n     def test_one_locale_excluded(self):\n-        management.call_command('makemessages', exclude=['it'], stdout=StringIO())\n+        management.call_command('makemessages', exclude=['it'], verbosity=0)\n         self.assertRecentlyModified(self.PO_FILE % 'en')\n         self.assertRecentlyModified(self.PO_FILE % 'fr')\n         self.assertNotRecentlyModified(self.PO_FILE % 'it')\n \n     def test_multiple_locales_excluded(self):\n-        management.call_command('makemessages', exclude=['it', 'fr'], stdout=StringIO())\n+        management.call_command('makemessages', exclude=['it', 'fr'], verbosity=0)\n         self.assertRecentlyModified(self.PO_FILE % 'en')\n         self.assertNotRecentlyModified(self.PO_FILE % 'fr')\n         self.assertNotRecentlyModified(self.PO_FILE % 'it')\n \n     def test_one_locale_excluded_with_locale(self):\n-        management.call_command('makemessages', locale=['en', 'fr'], exclude=['fr'], stdout=StringIO())\n+        management.call_command('makemessages', locale=['en', 'fr'], exclude=['fr'], verbosity=0)\n         self.assertRecentlyModified(self.PO_FILE % 'en')\n         self.assertNotRecentlyModified(self.PO_FILE % 'fr')\n         self.assertNotRecentlyModified(self.PO_FILE % 'it')\n \n     def test_multiple_locales_excluded_with_locale(self):\n-        management.call_command('makemessages', locale=['en', 'fr', 'it'], exclude=['fr', 'it'],\n-                                stdout=StringIO())\n+        management.call_command('makemessages', locale=['en', 'fr', 'it'], exclude=['fr', 'it'], verbosity=0)\n         self.assertRecentlyModified(self.PO_FILE % 'en')\n         self.assertNotRecentlyModified(self.PO_FILE % 'fr')\n         self.assertNotRecentlyModified(self.PO_FILE % 'it')\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b1d00f278d..0a3b6ae77e 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -43,9 +43,8 @@ class CommandTests(SimpleTestCase):\n         self.assertIn(\"I don't feel like dancing Jive.\\n\", out.getvalue())\n \n     def test_language_preserved(self):\n-        out = StringIO()\n         with translation.override('fr'):\n-            management.call_command('dance', stdout=out)\n+            management.call_command('dance', verbosity=0)\n             self.assertEqual(translation.get_language(), 'fr')\n \n     def test_explode(self):\n@@ -76,7 +75,7 @@ class CommandTests(SimpleTestCase):\n         \"\"\"\n         current_locale = translation.get_language()\n         with translation.override('pl'):\n-            result = management.call_command('no_translations', stdout=StringIO())\n+            result = management.call_command('no_translations')\n             self.assertIsNone(result)\n         self.assertEqual(translation.get_language(), current_locale)\n \n@@ -140,7 +139,7 @@ class CommandTests(SimpleTestCase):\n \n     def test_calling_a_command_with_no_app_labels_and_parameters_should_raise_a_command_error(self):\n         with self.assertRaises(CommandError):\n-            management.call_command('hal', stdout=StringIO())\n+            management.call_command('hal')\n \n     def test_output_transaction(self):\n         output = management.call_command('transaction', stdout=StringIO(), no_color=True)\ndiff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 16dff6a1cd..90623437f5 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -408,7 +408,8 @@ class Collector:\n             # fast deletes\n             for qs in self.fast_deletes:\n                 count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                if count:\n+                    deleted_counter[qs.model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n@@ -426,7 +427,8 @@ class Collector:\n                 query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n                 count = query.delete_batch(pk_list, self.using)\n-                deleted_counter[model._meta.label] += count\n+                if count:\n+                    deleted_counter[model._meta.label] += count\n \n                 if not model._meta.auto_created:\n                     for obj in instances:\nObtaining file:///testbed\nRequirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2024.2)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)\nRequirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.1) (4.1.1)\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 3.1\n    Uninstalling Django-3.1:\n      Successfully uninstalled Django-3.1\n  Running setup.py develop for Django\nSuccessfully installed Django-3.1\nTesting against Django installed in '/testbed/django'\nImporting application delete\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, delete, messages, sessions, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table delete_p\n    Creating table delete_r\n    Creating table delete_s\n    Creating table delete_t\n    Creating table delete_u\n    Creating table delete_rchild\n    Creating table delete_rchildchild\n    Creating table delete_a\n    Creating table delete_b\n    Creating table delete_m\n    Creating table delete_mr\n    Creating table delete_mrnull\n    Creating table delete_avatar\n    Creating table delete_user\n    Creating table delete_hiddenuser\n    Creating table delete_hiddenuserprofile\n    Creating table delete_m2mto\n    Creating table delete_m2mfrom\n    Creating table delete_parent\n    Creating table delete_child\n    Creating table delete_base\n    Creating table delete_reltobase\n    Creating table delete_origin\n    Creating table delete_referrer\n    Creating table delete_secondreferrer\n    Creating table delete_deletetop\n    Creating table delete_b1\n    Creating table delete_b2\n    Creating table delete_b3\n    Creating table delete_deletebottom\n    Creating table delete_genericb1\n    Creating table delete_genericb2\n    Creating table delete_genericdeletebottom\n    Creating table delete_genericdeletebottomparent\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]