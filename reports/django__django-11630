[{"repo": "django/django", "instance_id": "django__django-11630", "base_commit": "65e86948b80262574058a94ccaae3a9b59c3faea", "patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -4,7 +4,8 @@\n from itertools import chain\n \n from django.apps import apps\n-from django.core.checks import Error, Tags, register\n+from django.conf import settings\n+from django.core.checks import Error, Tags, Warning, register\n \n \n @register(Tags.models)\n@@ -35,14 +36,25 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n+    if settings.DATABASE_ROUTERS:\n+        error_class, error_id = Warning, 'models.W035'\n+        error_hint = (\n+            'You have configured settings.DATABASE_ROUTERS. Verify that %s '\n+            'are correctly routed to separate databases.'\n+        )\n+    else:\n+        error_class, error_id = Error, 'models.E028'\n+        error_hint = None\n     for db_table, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n+            model_labels_str = ', '.join(model_labels)\n             errors.append(\n-                Error(\n+                error_class(\n                     \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    % (db_table, model_labels_str),\n                     obj=db_table,\n-                    id='models.E028',\n+                    hint=(error_hint % model_labels_str) if error_hint else None,\n+                    id=error_id,\n                 )\n             )\n     for index_name, model_labels in indexes.items():\n", "test_patch": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -1,12 +1,16 @@\n from django.core import checks\n-from django.core.checks import Error\n+from django.core.checks import Error, Warning\n from django.db import models\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n-    isolate_apps, modify_settings, override_system_checks,\n+    isolate_apps, modify_settings, override_settings, override_system_checks,\n )\n \n \n+class EmptyRouter:\n+    pass\n+\n+\n @isolate_apps('check_framework', attr_name='apps')\n @override_system_checks([checks.model_checks.check_all_models])\n class DuplicateDBTableTests(SimpleTestCase):\n@@ -28,6 +32,30 @@ class Meta:\n             )\n         ])\n \n+    @override_settings(DATABASE_ROUTERS=['check_framework.test_model_checks.EmptyRouter'])\n+    def test_collision_in_same_app_database_routers_installed(self):\n+        class Model1(models.Model):\n+            class Meta:\n+                db_table = 'test_table'\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                db_table = 'test_table'\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"db_table 'test_table' is used by multiple models: \"\n+                \"check_framework.Model1, check_framework.Model2.\",\n+                hint=(\n+                    'You have configured settings.DATABASE_ROUTERS. Verify '\n+                    'that check_framework.Model1, check_framework.Model2 are '\n+                    'correctly routed to separate databases.'\n+                ),\n+                obj='test_table',\n+                id='models.W035',\n+            )\n+        ])\n+\n     @modify_settings(INSTALLED_APPS={'append': 'basic'})\n     @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n     def test_collision_across_apps(self, apps):\n@@ -50,6 +78,34 @@ class Meta:\n             )\n         ])\n \n+    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n+    @override_settings(DATABASE_ROUTERS=['check_framework.test_model_checks.EmptyRouter'])\n+    @isolate_apps('basic', 'check_framework', kwarg_name='apps')\n+    def test_collision_across_apps_database_routers_installed(self, apps):\n+        class Model1(models.Model):\n+            class Meta:\n+                app_label = 'basic'\n+                db_table = 'test_table'\n+\n+        class Model2(models.Model):\n+            class Meta:\n+                app_label = 'check_framework'\n+                db_table = 'test_table'\n+\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [\n+            Warning(\n+                \"db_table 'test_table' is used by multiple models: \"\n+                \"basic.Model1, check_framework.Model2.\",\n+                hint=(\n+                    'You have configured settings.DATABASE_ROUTERS. Verify '\n+                    'that basic.Model1, check_framework.Model2 are correctly '\n+                    'routed to separate databases.'\n+                ),\n+                obj='test_table',\n+                id='models.W035',\n+            )\n+        ])\n+\n     def test_no_collision_for_unmanaged_models(self):\n         class Unmanaged(models.Model):\n             class Meta:\n", "problem_statement": "Django throws error when different apps with different models have the same name table name.\nDescription\n\t\nError message:\ntable_name: (models.E028) db_table 'table_name' is used by multiple models: base.ModelName, app2.ModelName.\nWe have a Base app that points to a central database and that has its own tables. We then have multiple Apps that talk to their own databases. Some share the same table names.\nWe have used this setup for a while, but after upgrading to Django 2.2 we're getting an error saying we're not allowed 2 apps, with 2 different models to have the same table names. \nIs this correct behavior? We've had to roll back to Django 2.0 for now.\n", "hints_text": "Regression in [5d25804eaf81795c7d457e5a2a9f0b9b0989136c], ticket #20098. My opinion is that as soon as the project has a non-empty DATABASE_ROUTERS setting, the error should be turned into a warning, as it becomes difficult to say for sure that it's an error. And then the project can add the warning in SILENCED_SYSTEM_CHECKS.\nI agree with your opinion. Assigning to myself, patch on its way Replying to Claude Paroz: Regression in [5d25804eaf81795c7d457e5a2a9f0b9b0989136c], ticket #20098. My opinion is that as soon as the project has a non-empty DATABASE_ROUTERS setting, the error should be turned into a warning, as it becomes difficult to say for sure that it's an error. And then the project can add the warning in SILENCED_SYSTEM_CHECKS.", "created_at": "2019-08-05T11:22:41Z", "version": "3.0", "FAIL_TO_PASS": "[\"test_collision_across_apps_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_collision_in_same_app_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)\"]", "PASS_TO_PASS": "[\"test_collision_abstract_model (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_across_apps (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_in_different_models (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_in_same_model (check_framework.test_model_checks.IndexNameTests)\", \"test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.IndexNameTests)\", \"test_no_collision_across_apps_interpolation (check_framework.test_model_checks.IndexNameTests)\", \"test_collision_abstract_model (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_across_apps (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_in_different_models (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_in_same_model (check_framework.test_model_checks.ConstraintNameTests)\", \"test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.ConstraintNameTests)\", \"test_no_collision_across_apps_interpolation (check_framework.test_model_checks.ConstraintNameTests)\", \"test_collision_across_apps (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_collision_in_same_app (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_no_collision_for_proxy_models (check_framework.test_model_checks.DuplicateDBTableTests)\", \"test_no_collision_for_unmanaged_models (check_framework.test_model_checks.DuplicateDBTableTests)\"]", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27"}, "Generating locales (this might take a while)...\n  en_US.UTF-8... done\nGeneration complete.\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/core/checks/model_checks.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 65e86948b80262574058a94ccaae3a9b59c3faea\nAuthor: Min ho Kim <minho42@gmail.com>\nDate:   Tue Aug 6 01:47:50 2019 +1000\n\n    Corrected several typos in string literals and test names.\n\ndiff --git a/django/contrib/gis/gdal/prototypes/srs.py b/django/contrib/gis/gdal/prototypes/srs.py\nindex 9b1da3ee06..45d5234346 100644\n--- a/django/contrib/gis/gdal/prototypes/srs.py\n+++ b/django/contrib/gis/gdal/prototypes/srs.py\n@@ -65,7 +65,7 @@ to_pretty_wkt = string_output(\n # Memory leak fixed in GDAL 1.5; still exists in 1.4.\n to_xml = string_output(lgdal.OSRExportToXML, [c_void_p, POINTER(c_char_p), c_char_p], offset=-2, decoding='utf-8')\n \n-# String attribute retrival routines.\n+# String attribute retrieval routines.\n get_attr_value = const_string_output(std_call('OSRGetAttrValue'), [c_void_p, c_char_p, c_int], decoding='utf-8')\n get_auth_name = const_string_output(lgdal.OSRGetAuthorityName, [c_void_p, c_char_p], decoding='ascii')\n get_auth_code = const_string_output(lgdal.OSRGetAuthorityCode, [c_void_p, c_char_p], decoding='ascii')\ndiff --git a/django/core/files/uploadhandler.py b/django/core/files/uploadhandler.py\nindex ddfb7e0116..613983581c 100644\n--- a/django/core/files/uploadhandler.py\n+++ b/django/core/files/uploadhandler.py\n@@ -52,7 +52,7 @@ class SkipFile(UploadFileException):\n \n class StopFutureHandlers(UploadFileException):\n     \"\"\"\n-    Upload handers that have handled a file and do not want future handlers to\n+    Upload handlers that have handled a file and do not want future handlers to\n     run should raise this exception instead of returning None.\n     \"\"\"\n     pass\ndiff --git a/django/core/mail/message.py b/django/core/mail/message.py\nindex 234c9416c6..e2bd712f56 100644\n--- a/django/core/mail/message.py\n+++ b/django/core/mail/message.py\n@@ -86,7 +86,7 @@ def sanitize_address(addr, encoding):\n             if rest:\n                 # The entire email address must be parsed.\n                 raise ValueError(\n-                    'Invalid adddress; only %s could be parsed from \"%s\"'\n+                    'Invalid address; only %s could be parsed from \"%s\"'\n                     % (token, addr)\n                 )\n             nm = token.display_name or ''\ndiff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 274dc29d6d..f46da0e957 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -377,7 +377,7 @@ class AggregationTests(TestCase):\n             {'c__max': 3}\n         )\n \n-    def test_conditional_aggreate(self):\n+    def test_conditional_aggregate(self):\n         # Conditional aggregation of a grouped queryset.\n         self.assertEqual(\n             Book.objects.annotate(c=Count('authors')).values('pk').aggregate(test=Sum(\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 434869554c..892d4129a5 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -520,8 +520,8 @@ class FileStorageTests(SimpleTestCase):\n         )\n         defaults_storage = self.storage_class()\n         settings = {\n-            'MEDIA_ROOT': 'overriden_media_root',\n-            'MEDIA_URL': 'overriden_media_url/',\n+            'MEDIA_ROOT': 'overridden_media_root',\n+            'MEDIA_URL': 'overridden_media_url/',\n             'FILE_UPLOAD_PERMISSIONS': 0o333,\n             'FILE_UPLOAD_DIRECTORY_PERMISSIONS': 0o333,\n         }\ndiff --git a/tests/forms_tests/widget_tests/test_select.py b/tests/forms_tests/widget_tests/test_select.py\nindex 42de5b6e92..fd4c1fb34c 100644\n--- a/tests/forms_tests/widget_tests/test_select.py\n+++ b/tests/forms_tests/widget_tests/test_select.py\n@@ -122,7 +122,7 @@ class SelectTest(WidgetTest):\n             ),\n         )\n \n-    def test_choices_constuctor(self):\n+    def test_choices_constructor(self):\n         widget = Select(choices=[(1, 1), (2, 2), (3, 3)])\n         self.check_html(widget, 'num', 2, html=(\n             \"\"\"<select name=\"num\">\ndiff --git a/tests/m2m_intermediary/tests.py b/tests/m2m_intermediary/tests.py\nindex 215f6f86c6..84dd250801 100644\n--- a/tests/m2m_intermediary/tests.py\n+++ b/tests/m2m_intermediary/tests.py\n@@ -6,7 +6,7 @@ from .models import Article, Reporter, Writer\n \n \n class M2MIntermediaryTests(TestCase):\n-    def test_intermeiary(self):\n+    def test_intermediary(self):\n         r1 = Reporter.objects.create(first_name=\"John\", last_name=\"Smith\")\n         r2 = Reporter.objects.create(first_name=\"Jane\", last_name=\"Doe\")\n \ndiff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex 4132b96be0..64b5c9bfd0 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -80,7 +80,7 @@ class MigrateTests(MigrationTestBase):\n             call_command('migrate', app_label='unmigrated_app_syncdb')\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_clashing_prefix'})\n-    def test_ambigious_prefix(self):\n+    def test_ambiguous_prefix(self):\n         msg = (\n             \"More than one migration matches 'a' in app 'migrations'. Please \"\n             \"be more specific.\"\ndiff --git a/tests/serializers/tests.py b/tests/serializers/tests.py\nindex d0e4723fc7..4bee157ace 100644\n--- a/tests/serializers/tests.py\n+++ b/tests/serializers/tests.py\n@@ -55,7 +55,7 @@ class SerializerRegistrationTests(SimpleTestCase):\n             serializers.unregister_serializer(\"nonsense\")\n \n     def test_builtin_serializers(self):\n-        \"Requesting a list of serializer formats popuates the registry\"\n+        \"Requesting a list of serializer formats populates the registry\"\n         all_formats = set(serializers.get_serializer_formats())\n         public_formats = set(serializers.get_public_serializer_formats())\n \ndiff --git a/tests/test_runner/tests.py b/tests/test_runner/tests.py\nindex 3f4e257261..85e4e75720 100644\n--- a/tests/test_runner/tests.py\n+++ b/tests/test_runner/tests.py\n@@ -292,7 +292,7 @@ class DummyBackendTest(unittest.TestCase):\n class AliasedDefaultTestSetupTest(unittest.TestCase):\n     def test_setup_aliased_default_database(self):\n         \"\"\"\n-        setup_datebases() doesn't fail when 'default' is aliased\n+        setup_databases() doesn't fail when 'default' is aliased\n         \"\"\"\n         tested_connections = db.ConnectionHandler({\n             'default': {\ndiff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..7b156fceee 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -4,7 +4,8 @@ from collections import defaultdict\n from itertools import chain\n \n from django.apps import apps\n-from django.core.checks import Error, Tags, register\n+from django.conf import settings\n+from django.core.checks import Error, Tags, Warning, register\n \n \n @register(Tags.models)\n@@ -35,14 +36,25 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n+    if settings.DATABASE_ROUTERS:\n+        error_class, error_id = Warning, 'models.W035'\n+        error_hint = (\n+            'You have configured settings.DATABASE_ROUTERS. Verify that %s '\n+            'are correctly routed to separate databases.'\n+        )\n+    else:\n+        error_class, error_id = Error, 'models.E028'\n+        error_hint = None\n     for db_table, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n+            model_labels_str = ', '.join(model_labels)\n             errors.append(\n-                Error(\n+                error_class(\n                     \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    % (db_table, model_labels_str),\n                     obj=db_table,\n-                    id='models.E028',\n+                    hint=(error_hint % model_labels_str) if error_hint else None,\n+                    id=error_id,\n                 )\n             )\n     for index_name, model_labels in indexes.items():\nObtaining file:///testbed\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190807092314) (2024.2)\nRequirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190807092314) (0.4.4)\nRequirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190807092314) (3.4.1)\nRequirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.0.dev20190807092314) (4.1.1)\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 3.0.dev20190807092314\n    Uninstalling Django-3.0.dev20190807092314:\n      Successfully uninstalled Django-3.0.dev20190807092314\n  Running setup.py develop for Django\nSuccessfully installed Django-3.0.dev20190807092314\nTesting against Django installed in '/testbed/django'\nImporting application check_framework\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: auth, check_framework, contenttypes, messages, sessions, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table check_framework_simplemodel\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]