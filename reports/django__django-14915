[{"repo": "django/django", "instance_id": "django__django-14915", "base_commit": "903aaa35e5ceaa33bfc9b19b7f6da65ce5a91dd4", "patch": "diff --git a/django/forms/models.py b/django/forms/models.py\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1166,6 +1166,9 @@ def __init__(self, value, instance):\n     def __str__(self):\n         return str(self.value)\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n     def __eq__(self, other):\n         if isinstance(other, ModelChoiceIteratorValue):\n             other = other.value\n", "test_patch": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -2,7 +2,7 @@\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,6 +341,12 @@ class CustomModelMultipleChoiceField(forms.ModelMultipleChoiceField):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n     def test_choices_not_fetched_when_not_rendering(self):\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n", "problem_statement": "ModelChoiceIteratorValue is not hashable.\nDescription\n\t\nRecently I migrated from Django 3.0 to Django 3.1. In my code, I add custom data-* attributes to the select widget options. After the upgrade some of those options broke. Error is {TypeError}unhashable type: 'ModelChoiceIteratorValue'.\nExample (this one breaks):\n\tdef create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n\t\tcontext = super().create_option(name, value, label, selected, index, subindex, attrs)\n\t\tif not value:\n\t\t\treturn context\n\t\tif value in self.show_fields: # This is a dict {1: ['first_name', 'last_name']}\n\t\t\tcontext['attrs']['data-fields'] = json.dumps(self.show_fields[value])\nHowever, working with arrays is not an issue:\n\tdef create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n\t\tcontext = super().create_option(name, value, label, selected, index, subindex, attrs)\n\t\tif not value:\n\t\t\treturn context\n\t\tif value in allowed_values: # This is an array [1, 2]\n\t\t\t...\n", "hints_text": "Thanks for the ticket. Agreed, we could make ModelChoiceIteratorValue hashable by adding: def __hash__(self): return hash(self.value) For now you can use value.value as \u200bdocumented in the \"Backwards incompatible changes in 3.1\" section. Would you like to prepare a patch?\nReplying to Mariusz Felisiak: Thanks for the ticket. Agreed, we could make ModelChoiceIteratorValue hashable by adding: def __hash__(self): return hash(self.value) For now you can use value.value as \u200bdocumented in the \"Backwards incompatible changes in 3.1\" section. Would you like to prepare a patch? Yes, sure.\nPatch: \u200bhttps://github.com/django/django/pull/14915", "created_at": "2021-09-29T22:00:15Z", "version": "4.1", "FAIL_TO_PASS": "[\"test_choice_value_hash (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\"]", "PASS_TO_PASS": "[\"test_basics (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_choice_iterator_passes_model_to_widget (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_choices (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_choices_bool (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_choices_bool_empty_label (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_choices_freshness (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_choices_not_fetched_when_not_rendering (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_choices_radio_blank (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_clean_model_instance (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_clean_to_field_name (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_custom_choice_iterator_passes_model_to_widget (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_deepcopies_widget (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_disabled_modelchoicefield (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_disabled_modelchoicefield_has_changed (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_disabled_modelchoicefield_initial_model_instance (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_disabled_modelmultiplechoicefield_has_changed (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_disabled_multiplemodelchoicefield (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"ModelChoiceField with RadioSelect widget doesn't produce unnecessary\", \"Widgets that render multiple subwidgets shouldn't make more than one\", \"Iterator defaults to ModelChoiceIterator and can be overridden with\", \"test_queryset_manager (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_queryset_none (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\", \"test_result_cache_not_shared (model_forms.test_modelchoicefield.ModelChoiceFieldTests)\"]", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/forms/models.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 903aaa35e5ceaa33bfc9b19b7f6da65ce5a91dd4\nAuthor: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate:   Thu Sep 30 11:26:17 2021 +0200\n\n    Fixed #33159 -- Reverted \"Fixed #32970 -- Changed WhereNode.clone() to create a shallow copy of children.\"\n    \n    This reverts commit e441847ecae99dd1ccd0d9ce76dbcff51afa863c.\n    \n    A shallow copy is not enough because querysets can be reused and\n    evaluated in nested nodes, which shouldn't mutate JOIN aliases.\n    \n    Thanks Michal \u010ciha\u0159 for the report.\n\ndiff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex 160d5733b8..50ff13be75 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -148,7 +148,11 @@ class WhereNode(tree.Node):\n         clone = self.__class__._new_instance(\n             children=None, connector=self.connector, negated=self.negated,\n         )\n-        clone.children = self.children[:]\n+        for child in self.children:\n+            if hasattr(child, 'clone'):\n+                clone.children.append(child.clone())\n+            else:\n+                clone.children.append(child)\n         return clone\n \n     def relabeled_clone(self, change_map):\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex fa87e7859c..9c1b41a395 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1663,6 +1663,12 @@ class Queries5Tests(TestCase):\n             'bar %s'\n         )\n \n+    def test_queryset_reuse(self):\n+        # Using querysets doesn't mutate aliases.\n+        authors = Author.objects.filter(Q(name='a1') | Q(name='nonexistent'))\n+        self.assertEqual(Ranking.objects.filter(author__in=authors).get(), self.rank3)\n+        self.assertEqual(authors.count(), 1)\n+\n \n class SelectRelatedTests(TestCase):\n     def test_tickets_3045_3288(self):\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 5dcf923c12..7effb202e3 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1166,6 +1166,9 @@ class ModelChoiceIteratorValue:\n     def __str__(self):\n         return str(self.value)\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n     def __eq__(self, other):\n         if isinstance(other, ModelChoiceIteratorValue):\n             other = other.value\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20210930092617) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20210930092617) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.3.2->Django==4.1.dev20210930092617) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.1.dev20210930092617-0.editable-py3-none-any.whl size=26701 sha256=b41baa79d838ac52f6b9053e5987f1f231b5cc1faeb5959d97a2dc8c569988ed\n  Stored in directory: /tmp/pip-ephem-wheel-cache-ip6au6iu/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.1.dev20210930092617\n    Uninstalling Django-4.1.dev20210930092617:\n      Successfully uninstalled Django-4.1.dev20210930092617\nSuccessfully installed Django-4.1.dev20210930092617\nTesting against Django installed in '/testbed/django'\nImporting application model_forms\nFound 24 test(s).\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, messages, model_forms, sessions, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table model_forms_person\n    Creating table model_forms_category\n    Creating table model_forms_writer\n    Creating table model_forms_article\n    Creating table model_forms_improvedarticle\n    Creating table model_forms_improvedarticlewithparentlink\n    Creating table model_forms_betterwriter\n    Creating table model_forms_publication\n    Creating table model_forms_publicationdefaults\n    Creating table model_forms_author\n    Creating table model_forms_author1\n    Creating table model_forms_writerprofile\n    Creating table model_forms_document\n    Creating table model_forms_textfile\n    Creating table model_forms_customff\n    Creating table model_forms_filepathmodel\n    Creating table model_forms_imagefile\n    Creating table model_forms_optionalimagefile\n    Creating table model_forms_noextensionimagefile\n    Creating table model_forms_homepage\n    Creating table model_forms_product\n    Creating table model_forms_price\n    Creating table model_forms_triple\n    Creating table model_forms_articlestatus\n    Creating table model_forms_inventory\n    Creating table model_forms_book\n    Creating table model_forms_derivedbook\n    Creating table model_forms_explicitpk\n    Creating table model_forms_post\n    Creating table model_forms_datetimepost\n    Creating table model_forms_derivedpost\n    Creating table model_forms_bigint\n    Creating table model_forms_customfieldforexclusionmodel\n    Creating table model_forms_flexibledatepost\n    Creating table model_forms_colour\n    Creating table model_forms_colourfulitem\n    Creating table model_forms_customerrormessage\n    Creating table model_forms_character\n    Creating table model_forms_stumpjoke\n    Creating table model_forms_student\n    Creating table model_forms_photo\n    Creating table model_forms_uuidpk\n    Creating table model_forms_strictassignmentfieldspecific\n    Creating table model_forms_strictassignmentall\n    Creating table model_forms_award\n    Creating table model_forms_nullableuniquecharfieldmodel\n    Creating table model_forms_number\n    Creating table model_forms_numberstodice\n    Creating table model_forms_dice\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]