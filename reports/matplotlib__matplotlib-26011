[{"repo": "matplotlib/matplotlib", "instance_id": "matplotlib__matplotlib-26011", "base_commit": "00afcc0c6d4d2e4390338127f05b8f4fdb4e7087", "patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1241,11 +1241,13 @@ def _set_lim(self, v0, v1, *, emit=True, auto):\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+                if other is self.axes:\n+                    continue\n+                other._axis_map[name]._set_lim(v0, v1, emit=False, auto=auto)\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n \n         self.stale = True\n         return v0, v1\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8794,3 +8794,12 @@ def test_set_secondary_axis_color():\n     assert mcolors.same_color(sax.xaxis.get_tick_params()[\"color\"], \"red\")\n     assert mcolors.same_color(sax.xaxis.get_tick_params()[\"labelcolor\"], \"red\")\n     assert mcolors.same_color(sax.xaxis.label.get_color(), \"red\")\n+\n+\n+def test_xylim_changed_shared():\n+    fig, axs = plt.subplots(2, sharex=True, sharey=True)\n+    events = []\n+    axs[1].callbacks.connect(\"xlim_changed\", events.append)\n+    axs[1].callbacks.connect(\"ylim_changed\", events.append)\n+    axs[0].set(xlim=[1, 3], ylim=[2, 4])\n+    assert events == [axs[1], axs[1]]\n", "problem_statement": "xlim_changed not emitted on shared axis\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nWhen an axis is shared with another its registered \"xlim_changed\" callbacks does not get called when the change is induced by a shared axis (via sharex=). \r\n\r\nIn _base.py the set_xlim for sibling axis are called with emit=False:\r\n\r\n```\r\nmatplotlib/lib/matplotlib/axes/_base.py:\r\n\r\n/.../\r\ndef set_xlim(...)\r\n/.../\r\n        if emit:\r\n            self.callbacks.process('xlim_changed', self)\r\n            # Call all of the other x-axes that are shared with this one\r\n            for other in self._shared_x_axes.get_siblings(self):\r\n                if other is not self:\r\n                    other.set_xlim(self.viewLim.intervalx,\r\n                                   emit=False, auto=auto)\r\n```\r\n\r\nI'm very new to matplotlib, so perhaps there is a good reason for this? emit=False seems to disable both continued \"inheritance\" of axis (why?) and triggering of change callbacks (looking at the code above).\r\n\r\nIt seems like one would at least want to trigger the xlim_changed callbacks as they would be intended to react to any change in axis limits.\r\n\r\nEdit: Setting emit=True seems to introduce a recursion issue (not sure why but as inheritance seems to be passed along anyway it doesn't really matter). Moving the callback call to outside of the \"if emit:\"-statement seems to solve the issue as far as I can see when trying it out. Any reason to keep it inside the if-statement? \r\n\n", "hints_text": "I'm also seeing this behavior on matplotlib 3.4.1.  Working from the [resampling data example](https://matplotlib.org/stable/gallery/event_handling/resample.html), I've been developing an adaptive waveform plotter in [this PR](https://github.com/librosa/librosa/issues/1207) (code included there).  The specific quirks that I'm seeing are as follows:\r\n\r\n- Create two axes with shared x axis (eg, `fig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)`), and set an axis callback on `ax0` for `xlim_changed`.  If the xlim changes on `ax1`, which does not directly have the callback set, the axes still update appropriately but the callback is never triggered.\r\n- Possibly related: if the callback is set on `ax0` first, and some time later we draw on `ax1`, the callback never triggers even if we directly set the xlims on `ax0`.\r\n\r\nNote: if I create the shared axes, draw on `ax1` first and set the callback on `ax0` last, everything works as expected.  So I don't think there's any fundamental incompatibility here.  It does seem like some data structure is being either ignored or clobbered though.\nA short self-contained example would be very helpful here!  Thanks  \n\"short\" is relative here :)  There is a full setup in the linked PR, but here's something hopefully a little more streamlined:\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n# From https://matplotlib.org/stable/gallery/event_handling/resample.html\r\n# A class that will downsample the data and recompute when zoomed.\r\nclass DataDisplayDownsampler:\r\n    def __init__(self, xdata, ydata):\r\n        self.origYData = ydata\r\n        self.origXData = xdata\r\n        self.max_points = 50\r\n        self.delta = xdata[-1] - xdata[0]\r\n\r\n    def downsample(self, xstart, xend):\r\n        # get the points in the view range\r\n        mask = (self.origXData > xstart) & (self.origXData < xend)\r\n        # dilate the mask by one to catch the points just outside\r\n        # of the view range to not truncate the line\r\n        mask = np.convolve([1, 1, 1], mask, mode='same').astype(bool)\r\n        # sort out how many points to drop\r\n        ratio = max(np.sum(mask) // self.max_points, 1)\r\n\r\n        # mask data\r\n        xdata = self.origXData[mask]\r\n        ydata = self.origYData[mask]\r\n\r\n        # downsample data\r\n        xdata = xdata[::ratio]\r\n        ydata = ydata[::ratio]\r\n\r\n        print(\"using {} of {} visible points\".format(len(ydata), np.sum(mask)))\r\n\r\n        return xdata, ydata\r\n\r\n    def update(self, ax):\r\n        # Update the line\r\n        lims = ax.viewLim\r\n        if abs(lims.width - self.delta) > 1e-8:\r\n            self.delta = lims.width\r\n            xstart, xend = lims.intervalx\r\n            self.line.set_data(*self.downsample(xstart, xend))\r\n            ax.figure.canvas.draw_idle()\r\n\r\n\r\n# Create a signal\r\nxdata = np.linspace(16, 365, (365-16)*4)\r\nydata = np.sin(2*np.pi*xdata/153) + np.cos(2*np.pi*xdata/127)\r\n\r\n\r\n# --- This does not work: ax1 drawn after ax0 kills callbacks\r\nd = DataDisplayDownsampler(xdata, ydata)\r\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\r\n\r\n# Hook up the line\r\nd.line, = ax0.plot(xdata, ydata, 'o-')\r\nax0.set_autoscale_on(False)  # Otherwise, infinite loop\r\n\r\n# Connect for changing the view limits\r\nax0.callbacks.connect('xlim_changed', d.update)\r\nax0.set_xlim(16, 365)\r\n\r\nax1.plot(xdata, -ydata)\r\nplt.show()\r\n\r\n\r\n# --- This does work: ax0 drawn after ax1\r\n# --- Note: only works if axis limits are controlled via ax0, not ax1\r\n# Create a signal\r\nxdata = np.linspace(16, 365, (365-16)*4)\r\nydata = np.sin(2*np.pi*xdata/153) + np.cos(2*np.pi*xdata/127)\r\n\r\nd = DataDisplayDownsampler(xdata, ydata)\r\n\r\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\r\n\r\nax1.plot(xdata, -ydata)\r\n\r\n# Hook up the line\r\nd.line, = ax0.plot(xdata, ydata, 'o-')\r\nax0.set_autoscale_on(False)  # Otherwise, infinite loop\r\n\r\n# Connect for changing the view limits\r\nax0.callbacks.connect('xlim_changed', d.update)\r\nax0.set_xlim(16, 365)\r\n\r\n\r\nplt.show()\r\n\r\n```\r\n\r\nIn neither case does panning/zooming/setting limits on `ax1` do the right thing.\nThats not bad ;-)\nThe problem is that we do \r\n```\r\nother.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)\r\n```\r\nwhich doesn't do the `ax0.callbacks.process('xlim_changed', self)` \r\n\r\nIf we don't do this, it continues to emit to the shared axes and we get an infinite recursion.  \r\n\r\nSomething like \r\n```diff\r\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\r\nindex 9898c7c75..0c1941efb 100644\r\n--- a/lib/matplotlib/axes/_base.py\r\n+++ b/lib/matplotlib/axes/_base.py\r\n@@ -3742,10 +3742,11 @@ class _AxesBase(martist.Artist):\r\n             # Call all of the other x-axes that are shared with this one\r\n             for other in self._shared_x_axes.get_siblings(self):\r\n                 if other is not self:\r\n-                    other.set_xlim(self.viewLim.intervalx,\r\n-                                   emit=False, auto=auto)\r\n-                    if other.figure != self.figure:\r\n-                        other.figure.canvas.draw_idle()\r\n+                    if not np.allclose(other.viewLim.intervalx, self.viewLim.intervalx):\r\n+                        other.set_xlim(self.viewLim.intervalx,\r\n+                                    emit=True, auto=auto)\r\n+                        if other.figure != self.figure:\r\n+                            other.figure.canvas.draw_idle()\r\n```\r\n\r\nFixes the problem (plus we'd need the same for yaxis).  However, I'm not really expert enough on how sharing is supposed to work versus the callbacks to know if this is right or the best.  @anntzer or @efiring last touched this part of the code I think.   \nI think I would prefer something like\r\n```patch\r\ndiff --git i/lib/matplotlib/axes/_base.py w/lib/matplotlib/axes/_base.py\r\nindex 9898c7c75..1116d120f 100644\r\n--- i/lib/matplotlib/axes/_base.py\r\n+++ w/lib/matplotlib/axes/_base.py\r\n@@ -541,6 +541,11 @@ class _process_plot_var_args:\r\n             return [l[0] for l in result]\r\n \r\n \r\n+import dataclasses\r\n+_NoRecursionMarker = dataclasses.make_dataclass(\r\n+    \"_NoRecursionMarker\", [\"event_src\"])\r\n+\r\n+\r\n @cbook._define_aliases({\"facecolor\": [\"fc\"]})\r\n class _AxesBase(martist.Artist):\r\n     name = \"rectilinear\"\r\n@@ -3737,13 +3742,18 @@ class _AxesBase(martist.Artist):\r\n         if auto is not None:\r\n             self._autoscaleXon = bool(auto)\r\n \r\n-        if emit:\r\n+        if emit and emit != _NoRecursionMarker(self):\r\n             self.callbacks.process('xlim_changed', self)\r\n             # Call all of the other x-axes that are shared with this one\r\n             for other in self._shared_x_axes.get_siblings(self):\r\n                 if other is not self:\r\n+                    # Undocumented internal feature: emit can be set to\r\n+                    # _NoRecursionMarker(self) which is treated as True, but\r\n+                    # avoids infinite recursion.\r\n+                    if not isinstance(emit, _NoRecursionMarker):\r\n+                        emit = _NoRecursionMarker(self)\r\n                     other.set_xlim(self.viewLim.intervalx,\r\n-                                   emit=False, auto=auto)\r\n+                                   emit=emit, auto=auto)\r\n                     if other.figure != self.figure:\r\n                         other.figure.canvas.draw_idle()\r\n         self.stale = True\r\n```\r\nto more explicitly block infinite recursion, but other than that the basic idea seems fine to me.\nI'm not sure if this is related, but I'm seeing a similar issue if I try to run the same example code multiple times on one ax.  As far as I can tell from reading https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/cbook/__init__.py , it should support multiple callbacks on the same signal (or am I misunderstanding?), but the above example when run twice only issues the second callback.\r\n\r\nIf you think this is unrelated, I can open a separate issue for it.\nI'm not exactly sure what you mean, but note that CallbackRegistry currently drops duplicate callbacks (connecting a same callback a second time to the same signal results in it being dropped and the original cid is returned).  I actually think that's a pretty unhelpful behavior and would be happy to see it deprecated (that can just go through a normal deprecation cycle), but that would be a separate issue.\nAh, I see.  Thanks @anntzer for the clarification.\nI am :+1: on @anntzer 's solution here.\r\n\r\nMarking this as a good first issue because we have a patch for it.  Will still need to write a test, a simplified version of the initial bug report would probably work (we do not need convolve in the tests / real signals etc).\r\n\r\n------\r\n\r\nalso good to see fellow NYers around!\nHaving the same problem with perhaps a somewhat simpler example. If the registered callbacks were triggered by changes in axes limits from plots with shared x/y-axes, the gray dashed line in the left plot would extend across the whole canvas:\r\n\r\n![tmp](https://user-images.githubusercontent.com/30958850/130777946-5fd58887-d4e3-4287-a6e7-1be4a093fa98.png)\r\n\r\n```py\r\nfrom typing import Any\r\n\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.axes import Axes\r\n\r\n\r\ndef add_identity(ax: Axes = None, **line_kwargs: Any) -> None:\r\n    \"\"\"Add a parity line (y = x) to the provided axis.\"\"\"\r\n    if ax is None:\r\n        ax = plt.gca()\r\n\r\n    # zorder=0 ensures other plotted data displays on top of line\r\n    default_kwargs = dict(alpha=0.5, zorder=0, linestyle=\"dashed\", color=\"black\")\r\n    (identity,) = ax.plot([], [], **default_kwargs, **line_kwargs)\r\n\r\n    def callback(axes: Axes) -> None:\r\n        x_min, x_max = axes.get_xlim()\r\n        y_min, y_max = axes.get_ylim()\r\n        low = max(x_min, y_min)\r\n        high = min(x_max, y_max)\r\n        identity.set_data([low, high], [low, high])\r\n\r\n    callback(ax)\r\n    # Register callbacks to update identity line when moving plots in interactive\r\n    # mode to ensure line always extend to plot edges.\r\n    ax.callbacks.connect(\"xlim_changed\", callback)\r\n    ax.callbacks.connect(\"ylim_changed\", callback)\r\n\r\n\r\nfig, (ax1, ax2) = plt.subplots(1, 2, sharex=True, sharey=True)\r\n\r\nax1.plot([0, 1], [1, 0])\r\nadd_identity(ax1)\r\n\r\nax2.plot([0, 2], [2, 0])\r\nadd_identity(ax2)\r\n\r\nplt.savefig('tmp.png')\r\n```\nWhile not the point of this issue, that identity line can be achieved with [`axline`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.axline.html).\n@QuLogic Damn, that's what I get for not reading the docs closely enough: unnecessary work reinventing a (worse) wheel. Thanks for the pointer!\nNo worries, it's [new-ish](https://matplotlib.org/stable/users/prev_whats_new/whats_new_3.3.0.html#new-axes-axline-method).", "created_at": "2023-05-30T13:45:49Z", "version": "3.7", "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_xylim_changed_shared\"]", "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_get_labels\", \"lib/matplotlib/tests/test_axes.py::test_repr\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]\", \"lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_label_shift\", \"lib/matplotlib/tests/test_axes.py::test_acorr[png]\", \"lib/matplotlib/tests/test_axes.py::test_acorr_integers[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy[png]\", \"lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_matshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]\", \"lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_cla\", \"lib/matplotlib/tests/test_axes.py::test_twin_units[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_units[y]\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\", \"lib/matplotlib/tests/test_axes.py::test_inverted_cla\", \"lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla\", \"lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tight\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\", \"lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\", \"lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]\", \"lib/matplotlib/tests/test_axes.py::test_nargs_stem\", \"lib/matplotlib/tests/test_axes.py::test_nargs_legend\", \"lib/matplotlib/tests/test_axes.py::test_nargs_pcolorfast\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]\", \"lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\", \"lib/matplotlib/tests/test_axes.py::test_arrow_empty\", \"lib/matplotlib/tests/test_axes.py::test_arrow_in_view\", \"lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\", \"lib/matplotlib/tests/test_axes.py::test_annotate_signature\", \"lib/matplotlib/tests/test_axes.py::test_fill_units[png]\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::test_single_point[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_single_date[png]\", \"lib/matplotlib/tests/test_axes.py::test_shaped_data[png]\", \"lib/matplotlib/tests/test_axes.py::test_structured_data\", \"lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]\", \"lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim\", \"lib/matplotlib/tests/test_axes.py::test_hexbin_mincnt_behavior_upon_C_parameter[png]\", \"lib/matplotlib/tests/test_axes.py::test_inverted_limits\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]\", \"lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_rgba[png-3-1]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_rgba[png-4-0.5]\", \"lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs\", \"lib/matplotlib/tests/test_axes.py::test_pcolorargs_with_read_only\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorflaterror\", \"lib/matplotlib/tests/test_axes.py::test_samesizepcolorflaterror\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[png]\", \"lib/matplotlib/tests/test_axes.py::test_canonical[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\", \"lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle\", \"lib/matplotlib/tests/test_axes.py::test_markevery[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]\", \"lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]\", \"lib/matplotlib/tests/test_axes.py::test_nan_bar_values\", \"lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]\", \"lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\", \"lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_bar_datetime_start\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_pcolor_regression\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas\", \"lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]\", \"lib/matplotlib/tests/test_axes.py::test_bar_labels_length\", \"lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked\", \"lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_float16\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]\", \"lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]\", \"lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]\", \"lib/matplotlib/tests/test_axes.py::test_stairs[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_update[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_empty\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update\", \"lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2\", \"lib/matplotlib/tests/test_axes.py::test_stairs_options[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]\", \"lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist2d_density\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths\", \"lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_singular_plural_arguments\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\", \"lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error\", \"lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api\", \"lib/matplotlib/tests/test_axes.py::test_pyplot_axes\", \"lib/matplotlib/tests/test_axes.py::test_log_scales\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_no_data\", \"lib/matplotlib/tests/test_axes.py::test_log_scales_invalid\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]\", \"lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]\", \"lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]\", \"lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]\", \"lib/matplotlib/tests/test_axes.py::test_manage_xticks\", \"lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\", \"lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_errorbar_polar_caps[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_shape\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid\", \"lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_stem[png]\", \"lib/matplotlib/tests/test_axes.py::test_stem_args\", \"lib/matplotlib/tests/test_axes.py::test_stem_markerfmt\", \"lib/matplotlib/tests/test_axes.py::test_stem_dates\", \"lib/matplotlib/tests/test_axes.py::test_stem_orientation[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]\", \"lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged\", \"lib/matplotlib/tests/test_axes.py::test_hist_emptydata\", \"lib/matplotlib/tests/test_axes.py::test_hist_labels\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\", \"lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\", \"lib/matplotlib/tests/test_axes.py::test_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_alpha[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_alpha\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\", \"lib/matplotlib/tests/test_axes.py::test_empty_eventplot\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]\", \"lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\", \"lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]\", \"lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]\", \"lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]\", \"lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_axline_args\", \"lib/matplotlib/tests/test_axes.py::test_vlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_vlines_default\", \"lib/matplotlib/tests/test_axes.py::test_hlines[png]\", \"lib/matplotlib/tests/test_axes.py::test_hlines_default\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]\", \"lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]\", \"lib/matplotlib/tests/test_axes.py::test_vlines_hlines_blended_transform[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\", \"lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\", \"lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\", \"lib/matplotlib/tests/test_axes.py::test_specgram[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_fs_none\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]\", \"lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd[png]\", \"lib/matplotlib/tests/test_axes.py::test_spectrum[png]\", \"lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases\", \"lib/matplotlib/tests/test_axes.py::test_twin_remove[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]\", \"lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]\", \"lib/matplotlib/tests/test_axes.py::test_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_grid\", \"lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]\", \"lib/matplotlib/tests/test_axes.py::test_vline_limit\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]\", \"lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]\", \"lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\", \"lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\", \"lib/matplotlib/tests/test_axes.py::test_shared_aspect_error\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-The\", \"lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\\\\\(\\\\\\\\)\", \"lib/matplotlib/tests/test_axes.py::test_axis_method_errors\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\", \"lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\", \"lib/matplotlib/tests/test_axes.py::test_relim_visible_only\", \"lib/matplotlib/tests/test_axes.py::test_text_labelsize\", \"lib/matplotlib/tests/test_axes.py::test_pie_default[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_shadow[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_textprops\", \"lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values\", \"lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie\", \"lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[png]\", \"lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_kwargs_raise_error_without_labels\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]\", \"lib/matplotlib/tests/test_axes.py::test_xticks_bad_args\", \"lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels\", \"lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc\", \"lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_label_update\", \"lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]\", \"lib/matplotlib/tests/test_axes.py::test_margins\", \"lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot\", \"lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must\", \"lib/matplotlib/tests/test_axes.py::test_length_one_hist\", \"lib/matplotlib/tests/test_axes.py::test_set_xy_bound\", \"lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\", \"lib/matplotlib/tests/test_axes.py::test_color_None\", \"lib/matplotlib/tests/test_axes.py::test_color_alias\", \"lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\", \"lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\", \"lib/matplotlib/tests/test_axes.py::test_rc_spines[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_grid[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_tick\", \"lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\", \"lib/matplotlib/tests/test_axes.py::test_square_plot\", \"lib/matplotlib/tests/test_axes.py::test_bad_plot_args\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]\", \"lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]\", \"lib/matplotlib/tests/test_axes.py::test_shared_scale\", \"lib/matplotlib/tests/test_axes.py::test_shared_bool\", \"lib/matplotlib/tests/test_axes.py::test_violin_point_mass\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\", \"lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\", \"lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_title_pad\", \"lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]\", \"lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]\", \"lib/matplotlib/tests/test_axes.py::test_loglog[png]\", \"lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\", \"lib/matplotlib/tests/test_axes.py::test_axes_margins\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\", \"lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks\", \"lib/matplotlib/tests/test_axes.py::test_auto_numticks_log\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\", \"lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\", \"lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates\", \"lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing\", \"lib/matplotlib/tests/test_axes.py::test_pandas_index_shape\", \"lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist\", \"lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center\", \"lib/matplotlib/tests/test_axes.py::test_axis_get_tick_params\", \"lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\", \"lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\", \"lib/matplotlib/tests/test_axes.py::test_none_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_bar_uint8\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]\", \"lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\", \"lib/matplotlib/tests/test_axes.py::test_titletwiny\", \"lib/matplotlib/tests/test_axes.py::test_titlesetpos\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top\", \"lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[left\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[center\", \"lib/matplotlib/tests/test_axes.py::test_title_above_offset[both\", \"lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page\", \"lib/matplotlib/tests/test_axes.py::test_offset_label_color\", \"lib/matplotlib/tests/test_axes.py::test_offset_text_visible\", \"lib/matplotlib/tests/test_axes.py::test_large_offset\", \"lib/matplotlib/tests/test_axes.py::test_barb_units\", \"lib/matplotlib/tests/test_axes.py::test_quiver_units\", \"lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\", \"lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\", \"lib/matplotlib/tests/test_axes.py::test_log_margins\", \"lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_legend\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args0-kwargs0-lineoffsets\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args1-kwargs1-linelengths\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args2-kwargs2-linewidths\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args3-kwargs3-linestyles\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args4-kwargs4-alpha\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args5-kwargs5-positions\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args6-kwargs6-lineoffsets\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args7-kwargs7-linelengths\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args8-kwargs8-linewidths\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args9-kwargs9-linestyles\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args10-kwargs10-alpha\", \"lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args11-kwargs11-colors\", \"lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\", \"lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\", \"lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\", \"lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\", \"lib/matplotlib/tests/test_axes.py::test_zero_linewidth\", \"lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]\", \"lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\", \"lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\", \"lib/matplotlib/tests/test_axes.py::test_inset\", \"lib/matplotlib/tests/test_axes.py::test_zoom_inset\", \"lib/matplotlib/tests/test_axes.py::test_inset_polar[png]\", \"lib/matplotlib/tests/test_axes.py::test_inset_projection\", \"lib/matplotlib/tests/test_axes.py::test_inset_subclass\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]\", \"lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]\", \"lib/matplotlib/tests/test_axes.py::test_set_position\", \"lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\", \"lib/matplotlib/tests/test_axes.py::test_limits_after_scroll_zoom\", \"lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan\", \"lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index\", \"lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\", \"lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]\", \"lib/matplotlib/tests/test_axes.py::test_secondary_fail\", \"lib/matplotlib/tests/test_axes.py::test_secondary_resize\", \"lib/matplotlib/tests/test_axes.py::test_secondary_minorloc\", \"lib/matplotlib/tests/test_axes.py::test_secondary_formatter\", \"lib/matplotlib/tests/test_axes.py::test_secondary_repr\", \"lib/matplotlib/tests/test_axes.py::test_axis_options[png]\", \"lib/matplotlib/tests/test_axes.py::test_normal_axes\", \"lib/matplotlib/tests/test_axes.py::test_nodecorator\", \"lib/matplotlib/tests/test_axes.py::test_displaced_spine\", \"lib/matplotlib/tests/test_axes.py::test_tickdirs\", \"lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\", \"lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg\", \"lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2\", \"lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\", \"lib/matplotlib/tests/test_axes.py::test_hist_nan_data\", \"lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\", \"lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder\", \"lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box\", \"lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect\", \"lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position\", \"lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init\", \"lib/matplotlib/tests/test_axes.py::test_set_aspect_negative\", \"lib/matplotlib/tests/test_axes.py::test_redraw_in_frame\", \"lib/matplotlib/tests/test_axes.py::test_invisible_axes_events\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]\", \"lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]\", \"lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]\", \"lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky\", \"lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor\", \"lib/matplotlib/tests/test_axes.py::test_xaxis_offsetText_color\", \"lib/matplotlib/tests/test_axes.py::test_yaxis_offsetText_color\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]\", \"lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]\", \"lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions\", \"lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]\", \"lib/matplotlib/tests/test_axes.py::test_shared_axes_retick\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]\", \"lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_center\", \"lib/matplotlib/tests/test_axes.py::test_centered_bar_label_label_beyond_limits\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_labels\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata\", \"lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted\", \"lib/matplotlib/tests/test_axes.py::test_nan_barlabels\", \"lib/matplotlib/tests/test_axes.py::test_patch_bounds\", \"lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs\", \"lib/matplotlib/tests/test_axes.py::test_artist_sublists\", \"lib/matplotlib/tests/test_axes.py::test_empty_line_plots\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\\\\\+'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'\", \"lib/matplotlib/tests/test_axes.py::test_plot_format\", \"lib/matplotlib/tests/test_axes.py::test_automatic_legend\", \"lib/matplotlib/tests/test_axes.py::test_plot_errors\", \"lib/matplotlib/tests/test_axes.py::test_clim\", \"lib/matplotlib/tests/test_axes.py::test_bezier_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_small_autoscale\", \"lib/matplotlib/tests/test_axes.py::test_get_xticklabel\", \"lib/matplotlib/tests/test_axes.py::test_bar_leading_nan\", \"lib/matplotlib/tests/test_axes.py::test_bar_all_nan[png]\", \"lib/matplotlib/tests/test_axes.py::test_extent_units[png]\", \"lib/matplotlib/tests/test_axes.py::test_cla_clears_children_axes_and_fig\", \"lib/matplotlib/tests/test_axes.py::test_scatter_color_repr_error\", \"lib/matplotlib/tests/test_axes.py::test_zorder_and_explicit_rasterization\", \"lib/matplotlib/tests/test_axes.py::test_preset_clip_paths[png]\", \"lib/matplotlib/tests/test_axes.py::test_rc_axes_label_formatting\", \"lib/matplotlib/tests/test_axes.py::test_ecdf[png]\", \"lib/matplotlib/tests/test_axes.py::test_ecdf_invalid\", \"lib/matplotlib/tests/test_axes.py::test_fill_between_axes_limits\", \"lib/matplotlib/tests/test_axes.py::test_tick_param_labelfont\", \"lib/matplotlib/tests/test_axes.py::test_set_secondary_axis_color\"]", "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   lib/matplotlib/axis.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 00afcc0c6d4d2e4390338127f05b8f4fdb4e7087\nAuthor: Elliott Sales de Andrade <quantum.analyst@gmail.com>\nDate:   Thu Jul 27 13:02:00 2023 -0400\n\n    Improve typing in pyplot (#26385)\n    \n    * TYP: Fix types for path effects property\n    \n    * Add typing to _docstring module\n    \n    This is mainly useful because of its decorators, which previously caused\n    any usage to lose typing. Consequently, there are several _new_ typing\n    errors, many of which are fixed here, but not all.\n    \n    * Add typing to _copy_docstring_and_deprecators\n    \n    As before, this untyped function caused any decorator usage to make the\n    wrapped function untyped. Now, these functions are typed again. This\n    revealed several follow-on type issues, but many of them are expected\n    (as tests tend to call things with incorrect arguments on purpose, use\n    property aliases, etc.)\n    \n    * Add some more typing in pyplot\n    \n    * Add return annotation for pie\n    \n    * Remove return from pyplot funcs annotated as None\n    \n    * TYP: Explicitly re-export some API from pyplot\n    \n    See #26372\n\ndiff --git a/galleries/examples/misc/hyperlinks_sgskip.py b/galleries/examples/misc/hyperlinks_sgskip.py\nindex 8ecef0a9e3..6b6960a5d4 100644\n--- a/galleries/examples/misc/hyperlinks_sgskip.py\n+++ b/galleries/examples/misc/hyperlinks_sgskip.py\n@@ -33,7 +33,7 @@ Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\n Z = (Z1 - Z2) * 2\n \n im = plt.imshow(Z, interpolation='bilinear', cmap=cm.gray,\n-                origin='lower', extent=[-3, 3, -3, 3])\n+                origin='lower', extent=(-3, 3, -3, 3))\n \n im.set_url('https://www.google.com/')\n fig.savefig('image.svg')\ndiff --git a/galleries/examples/shapes_and_collections/dolphin.py b/galleries/examples/shapes_and_collections/dolphin.py\nindex bf28fdbcc2..0fcd67284a 100644\n--- a/galleries/examples/shapes_and_collections/dolphin.py\n+++ b/galleries/examples/shapes_and_collections/dolphin.py\n@@ -33,7 +33,7 @@ ax.add_patch(circle)\n im = plt.imshow(np.random.random((100, 100)),\n                 origin='lower', cmap=cm.winter,\n                 interpolation='spline36',\n-                extent=([-1, 1, -1, 1]))\n+                extent=(-1, 1, -1, 1))\n im.set_clip_path(circle)\n \n plt.plot(x, y, 'o', color=(0.9, 0.9, 1.0), alpha=0.8)\ndiff --git a/galleries/examples/subplots_axes_and_figures/subplots_adjust.py b/galleries/examples/subplots_axes_and_figures/subplots_adjust.py\nindex 3eb6d709a5..d4393be51f 100644\n--- a/galleries/examples/subplots_axes_and_figures/subplots_adjust.py\n+++ b/galleries/examples/subplots_axes_and_figures/subplots_adjust.py\n@@ -25,7 +25,7 @@ plt.subplot(212)\n plt.imshow(np.random.random((100, 100)))\n \n plt.subplots_adjust(bottom=0.1, right=0.8, top=0.9)\n-cax = plt.axes([0.85, 0.1, 0.075, 0.8])\n+cax = plt.axes((0.85, 0.1, 0.075, 0.8))\n plt.colorbar(cax=cax)\n \n plt.show()\ndiff --git a/galleries/examples/text_labels_and_annotations/autowrap.py b/galleries/examples/text_labels_and_annotations/autowrap.py\nindex ec8ffd6235..e52dc919ee 100644\n--- a/galleries/examples/text_labels_and_annotations/autowrap.py\n+++ b/galleries/examples/text_labels_and_annotations/autowrap.py\n@@ -17,7 +17,7 @@ embed.\n import matplotlib.pyplot as plt\n \n fig = plt.figure()\n-plt.axis([0, 10, 0, 10])\n+plt.axis((0, 10, 0, 10))\n t = (\"This is a really long string that I'd rather have wrapped so that it \"\n      \"doesn't go outside of the figure, but if it's long enough it will go \"\n      \"off the top or bottom!\")\ndiff --git a/galleries/tutorials/pyplot.py b/galleries/tutorials/pyplot.py\nindex b7f9245190..02c829ac3f 100644\n--- a/galleries/tutorials/pyplot.py\n+++ b/galleries/tutorials/pyplot.py\n@@ -73,7 +73,7 @@ plt.plot([1, 2, 3, 4], [1, 4, 9, 16])\n # example, to plot the above with red circles, you would issue\n \n plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro')\n-plt.axis([0, 6, 0, 20])\n+plt.axis((0, 6, 0, 20))\n plt.show()\n \n # %%\ndiff --git a/lib/matplotlib/_docstring.pyi b/lib/matplotlib/_docstring.pyi\nnew file mode 100644\nindex 0000000000..0377dc5fe9\n--- /dev/null\n+++ b/lib/matplotlib/_docstring.pyi\n@@ -0,0 +1,29 @@\n+from typing import Any, Callable, TypeVar, overload\n+\n+\n+_T = TypeVar('_T')\n+\n+\n+class Substitution:\n+    @overload\n+    def __init__(self, *args: str): ...\n+    @overload\n+    def __init__(self, **kwargs: str): ...\n+    def __call__(self, func: _T) -> _T: ...\n+    def update(self, *args, **kwargs): ...  # type: ignore[no-untyped-def]\n+\n+\n+class _ArtistKwdocLoader(dict[str, str]):\n+    def __missing__(self, key: str) -> str: ...\n+\n+\n+class _ArtistPropertiesSubstitution(Substitution):\n+    def __init__(self) -> None: ...\n+    def __call__(self, obj: _T) -> _T: ...\n+\n+\n+def copy(source: Any) -> Callable[[_T], _T]: ...\n+\n+\n+dedent_interpd: _ArtistPropertiesSubstitution\n+interpd: _ArtistPropertiesSubstitution\ndiff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex e891803871..b9d627c303 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -715,7 +715,7 @@ class Artist:\n \n         Parameters\n         ----------\n-        path_effects : `.AbstractPathEffect`\n+        path_effects : list of `.AbstractPathEffect`\n         \"\"\"\n         self._path_effects = path_effects\n         self.stale = True\ndiff --git a/lib/matplotlib/artist.pyi b/lib/matplotlib/artist.pyi\nindex 4597bed6fb..6e5dddaef6 100644\n--- a/lib/matplotlib/artist.pyi\n+++ b/lib/matplotlib/artist.pyi\n@@ -83,8 +83,8 @@ class Artist:\n         length: float | None = ...,\n         randomness: float | None = ...,\n     ) -> None: ...\n-    def set_path_effects(self, path_effects: AbstractPathEffect) -> None: ...\n-    def get_path_effects(self) -> AbstractPathEffect: ...\n+    def set_path_effects(self, path_effects: list[AbstractPathEffect]) -> None: ...\n+    def get_path_effects(self) -> list[AbstractPathEffect]: ...\n     def get_figure(self) -> Figure | None: ...\n     def set_figure(self, fig: Figure) -> None: ...\n     def set_clip_box(self, clipbox: Bbox) -> None: ...\ndiff --git a/lib/matplotlib/axes/_axes.pyi b/lib/matplotlib/axes/_axes.pyi\nindex 4be2c55361..846da9e0cb 100644\n--- a/lib/matplotlib/axes/_axes.pyi\n+++ b/lib/matplotlib/axes/_axes.pyi\n@@ -20,7 +20,7 @@ from matplotlib.legend import Legend\n from matplotlib.legend_handler import HandlerBase\n from matplotlib.lines import Line2D\n from matplotlib.mlab import GaussianKDE\n-from matplotlib.patches import Rectangle, FancyArrow, Polygon, StepPatch\n+from matplotlib.patches import Rectangle, FancyArrow, Polygon, StepPatch, Wedge\n from matplotlib.quiver import Quiver, QuiverKey, Barbs\n from matplotlib.text import Annotation, Text\n from matplotlib.transforms import Transform, Bbox\n@@ -305,7 +305,7 @@ class Axes(_AxesBase):\n         autopct: str | Callable[[float], str] | None = ...,\n         pctdistance: float = ...,\n         shadow: bool = ...,\n-        labeldistance: float = ...,\n+        labeldistance: float | None = ...,\n         startangle: float = ...,\n         radius: float = ...,\n         counterclock: bool = ...,\n@@ -318,7 +318,9 @@ class Axes(_AxesBase):\n         normalize: bool = ...,\n         hatch: str | Sequence[str] | None = ...,\n         data=...,\n-    ): ...\n+    ) -> tuple[list[Wedge], list[Text]] | tuple[\n+        list[Wedge], list[Text], list[Text]\n+    ]: ...\n     def errorbar(\n         self,\n         x: float | ArrayLike,\n@@ -564,7 +566,7 @@ class Axes(_AxesBase):\n         edges: ArrayLike | None = ...,\n         *,\n         orientation: Literal[\"vertical\", \"horizontal\"] = ...,\n-        baseline: float | ArrayLike = ...,\n+        baseline: float | ArrayLike | None = ...,\n         fill: bool = ...,\n         data=...,\n         **kwargs\n@@ -736,7 +738,7 @@ class Axes(_AxesBase):\n         showmeans: bool = ...,\n         showextrema: bool = ...,\n         showmedians: bool = ...,\n-        quantiles: Sequence[float] | None = ...,\n+        quantiles: Sequence[float | Sequence[float]] | None = ...,\n         points: int = ...,\n         bw_method: Literal[\"scott\", \"silverman\"]\n         | float\ndiff --git a/lib/matplotlib/axes/_base.pyi b/lib/matplotlib/axes/_base.pyi\nindex 7cf5f166ae..507ecc2e51 100644\n--- a/lib/matplotlib/axes/_base.pyi\n+++ b/lib/matplotlib/axes/_base.pyi\n@@ -39,6 +39,7 @@ class _axis_method_wrapper:\n \n class _AxesBase(martist.Artist):\n     name: str\n+    patch: Patch\n     spines: Spines\n     fmt_xdata: Callable[[float], str] | None\n     fmt_ydata: Callable[[float], str] | None\ndiff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py\nindex ac06eee261..435a5f6f49 100644\n--- a/lib/matplotlib/backend_bases.py\n+++ b/lib/matplotlib/backend_bases.py\n@@ -2304,7 +2304,7 @@ class FigureCanvasBase:\n             # ... later\n             canvas.mpl_disconnect(cid)\n         \"\"\"\n-        return self.callbacks.disconnect(cid)\n+        self.callbacks.disconnect(cid)\n \n     # Internal subclasses can override _timer_cls instead of new_timer, though\n     # this is not a public API for third-party subclasses.\ndiff --git a/lib/matplotlib/cbook.pyi b/lib/matplotlib/cbook.pyi\nindex 69e52a0568..3bf0e345e9 100644\n--- a/lib/matplotlib/cbook.pyi\n+++ b/lib/matplotlib/cbook.pyi\n@@ -20,6 +20,8 @@ from typing import (\n \n _T = TypeVar(\"_T\")\n \n+def _get_running_interactive_framework() -> str | None: ...\n+\n class CallbackRegistry:\n     exception_handler: Callable[[Exception], Any]\n     callbacks: dict[Any, dict[int, Any]]\n@@ -162,6 +164,7 @@ def normalize_kwargs(\n     kw: dict[str, Any],\n     alias_mapping: dict[str, list[str]] | type[Artist] | Artist | None = ...,\n ) -> dict[str, Any]: ...\n+def _str_equal(obj: Any, s: str) -> bool: ...\n \n class _OrderedSet(collections.abc.MutableSet):\n     def __init__(self) -> None: ...\n@@ -171,4 +174,5 @@ class _OrderedSet(collections.abc.MutableSet):\n     def add(self, key) -> None: ...\n     def discard(self, key) -> None: ...\n \n+def _backend_module_name(name: str) -> str: ...\n def _format_approx(number: float, precision: int) -> str: ...\ndiff --git a/lib/matplotlib/collections.pyi b/lib/matplotlib/collections.pyi\nindex 25eece49d7..9ed1746f6c 100644\n--- a/lib/matplotlib/collections.pyi\n+++ b/lib/matplotlib/collections.pyi\n@@ -42,7 +42,7 @@ class Collection(artist.Artist, cm.ScalarMappable):\n     def get_datalim(self, transData: transforms.Transform) -> transforms.Bbox: ...\n     def set_pickradius(self, pickradius: float) -> None: ...\n     def get_pickradius(self) -> float: ...\n-    def set_urls(self, urls: Sequence[str]) -> None: ...\n+    def set_urls(self, urls: Sequence[str | None]) -> None: ...\n     def get_urls(self) -> Sequence[str | None]: ...\n     def set_hatch(self, hatch: str) -> None: ...\n     def get_hatch(self) -> str: ...\ndiff --git a/lib/matplotlib/container.pyi b/lib/matplotlib/container.pyi\nindex 406ee8b62c..9cc2e1ac2a 100644\n--- a/lib/matplotlib/container.pyi\n+++ b/lib/matplotlib/container.pyi\n@@ -10,8 +10,8 @@ from numpy.typing import ArrayLike\n class Container(tuple):\n     def __new__(cls, *args, **kwargs): ...\n     def __init__(self, kl, label: Any | None = ...) -> None: ...\n-    def remove(self): ...\n-    def get_children(self): ...\n+    def remove(self) -> None: ...\n+    def get_children(self) -> list[Artist]: ...\n     def get_label(self) -> str | None: ...\n     def set_label(self, s: Any) -> None: ...\n     def add_callback(self, func: Callable[[Artist], Any]) -> int: ...\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 99af494c78..8cae12d0c5 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -49,13 +49,15 @@ import re\n import sys\n import threading\n import time\n+from typing import cast, overload\n \n from cycler import cycler\n import matplotlib\n import matplotlib.colorbar\n import matplotlib.image\n from matplotlib import _api\n-from matplotlib import rcsetup, style\n+from matplotlib import (  # Re-exported for typing.\n+    cm as cm, get_backend as get_backend, rcParams as rcParams, style as style)\n from matplotlib import _pylab_helpers, interactive\n from matplotlib import cbook\n from matplotlib import _docstring\n@@ -63,18 +65,16 @@ from matplotlib.backend_bases import (\n     FigureCanvasBase, FigureManagerBase, MouseButton)\n from matplotlib.figure import Figure, FigureBase, figaspect\n from matplotlib.gridspec import GridSpec, SubplotSpec\n-from matplotlib import rcParams, rcParamsDefault, get_backend, rcParamsOrig\n-from matplotlib.rcsetup import interactive_bk as _interactive_bk\n+from matplotlib import rcsetup, rcParamsDefault, rcParamsOrig\n from matplotlib.artist import Artist\n from matplotlib.axes import Axes, Subplot  # type: ignore\n from matplotlib.projections import PolarAxes  # type: ignore\n from matplotlib import mlab  # for detrend_none, window_hanning\n from matplotlib.scale import get_scale_names\n \n-from matplotlib import cm\n-from matplotlib.cm import _colormaps as colormaps\n+from matplotlib.cm import _colormaps\n from matplotlib.cm import register_cmap  # type: ignore\n-from matplotlib.colors import _color_sequences as color_sequences\n+from matplotlib.colors import _color_sequences\n \n import numpy as np\n \n@@ -85,7 +85,8 @@ if TYPE_CHECKING:\n     import datetime\n     import pathlib\n     import os\n-    from typing import Any, BinaryIO, Literal\n+    from typing import Any, BinaryIO, Literal, TypeVar\n+    from typing_extensions import ParamSpec\n \n     import PIL\n     from numpy.typing import ArrayLike\n@@ -115,13 +116,17 @@ if TYPE_CHECKING:\n     from matplotlib.legend import Legend\n     from matplotlib.mlab import GaussianKDE\n     from matplotlib.image import AxesImage, FigureImage\n-    from matplotlib.patches import FancyArrow, StepPatch\n+    from matplotlib.patches import FancyArrow, StepPatch, Wedge\n     from matplotlib.quiver import Barbs, Quiver, QuiverKey\n     from matplotlib.scale import ScaleBase\n     from matplotlib.transforms import Transform, Bbox\n     from matplotlib.typing import ColorType, LineStyleType, MarkerType, HashableList\n     from matplotlib.widgets import SubplotTool\n \n+    _P = ParamSpec('_P')\n+    _R = TypeVar('_R')\n+\n+\n # We may not need the following imports here:\n from matplotlib.colors import Normalize\n from matplotlib.lines import Line2D\n@@ -138,17 +143,40 @@ from .ticker import (\n _log = logging.getLogger(__name__)\n \n \n-def _copy_docstring_and_deprecators(method, func=None):\n+# Explicit rename instead of import-as for typing's sake.\n+colormaps = _colormaps\n+color_sequences = _color_sequences\n+\n+\n+@overload\n+def _copy_docstring_and_deprecators(\n+    method: Any,\n+    func: Literal[None] = None\n+) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]: ...\n+\n+\n+@overload\n+def _copy_docstring_and_deprecators(\n+    method: Any, func: Callable[_P, _R]) -> Callable[_P, _R]: ...\n+\n+\n+def _copy_docstring_and_deprecators(\n+    method: Any,\n+    func: Callable[_P, _R] | None = None\n+) -> Callable[[Callable[_P, _R]], Callable[_P, _R]] | Callable[_P, _R]:\n     if func is None:\n-        return functools.partial(_copy_docstring_and_deprecators, method)\n-    decorators = [_docstring.copy(method)]\n+        return cast('Callable[[Callable[_P, _R]], Callable[_P, _R]]',\n+                    functools.partial(_copy_docstring_and_deprecators, method))\n+    decorators: list[Callable[[Callable[_P, _R]], Callable[_P, _R]]] = [\n+        _docstring.copy(method)\n+    ]\n     # Check whether the definition of *method* includes @_api.rename_parameter\n     # or @_api.make_keyword_only decorators; if so, propagate them to the\n     # pyplot wrapper as well.\n-    while getattr(method, \"__wrapped__\", None) is not None:\n-        decorator = _api.deprecation.DECORATORS.get(method)\n-        if decorator:\n-            decorators.append(decorator)\n+    while hasattr(method, \"__wrapped__\"):\n+        potential_decorator = _api.deprecation.DECORATORS.get(method)\n+        if potential_decorator:\n+            decorators.append(potential_decorator)\n         method = method.__wrapped__\n     for decorator in decorators[::-1]:\n         func = decorator(func)\n@@ -163,12 +191,12 @@ _ReplDisplayHook = Enum(\"_ReplDisplayHook\", [\"NONE\", \"PLAIN\", \"IPYTHON\"])\n _REPL_DISPLAYHOOK = _ReplDisplayHook.NONE\n \n \n-def _draw_all_if_interactive():\n+def _draw_all_if_interactive() -> None:\n     if matplotlib.is_interactive():\n         draw_all()\n \n \n-def install_repl_displayhook():\n+def install_repl_displayhook() -> None:\n     \"\"\"\n     Connect to the display hook of the current shell.\n \n@@ -205,7 +233,7 @@ def install_repl_displayhook():\n         ip.enable_gui(ipython_gui_name)\n \n \n-def uninstall_repl_displayhook():\n+def uninstall_repl_displayhook() -> None:\n     \"\"\"Disconnect from the display hook of the current shell.\"\"\"\n     global _REPL_DISPLAYHOOK\n     if _REPL_DISPLAYHOOK is _ReplDisplayHook.IPYTHON:\n@@ -235,10 +263,10 @@ def findobj(\n     return o.findobj(match, include_self=include_self)\n \n \n-_backend_mod = None\n+_backend_mod: type[matplotlib.backend_bases._Backend] | None = None\n \n \n-def _get_backend_mod():\n+def _get_backend_mod() -> type[matplotlib.backend_bases._Backend]:\n     \"\"\"\n     Ensure that a backend is selected and return it.\n \n@@ -248,11 +276,11 @@ def _get_backend_mod():\n         # Use rcParams._get(\"backend\") to avoid going through the fallback\n         # logic (which will (re)import pyplot and then call switch_backend if\n         # we need to resolve the auto sentinel)\n-        switch_backend(rcParams._get(\"backend\"))\n-    return _backend_mod\n+        switch_backend(rcParams._get(\"backend\"))  # type: ignore[attr-defined]\n+    return cast(type[matplotlib.backend_bases._Backend], _backend_mod)\n \n \n-def switch_backend(newbackend):\n+def switch_backend(newbackend: str) -> None:\n     \"\"\"\n     Set the pyplot backend.\n \n@@ -283,9 +311,8 @@ def switch_backend(newbackend):\n                    'macosx': 'macosx',\n                    'headless': 'agg'}\n \n-        best_guess = mapping.get(current_framework, None)\n-        if best_guess is not None:\n-            candidates = [best_guess]\n+        if current_framework in mapping:\n+            candidates = [mapping[current_framework]]\n         else:\n             candidates = []\n         candidates += [\n@@ -311,10 +338,9 @@ def switch_backend(newbackend):\n     # have to escape the switch on access logic\n     old_backend = dict.__getitem__(rcParams, 'backend')\n \n-    backend_mod = importlib.import_module(\n-        cbook._backend_module_name(newbackend))\n+    module = importlib.import_module(cbook._backend_module_name(newbackend))\n \n-    required_framework = backend_mod.FigureCanvas.required_interactive_framework\n+    required_framework = module.FigureCanvas.required_interactive_framework\n     if required_framework is not None:\n         current_framework = cbook._get_running_interactive_framework()\n         if (current_framework and required_framework\n@@ -328,15 +354,15 @@ def switch_backend(newbackend):\n \n     # Classically, backends can directly export these functions.  This should\n     # keep working for backcompat.\n-    new_figure_manager = getattr(backend_mod, \"new_figure_manager\", None)\n-    show = getattr(backend_mod, \"show\", None)\n+    new_figure_manager = getattr(module, \"new_figure_manager\", None)\n+    show = getattr(module, \"show\", None)\n \n     # In that classical approach, backends are implemented as modules, but\n     # \"inherit\" default method implementations from backend_bases._Backend.\n     # This is achieved by creating a \"class\" that inherits from\n     # backend_bases._Backend and whose body is filled with the module globals.\n     class backend_mod(matplotlib.backend_bases._Backend):\n-        locals().update(vars(backend_mod))\n+        locals().update(vars(module))\n \n     # However, the newer approach for defining new_figure_manager and\n     # show is to derive them from canvas methods.  In that case, also\n@@ -359,10 +385,12 @@ def switch_backend(newbackend):\n                 if manager:\n                     manager.canvas.draw_idle()\n \n-        backend_mod.new_figure_manager_given_figure = \\\n-            new_figure_manager_given_figure\n-        backend_mod.new_figure_manager = new_figure_manager\n-        backend_mod.draw_if_interactive = draw_if_interactive\n+        backend_mod.new_figure_manager_given_figure = (  # type: ignore[method-assign]\n+            new_figure_manager_given_figure)\n+        backend_mod.new_figure_manager = (  # type: ignore[method-assign]\n+            new_figure_manager)\n+        backend_mod.draw_if_interactive = (  # type: ignore[method-assign]\n+            draw_if_interactive)\n \n     # If the manager explicitly overrides pyplot_show, use it even if a global\n     # show is already present, as the latter may be here for backcompat.\n@@ -377,7 +405,8 @@ def switch_backend(newbackend):\n     if (show is None\n             or (manager_pyplot_show is not None\n                 and manager_pyplot_show != base_pyplot_show)):\n-        backend_mod.show = manager_class.pyplot_show\n+        _pyplot_show = cast('Any', manager_class).pyplot_show\n+        backend_mod.show = _pyplot_show  # type: ignore[method-assign]\n \n     _log.debug(\"Loaded backend %s version %s.\",\n                newbackend, backend_mod.backend_version)\n@@ -390,7 +419,7 @@ def switch_backend(newbackend):\n \n     # Need to keep a global reference to the backend for compatibility reasons.\n     # See https://github.com/matplotlib/matplotlib/issues/6092\n-    matplotlib.backends.backend = newbackend\n+    matplotlib.backends.backend = newbackend  # type: ignore[attr-defined]\n     if not cbook._str_equal(old_backend, newbackend):\n         close(\"all\")\n \n@@ -399,9 +428,10 @@ def switch_backend(newbackend):\n     install_repl_displayhook()\n \n \n-def _warn_if_gui_out_of_main_thread():\n+def _warn_if_gui_out_of_main_thread() -> None:\n     warn = False\n-    if _get_backend_mod().FigureCanvas.required_interactive_framework:\n+    canvas_class = cast(type[FigureCanvasBase], _get_backend_mod().FigureCanvas)\n+    if canvas_class.required_interactive_framework:\n         if hasattr(threading, 'get_native_id'):\n             # This compares native thread ids because even if Python-level\n             # Thread objects match, the underlying OS thread (which is what\n@@ -1003,7 +1033,7 @@ def connect(s: str, func: Callable[[Event], Any]) -> int:\n \n @_copy_docstring_and_deprecators(FigureCanvasBase.mpl_disconnect)\n def disconnect(cid: int) -> None:\n-    return gcf().canvas.mpl_disconnect(cid)\n+    gcf().canvas.mpl_disconnect(cid)\n \n \n def close(fig: None | int | str | Figure | Literal[\"all\"] = None) -> None:\n@@ -1941,6 +1971,7 @@ def xticks(\n     \"\"\"\n     ax = gca()\n \n+    locs: list[Tick] | np.ndarray\n     if ticks is None:\n         locs = ax.get_xticks(minor=minor)\n         if labels is not None:\n@@ -2011,6 +2042,7 @@ def yticks(\n     \"\"\"\n     ax = gca()\n \n+    locs: list[Tick] | np.ndarray\n     if ticks is None:\n         locs = ax.get_yticks(minor=minor)\n         if labels is not None:\n@@ -2297,7 +2329,7 @@ def imread(\n def imsave(\n     fname: str | os.PathLike | BinaryIO, arr: ArrayLike, **kwargs\n ) -> None:\n-    return matplotlib.image.imsave(fname, arr, **kwargs)\n+    matplotlib.image.imsave(fname, arr, **kwargs)\n \n \n def matshow(A: ArrayLike, fignum: None | int = None, **kwargs) -> AxesImage:\n@@ -2379,7 +2411,7 @@ def polar(*args, **kwargs) -> list[Line2D]:\n # is compatible with the current running interactive framework.\n if (rcParams[\"backend_fallback\"]\n         and rcParams._get_backend_or_none() in (  # type: ignore\n-            set(_interactive_bk) - {'WebAgg', 'nbAgg'})\n+            set(rcsetup.interactive_bk) - {'WebAgg', 'nbAgg'})\n         and cbook._get_running_interactive_framework()):  # type: ignore\n     rcParams._set(\"backend\", rcsetup._auto_backend_sentinel)  # type: ignore\n \n@@ -2468,7 +2500,7 @@ def subplots_adjust(\n     wspace: float | None = None,\n     hspace: float | None = None,\n ) -> None:\n-    return gcf().subplots_adjust(\n+    gcf().subplots_adjust(\n         left=left, bottom=bottom, right=right, top=top, wspace=wspace, hspace=hspace\n     )\n \n@@ -2488,7 +2520,7 @@ def tight_layout(\n     w_pad: float | None = None,\n     rect: tuple[float, float, float, float] | None = None,\n ) -> None:\n-    return gcf().tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)\n+    gcf().tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)\n \n \n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@@ -2576,7 +2608,7 @@ def autoscale(\n     axis: Literal[\"both\", \"x\", \"y\"] = \"both\",\n     tight: bool | None = None,\n ) -> None:\n-    return gca().autoscale(enable=enable, axis=axis, tight=tight)\n+    gca().autoscale(enable=enable, axis=axis, tight=tight)\n \n \n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@@ -2831,8 +2863,8 @@ def contour(*args, data=None, **kwargs) -> QuadContourSet:\n     __ret = gca().contour(\n         *args, **({\"data\": data} if data is not None else {}), **kwargs\n     )\n-    if __ret._A is not None:\n-        sci(__ret)  # noqa\n+    if __ret._A is not None:  # type: ignore[attr-defined]\n+        sci(__ret)\n     return __ret\n \n \n@@ -2842,8 +2874,8 @@ def contourf(*args, data=None, **kwargs) -> QuadContourSet:\n     __ret = gca().contourf(\n         *args, **({\"data\": data} if data is not None else {}), **kwargs\n     )\n-    if __ret._A is not None:\n-        sci(__ret)  # noqa\n+    if __ret._A is not None:  # type: ignore[attr-defined]\n+        sci(__ret)\n     return __ret\n \n \n@@ -3045,7 +3077,7 @@ def grid(\n     axis: Literal[\"both\", \"x\", \"y\"] = \"both\",\n     **kwargs,\n ) -> None:\n-    return gca().grid(visible=visible, which=which, axis=axis, **kwargs)\n+    gca().grid(visible=visible, which=which, axis=axis, **kwargs)\n \n \n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@@ -3153,7 +3185,7 @@ def stairs(\n     edges: ArrayLike | None = None,\n     *,\n     orientation: Literal[\"vertical\", \"horizontal\"] = \"vertical\",\n-    baseline: float | ArrayLike = 0,\n+    baseline: float | ArrayLike | None = 0,\n     fill: bool = False,\n     data=None,\n     **kwargs,\n@@ -3281,7 +3313,7 @@ def legend(*args, **kwargs) -> Legend:\n def locator_params(\n     axis: Literal[\"both\", \"x\", \"y\"] = \"both\", tight: bool | None = None, **kwargs\n ) -> None:\n-    return gca().locator_params(axis=axis, tight=tight, **kwargs)\n+    gca().locator_params(axis=axis, tight=tight, **kwargs)\n \n \n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@@ -3331,13 +3363,13 @@ def margins(\n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n @_copy_docstring_and_deprecators(Axes.minorticks_off)\n def minorticks_off() -> None:\n-    return gca().minorticks_off()\n+    gca().minorticks_off()\n \n \n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n @_copy_docstring_and_deprecators(Axes.minorticks_on)\n def minorticks_on() -> None:\n-    return gca().minorticks_on()\n+    gca().minorticks_on()\n \n \n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@@ -3433,7 +3465,7 @@ def pie(\n     autopct: str | Callable[[float], str] | None = None,\n     pctdistance: float = 0.6,\n     shadow: bool = False,\n-    labeldistance: float = 1.1,\n+    labeldistance: float | None = 1.1,\n     startangle: float = 0,\n     radius: float = 1,\n     counterclock: bool = True,\n@@ -3446,7 +3478,7 @@ def pie(\n     normalize: bool = True,\n     hatch: str | Sequence[str] | None = None,\n     data=None,\n-):\n+) -> tuple[list[Wedge], list[Text]] | tuple[list[Wedge], list[Text], list[Text]]:\n     return gca().pie(\n         x,\n         explode=explode,\n@@ -3849,7 +3881,7 @@ def text(\n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n @_copy_docstring_and_deprecators(Axes.tick_params)\n def tick_params(axis: Literal[\"both\", \"x\", \"y\"] = \"both\", **kwargs) -> None:\n-    return gca().tick_params(axis=axis, **kwargs)\n+    gca().tick_params(axis=axis, **kwargs)\n \n \n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@@ -3863,7 +3895,7 @@ def ticklabel_format(\n     useLocale: bool | None = None,\n     useMathText: bool | None = None,\n ) -> None:\n-    return gca().ticklabel_format(\n+    gca().ticklabel_format(\n         axis=axis,\n         style=style,\n         scilimits=scilimits,\n@@ -3877,8 +3909,8 @@ def ticklabel_format(\n @_copy_docstring_and_deprecators(Axes.tricontour)\n def tricontour(*args, **kwargs):\n     __ret = gca().tricontour(*args, **kwargs)\n-    if __ret._A is not None:\n-        sci(__ret)  # noqa\n+    if __ret._A is not None:  # type: ignore[attr-defined]\n+        sci(__ret)\n     return __ret\n \n \n@@ -3886,8 +3918,8 @@ def tricontour(*args, **kwargs):\n @_copy_docstring_and_deprecators(Axes.tricontourf)\n def tricontourf(*args, **kwargs):\n     __ret = gca().tricontourf(*args, **kwargs)\n-    if __ret._A is not None:\n-        sci(__ret)  # noqa\n+    if __ret._A is not None:  # type: ignore[attr-defined]\n+        sci(__ret)\n     return __ret\n \n \n@@ -3935,7 +3967,7 @@ def violinplot(\n     showmeans: bool = False,\n     showextrema: bool = True,\n     showmedians: bool = False,\n-    quantiles: Sequence[float] | None = None,\n+    quantiles: Sequence[float | Sequence[float]] | None = None,\n     points: int = 100,\n     bw_method: Literal[\"scott\", \"silverman\"]\n     | float\n@@ -4012,7 +4044,7 @@ def xcorr(\n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n @_copy_docstring_and_deprecators(Axes._sci)\n def sci(im: ScalarMappable) -> None:\n-    return gca()._sci(im)\n+    gca()._sci(im)\n \n \n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n@@ -4062,13 +4094,13 @@ def ylabel(\n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n @_copy_docstring_and_deprecators(Axes.set_xscale)\n def xscale(value: str | ScaleBase, **kwargs) -> None:\n-    return gca().set_xscale(value, **kwargs)\n+    gca().set_xscale(value, **kwargs)\n \n \n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\n @_copy_docstring_and_deprecators(Axes.set_yscale)\n def yscale(value: str | ScaleBase, **kwargs) -> None:\n-    return gca().set_yscale(value, **kwargs)\n+    gca().set_yscale(value, **kwargs)\n \n \n # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.\ndiff --git a/lib/matplotlib/rcsetup.pyi b/lib/matplotlib/rcsetup.pyi\nindex 9c368d5224..8a8a9e71d6 100644\n--- a/lib/matplotlib/rcsetup.pyi\n+++ b/lib/matplotlib/rcsetup.pyi\n@@ -1,4 +1,3 @@\n-\n from cycler import Cycler\n \n from collections.abc import Callable, Iterable\n@@ -41,6 +40,9 @@ def validate_float(s: Any) -> float: ...\n def validate_float_or_None(s: Any) -> float | None: ...\n def validate_floatlist(s: Any) -> list[float]: ...\n def validate_fonttype(s: Any) -> int: ...\n+\n+_auto_backend_sentinel: object\n+\n def validate_backend(s: Any) -> str: ...\n def validate_color_or_inherit(s: Any) -> Literal[\"inherit\"] | ColorType: ...\n def validate_color_or_auto(s: Any) -> ColorType | Literal[\"auto\"]: ...\ndiff --git a/lib/matplotlib/tests/test_artist.py b/lib/matplotlib/tests/test_artist.py\nindex 9bfb4ebce1..dbb5dd2305 100644\n--- a/lib/matplotlib/tests/test_artist.py\n+++ b/lib/matplotlib/tests/test_artist.py\n@@ -23,8 +23,8 @@ def test_patch_transform_of_none():\n     # specifications\n \n     ax = plt.axes()\n-    ax.set_xlim([1, 3])\n-    ax.set_ylim([1, 3])\n+    ax.set_xlim(1, 3)\n+    ax.set_ylim(1, 3)\n \n     # Draw an ellipse over data coord (2, 2) by specifying device coords.\n     xy_data = (2, 2)\n@@ -65,8 +65,8 @@ def test_collection_transform_of_none():\n     # transform specifications\n \n     ax = plt.axes()\n-    ax.set_xlim([1, 3])\n-    ax.set_ylim([1, 3])\n+    ax.set_xlim(1, 3)\n+    ax.set_ylim(1, 3)\n \n     # draw an ellipse over data coord (2, 2) by specifying device coords\n     xy_data = (2, 2)\ndiff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 79c67a2083..baef9ac09a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2948,7 +2948,7 @@ def test_as_mpl_axes_api():\n     prj2.theta_offset = np.pi\n \n     # testing axes creation with plt.axes\n-    ax = plt.axes([0, 0, 1, 1], projection=prj)\n+    ax = plt.axes((0, 0, 1, 1), projection=prj)\n     assert type(ax) == PolarAxes\n     plt.close()\n \n@@ -3574,14 +3574,14 @@ def test_vert_violinplot_baseline():\n     np.random.seed(414213562)\n     data = [np.random.normal(size=100) for _ in range(4)]\n     ax = plt.axes()\n-    ax.violinplot(data, positions=range(4), showmeans=0, showextrema=0,\n-                  showmedians=0)\n+    ax.violinplot(data, positions=range(4), showmeans=False, showextrema=False,\n+                  showmedians=False)\n \n     # Reuse testcase from above for a labeled data test\n     data = {\"d\": data}\n     fig, ax = plt.subplots()\n-    ax.violinplot(\"d\", positions=range(4), showmeans=0, showextrema=0,\n-                  showmedians=0, data=data)\n+    ax.violinplot(\"d\", positions=range(4), showmeans=False, showextrema=False,\n+                  showmedians=False, data=data)\n \n \n @image_comparison(['violinplot_vert_showmeans.png'])\n@@ -3590,8 +3590,8 @@ def test_vert_violinplot_showmeans():\n     # First 9 digits of frac(sqrt(3))\n     np.random.seed(732050807)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), showmeans=1, showextrema=0,\n-                  showmedians=0)\n+    ax.violinplot(data, positions=range(4), showmeans=True, showextrema=False,\n+                  showmedians=False)\n \n \n @image_comparison(['violinplot_vert_showextrema.png'])\n@@ -3600,8 +3600,8 @@ def test_vert_violinplot_showextrema():\n     # First 9 digits of frac(sqrt(5))\n     np.random.seed(236067977)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), showmeans=0, showextrema=1,\n-                  showmedians=0)\n+    ax.violinplot(data, positions=range(4), showmeans=False, showextrema=True,\n+                  showmedians=False)\n \n \n @image_comparison(['violinplot_vert_showmedians.png'])\n@@ -3610,8 +3610,8 @@ def test_vert_violinplot_showmedians():\n     # First 9 digits of frac(sqrt(7))\n     np.random.seed(645751311)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), showmeans=0, showextrema=0,\n-                  showmedians=1)\n+    ax.violinplot(data, positions=range(4), showmeans=False, showextrema=False,\n+                  showmedians=True)\n \n \n @image_comparison(['violinplot_vert_showall.png'])\n@@ -3620,8 +3620,8 @@ def test_vert_violinplot_showall():\n     # First 9 digits of frac(sqrt(11))\n     np.random.seed(316624790)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), showmeans=1, showextrema=1,\n-                  showmedians=1,\n+    ax.violinplot(data, positions=range(4), showmeans=True, showextrema=True,\n+                  showmedians=True,\n                   quantiles=[[0.1, 0.9], [0.2, 0.8], [0.3, 0.7], [0.4, 0.6]])\n \n \n@@ -3631,8 +3631,8 @@ def test_vert_violinplot_custompoints_10():\n     # First 9 digits of frac(sqrt(13))\n     np.random.seed(605551275)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), showmeans=0, showextrema=0,\n-                  showmedians=0, points=10)\n+    ax.violinplot(data, positions=range(4), showmeans=False, showextrema=False,\n+                  showmedians=False, points=10)\n \n \n @image_comparison(['violinplot_vert_custompoints_200.png'])\n@@ -3641,8 +3641,8 @@ def test_vert_violinplot_custompoints_200():\n     # First 9 digits of frac(sqrt(17))\n     np.random.seed(123105625)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), showmeans=0, showextrema=0,\n-                  showmedians=0, points=200)\n+    ax.violinplot(data, positions=range(4), showmeans=False, showextrema=False,\n+                  showmedians=False, points=200)\n \n \n @image_comparison(['violinplot_horiz_baseline.png'])\n@@ -3651,8 +3651,8 @@ def test_horiz_violinplot_baseline():\n     # First 9 digits of frac(sqrt(19))\n     np.random.seed(358898943)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), vert=False, showmeans=0,\n-                  showextrema=0, showmedians=0)\n+    ax.violinplot(data, positions=range(4), vert=False, showmeans=False,\n+                  showextrema=False, showmedians=False)\n \n \n @image_comparison(['violinplot_horiz_showmedians.png'])\n@@ -3661,8 +3661,8 @@ def test_horiz_violinplot_showmedians():\n     # First 9 digits of frac(sqrt(23))\n     np.random.seed(795831523)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), vert=False, showmeans=0,\n-                  showextrema=0, showmedians=1)\n+    ax.violinplot(data, positions=range(4), vert=False, showmeans=False,\n+                  showextrema=False, showmedians=True)\n \n \n @image_comparison(['violinplot_horiz_showmeans.png'])\n@@ -3671,8 +3671,8 @@ def test_horiz_violinplot_showmeans():\n     # First 9 digits of frac(sqrt(29))\n     np.random.seed(385164807)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), vert=False, showmeans=1,\n-                  showextrema=0, showmedians=0)\n+    ax.violinplot(data, positions=range(4), vert=False, showmeans=True,\n+                  showextrema=False, showmedians=False)\n \n \n @image_comparison(['violinplot_horiz_showextrema.png'])\n@@ -3681,8 +3681,8 @@ def test_horiz_violinplot_showextrema():\n     # First 9 digits of frac(sqrt(31))\n     np.random.seed(567764362)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), vert=False, showmeans=0,\n-                  showextrema=1, showmedians=0)\n+    ax.violinplot(data, positions=range(4), vert=False, showmeans=False,\n+                  showextrema=True, showmedians=False)\n \n \n @image_comparison(['violinplot_horiz_showall.png'])\n@@ -3691,8 +3691,8 @@ def test_horiz_violinplot_showall():\n     # First 9 digits of frac(sqrt(37))\n     np.random.seed(82762530)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), vert=False, showmeans=1,\n-                  showextrema=1, showmedians=1,\n+    ax.violinplot(data, positions=range(4), vert=False, showmeans=True,\n+                  showextrema=True, showmedians=True,\n                   quantiles=[[0.1, 0.9], [0.2, 0.8], [0.3, 0.7], [0.4, 0.6]])\n \n \n@@ -3702,8 +3702,8 @@ def test_horiz_violinplot_custompoints_10():\n     # First 9 digits of frac(sqrt(41))\n     np.random.seed(403124237)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), vert=False, showmeans=0,\n-                  showextrema=0, showmedians=0, points=10)\n+    ax.violinplot(data, positions=range(4), vert=False, showmeans=False,\n+                  showextrema=False, showmedians=False, points=10)\n \n \n @image_comparison(['violinplot_horiz_custompoints_200.png'])\n@@ -3712,8 +3712,8 @@ def test_horiz_violinplot_custompoints_200():\n     # First 9 digits of frac(sqrt(43))\n     np.random.seed(557438524)\n     data = [np.random.normal(size=100) for _ in range(4)]\n-    ax.violinplot(data, positions=range(4), vert=False, showmeans=0,\n-                  showextrema=0, showmedians=0, points=200)\n+    ax.violinplot(data, positions=range(4), vert=False, showmeans=False,\n+                  showextrema=False, showmedians=False, points=200)\n \n \n def test_violinplot_bad_positions():\ndiff --git a/lib/matplotlib/tests/test_bbox_tight.py b/lib/matplotlib/tests/test_bbox_tight.py\nindex 7e0ad945b3..4d4624e13f 100644\n--- a/lib/matplotlib/tests/test_bbox_tight.py\n+++ b/lib/matplotlib/tests/test_bbox_tight.py\n@@ -92,8 +92,8 @@ def test_bbox_inches_tight_clipping():\n     # to generate an appropriately tight bbox\n     plt.scatter(np.arange(10), np.arange(10))\n     ax = plt.gca()\n-    ax.set_xlim([0, 5])\n-    ax.set_ylim([0, 5])\n+    ax.set_xlim(0, 5)\n+    ax.set_ylim(0, 5)\n \n     # make a massive rectangle and clip it with a path\n     patch = mpatches.Rectangle([-50, -50], 100, 100,\ndiff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex fd872bac98..b1af0abbc5 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -297,8 +297,8 @@ def test_patch_alpha_coloring():\n                                edgecolor=(0, 0, 1, 0.75))\n     ax.add_patch(patch)\n \n-    ax.set_xlim([-1, 2])\n-    ax.set_ylim([-1, 2])\n+    ax.set_xlim(-1, 2)\n+    ax.set_ylim(-1, 2)\n \n \n @image_comparison(['patch_alpha_override'], remove_text=True)\n@@ -329,8 +329,8 @@ def test_patch_alpha_override():\n                                edgecolor=(0, 0, 1, 0.75))\n     ax.add_patch(patch)\n \n-    ax.set_xlim([-1, 2])\n-    ax.set_ylim([-1, 2])\n+    ax.set_xlim(-1, 2)\n+    ax.set_ylim(-1, 2)\n \n \n @mpl.style.context('default')\n@@ -366,8 +366,8 @@ def test_patch_custom_linestyle():\n         facecolor=(1, 0, 0), edgecolor=(0, 0, 1))\n     ax.add_patch(patch)\n \n-    ax.set_xlim([-1, 2])\n-    ax.set_ylim([-1, 2])\n+    ax.set_xlim(-1, 2)\n+    ax.set_ylim(-1, 2)\n \n \n def test_patch_linestyle_accents():\n@@ -464,8 +464,8 @@ def test_wedge_range():\n \n         ax.add_artist(wedge)\n \n-    ax.set_xlim([-2, 8])\n-    ax.set_ylim([-2, 9])\n+    ax.set_xlim(-2, 8)\n+    ax.set_ylim(-2, 9)\n \n \n def test_patch_str():\ndiff --git a/lib/matplotlib/tests/test_patheffects.py b/lib/matplotlib/tests/test_patheffects.py\nindex 29ddedacac..32cce14178 100644\n--- a/lib/matplotlib/tests/test_patheffects.py\n+++ b/lib/matplotlib/tests/test_patheffects.py\n@@ -81,7 +81,7 @@ def test_patheffects_stroked_text():\n     ]\n     font_size = 50\n \n-    ax = plt.axes([0, 0, 1, 1])\n+    ax = plt.axes((0, 0, 1, 1))\n     for i, chunk in enumerate(text_chunks):\n         text = ax.text(x=0.01, y=(0.9 - i * 0.13), s=chunk,\n                        fontdict={'ha': 'left', 'va': 'center',\ndiff --git a/lib/matplotlib/tests/test_png.py b/lib/matplotlib/tests/test_png.py\nindex 646db60cd0..066eb01c3a 100644\n--- a/lib/matplotlib/tests/test_png.py\n+++ b/lib/matplotlib/tests/test_png.py\n@@ -20,7 +20,7 @@ def test_pngsuite():\n         if data.ndim == 2:\n             # keep grayscale images gray\n             cmap = cm.gray\n-        plt.imshow(data, extent=[i, i + 1, 0, 1], cmap=cmap)\n+        plt.imshow(data, extent=(i, i + 1, 0, 1), cmap=cmap)\n \n     plt.gca().patch.set_facecolor(\"#ddffff\")\n     plt.gca().set_xlim(0, len(files))\ndiff --git a/lib/matplotlib/tests/test_subplots.py b/lib/matplotlib/tests/test_subplots.py\nindex 462dc55d8a..e0a8257596 100644\n--- a/lib/matplotlib/tests/test_subplots.py\n+++ b/lib/matplotlib/tests/test_subplots.py\n@@ -123,7 +123,7 @@ def test_label_outer_span():\n \n \n def test_label_outer_non_gridspec():\n-    ax = plt.axes([0, 0, 1, 1])\n+    ax = plt.axes((0, 0, 1, 1))\n     ax.label_outer()  # Does nothing.\n     check_visible([ax], [True], [True])\n \ndiff --git a/lib/matplotlib/tests/test_text.py b/lib/matplotlib/tests/test_text.py\nindex 4215927f05..bd3a88fa61 100644\n--- a/lib/matplotlib/tests/test_text.py\n+++ b/lib/matplotlib/tests/test_text.py\n@@ -291,8 +291,8 @@ def test_alignment():\n     ax.plot([0, 1], [0.5, 0.5])\n     ax.plot([0, 1], [1.0, 1.0])\n \n-    ax.set_xlim([0, 1])\n-    ax.set_ylim([0, 1.5])\n+    ax.set_xlim(0, 1)\n+    ax.set_ylim(0, 1.5)\n     ax.set_xticks([])\n     ax.set_yticks([])\n \ndiff --git a/lib/matplotlib/transforms.pyi b/lib/matplotlib/transforms.pyi\nindex 6084a94017..6554d9d879 100644\n--- a/lib/matplotlib/transforms.pyi\n+++ b/lib/matplotlib/transforms.pyi\n@@ -26,7 +26,7 @@ class TransformNode:\n class BboxBase(TransformNode):\n     is_bbox: bool\n     is_affine: bool\n-    def frozen(self) -> TransformNode: ...\n+    def frozen(self) -> Bbox: ...\n     def __array__(self, *args, **kwargs): ...\n     @property\n     def x0(self) -> float: ...\ndiff --git a/requirements/testing/mypy.txt b/requirements/testing/mypy.txt\nindex c5f68c57bc..707965be5a 100644\n--- a/requirements/testing/mypy.txt\n+++ b/requirements/testing/mypy.txt\n@@ -1,6 +1,7 @@\n # Extra pip requirements for the GitHub Actions mypy build\n \n mypy==1.1.1\n+typing-extensions\n \n # Extra stubs distributed separately from the main pypi package\n pandas-stubs\ndiff --git a/tools/boilerplate.py b/tools/boilerplate.py\nindex e3b4809d96..bcb41bc206 100644\n--- a/tools/boilerplate.py\n+++ b/tools/boilerplate.py\n@@ -73,13 +73,13 @@ def {name}{signature}:\n AXES_METHOD_TEMPLATE = AUTOGEN_MSG + \"\"\"\n @_copy_docstring_and_deprecators(Axes.{called_name})\n def {name}{signature}:\n-    return gca().{called_name}{call}\n+    {return_statement}gca().{called_name}{call}\n \"\"\"\n \n FIGURE_METHOD_TEMPLATE = AUTOGEN_MSG + \"\"\"\n @_copy_docstring_and_deprecators(Figure.{called_name})\n def {name}{signature}:\n-    return gcf().{called_name}{call}\n+    {return_statement}gcf().{called_name}{call}\n \"\"\"\n \n CMAP_TEMPLATE = '''\n@@ -169,6 +169,7 @@ def generate_function(name, called_fullname, template, **kwargs):\n \n     # Replace self argument.\n     params = list(signature.parameters.values())[1:]\n+    has_return_value = str(signature.return_annotation) != 'None'\n     signature = str(signature.replace(parameters=[\n         param.replace(default=value_formatter(param.default))\n         if param.default is not param.empty else param\n@@ -197,6 +198,7 @@ def generate_function(name, called_fullname, template, **kwargs):\n            if param.kind is Parameter.VAR_KEYWORD else\n            None).format(param.name)\n        for param in params) + ')'\n+    return_statement = 'return ' if has_return_value else ''\n     # Bail out in case of name collision.\n     for reserved in ('gca', 'gci', 'gcf', '__ret'):\n         if reserved in params:\n@@ -208,6 +210,7 @@ def generate_function(name, called_fullname, template, **kwargs):\n         called_name=called_name,\n         signature=signature,\n         call=call,\n+        return_statement=return_statement,\n         **kwargs)\n \n \n@@ -309,8 +312,14 @@ def boilerplate_gen():\n     )\n \n     cmappable = {\n-        'contour': 'if __ret._A is not None: sci(__ret)  # noqa',\n-        'contourf': 'if __ret._A is not None: sci(__ret)  # noqa',\n+        'contour': (\n+            'if __ret._A is not None:  # type: ignore[attr-defined]\\n'\n+            '        sci(__ret)'\n+        ),\n+        'contourf': (\n+            'if __ret._A is not None:  # type: ignore[attr-defined]\\n'\n+            '        sci(__ret)'\n+        ),\n         'hexbin': 'sci(__ret)',\n         'scatter': 'sci(__ret)',\n         'pcolor': 'sci(__ret)',\n@@ -321,8 +330,14 @@ def boilerplate_gen():\n         'quiver': 'sci(__ret)',\n         'specgram': 'sci(__ret[-1])',\n         'streamplot': 'sci(__ret.lines)',\n-        'tricontour': 'if __ret._A is not None: sci(__ret)  # noqa',\n-        'tricontourf': 'if __ret._A is not None: sci(__ret)  # noqa',\n+        'tricontour': (\n+            'if __ret._A is not None:  # type: ignore[attr-defined]\\n'\n+            '        sci(__ret)'\n+        ),\n+        'tricontourf': (\n+            'if __ret._A is not None:  # type: ignore[attr-defined]\\n'\n+            '        sci(__ret)'\n+        ),\n         'tripcolor': 'sci(__ret)',\n     }\n \ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..782d8c4acc 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1241,11 +1241,13 @@ class Axis(martist.Artist):\n             self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n-                if other is not self.axes:\n-                    other._axis_map[name]._set_lim(\n-                        v0, v1, emit=False, auto=auto)\n-                    if other.figure != self.figure:\n-                        other.figure.canvas.draw_idle()\n+                if other is self.axes:\n+                    continue\n+                other._axis_map[name]._set_lim(v0, v1, emit=False, auto=auto)\n+                if emit:\n+                    other.callbacks.process(f\"{name}lim_changed\", other)\n+                if other.figure != self.figure:\n+                    other.figure.canvas.draw_idle()\n \n         self.stale = True\n         return v0, v1\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (1.3.0)\nRequirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (4.54.1)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (1.4.7)\nRequirement already satisfied: numpy>=1.21 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (1.23.0)\nRequirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (23.1)\nRequirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (10.4.0)\nRequirement already satisfied: pyparsing<3.1,>=2.3.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (3.0.9)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (2.8.2)\nRequirement already satisfied: setuptools-scm>=7 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (8.1.0)\nRequirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (1.16.0)\nRequirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from setuptools-scm>=7->matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (68.0.0)\nRequirement already satisfied: tomli>=1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from setuptools-scm>=7->matplotlib==3.8.0.dev1620+g00afcc0c6d.d20220101) (2.0.2)\nBuilding wheels for collected packages: matplotlib\n  Building editable for matplotlib (pyproject.toml): started\n  Building editable for matplotlib (pyproject.toml): finished with status 'done'\n  Created wheel for matplotlib: filename=matplotlib-3.8.0.dev1620+g00afcc0c6d.d20220101-0.editable-cp310-cp310-linux_x86_64.whl size=21949 sha256=eba3b394b6c8ae666520f35ad37ed97a7ae20cd285491197bb9c60bd0cec0cf9\n  Stored in directory: /tmp/pip-ephem-wheel-cache-dr53xkat/wheels/0d/a6/cb/465a7b303d624cc531250fa27c75d038ddc29430bdb6ba7c9f\nSuccessfully built matplotlib\nInstalling collected packages: matplotlib\n  Attempting uninstall: matplotlib\n    Found existing installation: matplotlib 3.8.0.dev1620+g00afcc0c6d\n    Uninstalling matplotlib-3.8.0.dev1620+g00afcc0c6d:\n      Successfully uninstalled matplotlib-3.8.0.dev1620+g00afcc0c6d\nSuccessfully installed matplotlib-3.8.0.dev1620+g00afcc0c6d.d20220101\n============================= test session starts ==============================\nplatform linux -- Python 3.10.15, pytest-7.4.0, pluggy-1.5.0\nrootdir: /testbed\nconfigfile: pytest.ini\nplugins: hypothesis-6.112.4, cov-5.0.0, env-1.1.5, xdist-3.6.1\ncollected 884 items\n\nlib/matplotlib/tests/test_axes.py .....s..s..s........s....s............ [  4%]\n.s.........s..........s......s..s..........s.....s..s...s........s..s..s [ 12%]\n.....s.................s...s...s..s..s..s..s..s..s..s................... [ 20%]\n..s........s................................s..s..s..s...s.............. [ 28%]\n............................................................s..s........ [ 36%]\n......................s......s................................s....s...s [ 45%]\n.......s......s..s....s.......s..s..s...........s.....s..s..s....s..s... [ 53%]\n...................s..s..s..s..s..........s..s.......................... [ 61%]\n........................s..s............................................ [ 69%]\n........................................................s............... [ 77%]\n........................................................................ [ 85%]\n........................................................................ [ 93%]\n........s.............................................                   [100%]\n\n==================================== PASSES ====================================\n_________________ test_centered_bar_label_label_beyond_limits __________________\n------------------------------ Captured log call -------------------------------\nWARNING  matplotlib.text:text.py:757 posx and posy should be finite values\n=========================== short test summary info ============================\nPASSED lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_get_labels\nPASSED lib/matplotlib/tests/test_axes.py::test_repr\nPASSED lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_label_shift\nPASSED lib/matplotlib/tests/test_axes.py::test_acorr[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_acorr_integers[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_spy[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs\nPASSED lib/matplotlib/tests/test_axes.py::test_matshow[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter\nPASSED lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_twinx_cla\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_units[x]\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_units[y]\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]\nPASSED lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting\nPASSED lib/matplotlib/tests/test_axes.py::test_inverted_cla\nPASSED lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla\nPASSED lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally\nPASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_autoscale_tight\nPASSED lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared\nPASSED lib/matplotlib/tests/test_axes.py::test_use_sticky_edges\nPASSED lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_nargs_stem\nPASSED lib/matplotlib/tests/test_axes.py::test_nargs_legend\nPASSED lib/matplotlib/tests/test_axes.py::test_nargs_pcolorfast\nPASSED lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_arrow_empty\nPASSED lib/matplotlib/tests/test_axes.py::test_arrow_in_view\nPASSED lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow\nPASSED lib/matplotlib/tests/test_axes.py::test_annotate_signature\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_units[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_single_point[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_single_point[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_single_date[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_shaped_data[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_structured_data\nPASSED lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hexbin_pickable\nPASSED lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim\nPASSED lib/matplotlib/tests/test_axes.py::test_hexbin_mincnt_behavior_upon_C_parameter[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_inverted_limits\nPASSED lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]\nPASSED lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]\nPASSED lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]\nPASSED lib/matplotlib/tests/test_axes.py::test_imshow[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_imshow[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax\nPASSED lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_symlog[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh_rgba[png-3-1]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh_rgba[png-4-0.5]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorargs\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorargs_with_read_only\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorflaterror\nPASSED lib/matplotlib/tests/test_axes.py::test_samesizepcolorflaterror\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]\nPASSED lib/matplotlib/tests/test_axes.py::test_canonical[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_canonical[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_arc_angles[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_line[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_marker_edges[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_nan_bar_values\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha\nPASSED lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_timedelta\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_datetime_start\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolor_regression\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_pandas\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_labels_length\nPASSED lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_log[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_float16\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_density[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_update[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_empty\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_options[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist2d[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist2d_density\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths\nPASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_singular_plural_arguments\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]\nPASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error\nPASSED lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api\nPASSED lib/matplotlib/tests/test_axes.py::test_pyplot_axes\nPASSED lib/matplotlib/tests/test_axes.py::test_log_scales\nPASSED lib/matplotlib/tests/test_axes.py::test_log_scales_no_data\nPASSED lib/matplotlib/tests/test_axes.py::test_log_scales_invalid\nPASSED lib/matplotlib/tests/test_axes.py::test_stackplot[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_zorder\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions\nPASSED lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths\nPASSED lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles\nPASSED lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles\nPASSED lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_manage_xticks\nPASSED lib/matplotlib/tests/test_axes.py::test_boxplot_not_single\nPASSED lib/matplotlib/tests/test_axes.py::test_tick_space_size_0\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_mixed_errorbar_polar_caps[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_shape\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid\nPASSED lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_offset[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_step[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_stem[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_stem_args\nPASSED lib/matplotlib/tests/test_axes.py::test_stem_markerfmt\nPASSED lib/matplotlib/tests/test_axes.py::test_stem_dates\nPASSED lib/matplotlib/tests/test_axes.py::test_stem_orientation[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_step_geometry\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_emptydata\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_labels\nPASSED lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure\nPASSED lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure\nPASSED lib/matplotlib/tests/test_axes.py::test_alpha[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_alpha[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_alpha\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_empty_eventplot\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_marker_styles[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_axline[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_axline[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_axline_args\nPASSED lib/matplotlib/tests/test_axes.py::test_vlines[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_vlines_default\nPASSED lib/matplotlib/tests/test_axes.py::test_hlines[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_hlines_default\nPASSED lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]\nPASSED lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]\nPASSED lib/matplotlib/tests/test_axes.py::test_vlines_hlines_blended_transform[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_subplot_key_hash\nPASSED lib/matplotlib/tests/test_axes.py::test_specgram[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_specgram_fs_none\nPASSED lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg\nPASSED lib/matplotlib/tests/test_axes.py::test_psd_csd[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_spectrum[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_remove[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_spines[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]\nPASSED lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]\nPASSED lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]\nPASSED lib/matplotlib/tests/test_axes.py::test_grid\nPASSED lib/matplotlib/tests/test_axes.py::test_reset_grid\nPASSED lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_vline_limit\nPASSED lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]\nPASSED lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]\nPASSED lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots\nPASSED lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1\nPASSED lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2\nPASSED lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3\nPASSED lib/matplotlib/tests/test_axes.py::test_shared_aspect_error\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\(\\\\) takes from 0 to 1 positional arguments but 2 were given]\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized string 'foo' to axis; try 'on' or 'off']\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-The first argument to axis*]\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\(\\\\) got an unexpected keyword argument 'foo']\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_method_errors\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]\nPASSED lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]\nPASSED lib/matplotlib/tests/test_axes.py::test_relim_visible_only\nPASSED lib/matplotlib/tests/test_axes.py::test_text_labelsize\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_default[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_shadow[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_textprops\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values\nPASSED lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_set_ticks_kwargs_raise_error_without_labels\nPASSED lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_xticks_bad_args\nPASSED lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels\nPASSED lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels\nPASSED lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc\nPASSED lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_tick_label_update\nPASSED lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_margins\nPASSED lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits\nPASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin must be greater than -0\\\\.5]\nPASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin must be greater than -0\\\\.5]\nPASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin must be greater than -0\\\\.5]\nPASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin must be greater than -0\\\\.5]\nPASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot pass both positional and keyword arguments for x and/or y]\nPASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot pass both positional and keyword arguments for x and/or y]\nPASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must pass a single positional argument]\nPASSED lib/matplotlib/tests/test_axes.py::test_length_one_hist\nPASSED lib/matplotlib/tests/test_axes.py::test_set_xy_bound\nPASSED lib/matplotlib/tests/test_axes.py::test_pathological_hexbin\nPASSED lib/matplotlib/tests/test_axes.py::test_color_None\nPASSED lib/matplotlib/tests/test_axes.py::test_color_alias\nPASSED lib/matplotlib/tests/test_axes.py::test_numerical_hist_label\nPASSED lib/matplotlib/tests/test_axes.py::test_unicode_hist_label\nPASSED lib/matplotlib/tests/test_axes.py::test_move_offsetlabel\nPASSED lib/matplotlib/tests/test_axes.py::test_rc_spines[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_rc_grid[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_rc_tick\nPASSED lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick\nPASSED lib/matplotlib/tests/test_axes.py::test_square_plot\nPASSED lib/matplotlib/tests/test_axes.py::test_bad_plot_args\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]\nPASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]\nPASSED lib/matplotlib/tests/test_axes.py::test_shared_scale\nPASSED lib/matplotlib/tests/test_axes.py::test_shared_bool\nPASSED lib/matplotlib/tests/test_axes.py::test_violin_point_mass\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]\nPASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]\nPASSED lib/matplotlib/tests/test_axes.py::test_dash_offset[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_title_pad\nPASSED lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip\nPASSED lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]\nPASSED lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]\nPASSED lib/matplotlib/tests/test_axes.py::test_loglog[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_axes_margins\nPASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]\nPASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]\nPASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]\nPASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]\nPASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]\nPASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]\nPASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]\nPASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]\nPASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim\nPASSED lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale\nPASSED lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect\nPASSED lib/matplotlib/tests/test_axes.py::test_auto_numticks\nPASSED lib/matplotlib/tests/test_axes.py::test_auto_numticks_log\nPASSED lib/matplotlib/tests/test_axes.py::test_broken_barh_empty\nPASSED lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta\nPASSED lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh\nPASSED lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates\nPASSED lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing\nPASSED lib/matplotlib/tests/test_axes.py::test_pandas_index_shape\nPASSED lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist\nPASSED lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_get_tick_params\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor\nPASSED lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines\nPASSED lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside\nPASSED lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside\nPASSED lib/matplotlib/tests/test_axes.py::test_none_kwargs\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_uint8\nPASSED lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_axisbelow[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_titletwiny\nPASSED lib/matplotlib/tests/test_axes.py::test_titlesetpos\nPASSED lib/matplotlib/tests/test_axes.py::test_title_xticks_top\nPASSED lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both\nPASSED lib/matplotlib/tests/test_axes.py::test_title_above_offset[left title moved]\nPASSED lib/matplotlib/tests/test_axes.py::test_title_above_offset[center title kept]\nPASSED lib/matplotlib/tests/test_axes.py::test_title_above_offset[both titles aligned]\nPASSED lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page\nPASSED lib/matplotlib/tests/test_axes.py::test_offset_label_color\nPASSED lib/matplotlib/tests/test_axes.py::test_offset_text_visible\nPASSED lib/matplotlib/tests/test_axes.py::test_large_offset\nPASSED lib/matplotlib/tests/test_axes.py::test_barb_units\nPASSED lib/matplotlib/tests/test_axes.py::test_quiver_units\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_color_cycle\nPASSED lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation\nPASSED lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle\nPASSED lib/matplotlib/tests/test_axes.py::test_log_margins\nPASSED lib/matplotlib/tests/test_axes.py::test_color_length_mismatch\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_legend\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args0-kwargs0-lineoffsets cannot be empty]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args1-kwargs1-linelengths cannot be empty]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args2-kwargs2-linewidths cannot be empty]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args3-kwargs3-linestyles cannot be empty]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args4-kwargs4-alpha cannot be empty]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args5-kwargs5-positions must be one-dimensional]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args6-kwargs6-lineoffsets and positions are unequal sized sequences]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args7-kwargs7-linelengths and positions are unequal sized sequences]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args8-kwargs8-linewidths and positions are unequal sized sequences]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args9-kwargs9-linestyles and positions are unequal sized sequences]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args10-kwargs10-alpha and positions are unequal sized sequences]\nPASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args11-kwargs11-colors and positions are unequal sized sequences]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args\nPASSED lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits\nPASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]\nPASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]\nPASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]\nPASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]\nPASSED lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits\nPASSED lib/matplotlib/tests/test_axes.py::test_zero_linewidth\nPASSED lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox\nPASSED lib/matplotlib/tests/test_axes.py::test_inset\nPASSED lib/matplotlib/tests/test_axes.py::test_zoom_inset\nPASSED lib/matplotlib/tests/test_axes.py::test_inset_polar[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_inset_projection\nPASSED lib/matplotlib/tests/test_axes.py::test_inset_subclass\nPASSED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]\nPASSED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]\nPASSED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]\nPASSED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]\nPASSED lib/matplotlib/tests/test_axes.py::test_set_position\nPASSED lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom\nPASSED lib/matplotlib/tests/test_axes.py::test_limits_after_scroll_zoom\nPASSED lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan\nPASSED lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index\nPASSED lib/matplotlib/tests/test_axes.py::test_scatter_empty_data\nPASSED lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_secondary_fail\nPASSED lib/matplotlib/tests/test_axes.py::test_secondary_resize\nPASSED lib/matplotlib/tests/test_axes.py::test_secondary_minorloc\nPASSED lib/matplotlib/tests/test_axes.py::test_secondary_formatter\nPASSED lib/matplotlib/tests/test_axes.py::test_secondary_repr\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_options[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_normal_axes\nPASSED lib/matplotlib/tests/test_axes.py::test_nodecorator\nPASSED lib/matplotlib/tests/test_axes.py::test_displaced_spine\nPASSED lib/matplotlib/tests/test_axes.py::test_tickdirs\nPASSED lib/matplotlib/tests/test_axes.py::test_minor_accountedfor\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_extent_arg\nPASSED lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_auto_bins\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_nan_data\nPASSED lib/matplotlib/tests/test_axes.py::test_hist_range_and_density\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder\nPASSED lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted\nPASSED lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box\nPASSED lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim\nPASSED lib/matplotlib/tests/test_axes.py::test_box_aspect\nPASSED lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position\nPASSED lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init\nPASSED lib/matplotlib/tests/test_axes.py::test_set_aspect_negative\nPASSED lib/matplotlib/tests/test_axes.py::test_redraw_in_frame\nPASSED lib/matplotlib/tests/test_axes.py::test_invisible_axes_events\nPASSED lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor\nPASSED lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor\nPASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]\nPASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]\nPASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]\nPASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]\nPASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]\nPASSED lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]\nPASSED lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky\nPASSED lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor\nPASSED lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor\nPASSED lib/matplotlib/tests/test_axes.py::test_xaxis_offsetText_color\nPASSED lib/matplotlib/tests/test_axes.py::test_yaxis_offsetText_color\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]\nPASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]\nPASSED lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale\nPASSED lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions\nPASSED lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]\nPASSED lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_shared_axes_retick\nPASSED lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]\nPASSED lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]\nPASSED lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_center\nPASSED lib/matplotlib/tests/test_axes.py::test_centered_bar_label_label_beyond_limits\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_labels\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted\nPASSED lib/matplotlib/tests/test_axes.py::test_nan_barlabels\nPASSED lib/matplotlib/tests/test_axes.py::test_patch_bounds\nPASSED lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs\nPASSED lib/matplotlib/tests/test_axes.py::test_artist_sublists\nPASSED lib/matplotlib/tests/test_axes.py::test_empty_line_plots\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f' is not a valid format string \\\\(unrecognized character 'f'\\\\)]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\+' is not a valid format string \\\\(two marker symbols\\\\)]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-' is not a valid format string \\\\(two linestyle symbols\\\\)]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk' is not a valid format string \\\\(two color symbols\\\\)]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r' is not a valid format string \\\\(two linestyle symbols\\\\)]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f' is not a valid format string \\\\(unrecognized character 'f'\\\\)]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\+' is not a valid format string \\\\(two marker symbols\\\\)]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-' is not a valid format string \\\\(two linestyle symbols\\\\)]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk' is not a valid format string \\\\(two color symbols\\\\)]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r' is not a valid format string \\\\(two linestyle symbols\\\\)]\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_format\nPASSED lib/matplotlib/tests/test_axes.py::test_automatic_legend\nPASSED lib/matplotlib/tests/test_axes.py::test_plot_errors\nPASSED lib/matplotlib/tests/test_axes.py::test_clim\nPASSED lib/matplotlib/tests/test_axes.py::test_bezier_autoscale\nPASSED lib/matplotlib/tests/test_axes.py::test_small_autoscale\nPASSED lib/matplotlib/tests/test_axes.py::test_get_xticklabel\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_leading_nan\nPASSED lib/matplotlib/tests/test_axes.py::test_bar_all_nan[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_extent_units[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_cla_clears_children_axes_and_fig\nPASSED lib/matplotlib/tests/test_axes.py::test_scatter_color_repr_error\nPASSED lib/matplotlib/tests/test_axes.py::test_zorder_and_explicit_rasterization\nPASSED lib/matplotlib/tests/test_axes.py::test_preset_clip_paths[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_rc_axes_label_formatting\nPASSED lib/matplotlib/tests/test_axes.py::test_ecdf[png]\nPASSED lib/matplotlib/tests/test_axes.py::test_ecdf_invalid\nPASSED lib/matplotlib/tests/test_axes.py::test_fill_between_axes_limits\nPASSED lib/matplotlib/tests/test_axes.py::test_tick_param_labelfont\nPASSED lib/matplotlib/tests/test_axes.py::test_set_secondary_axis_color\nPASSED lib/matplotlib/tests/test_axes.py::test_xylim_changed_shared\nSKIPPED [12] lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png\nSKIPPED [54] ../opt/miniconda3/envs/testbed/lib/python3.10/contextlib.py:79: Cannot compare svg files because Inkscape is not installed\n================== 818 passed, 66 skipped in 95.51s (0:01:35) ==================\n", {"lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_get_labels": "PASSED", "lib/matplotlib/tests/test_axes.py::test_repr": "PASSED", "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_label_shift": "PASSED", "lib/matplotlib/tests/test_axes.py::test_acorr[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_acorr_integers[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_spy[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs": "PASSED", "lib/matplotlib/tests/test_axes.py::test_matshow[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter": "PASSED", "lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twinx_cla": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_units[x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_units[y]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting": "PASSED", "lib/matplotlib/tests/test_axes.py::test_inverted_cla": "PASSED", "lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla": "PASSED", "lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally": "PASSED", "lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_autoscale_tight": "PASSED", "lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared": "PASSED", "lib/matplotlib/tests/test_axes.py::test_use_sticky_edges": "PASSED", "lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_nargs_stem": "PASSED", "lib/matplotlib/tests/test_axes.py::test_nargs_legend": "PASSED", "lib/matplotlib/tests/test_axes.py::test_nargs_pcolorfast": "PASSED", "lib/matplotlib/tests/test_axes.py::test_basic_annotate[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_arrow_simple[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_arrow_empty": "PASSED", "lib/matplotlib/tests/test_axes.py::test_arrow_in_view": "PASSED", "lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow": "PASSED", "lib/matplotlib/tests/test_axes.py::test_annotate_signature": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_units[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_single_point[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_single_point[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_single_date[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_shaped_data[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_structured_data": "PASSED", "lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hexbin_pickable": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hexbin_log[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hexbin_mincnt_behavior_upon_C_parameter[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_inverted_limits": "PASSED", "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_imshow[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_imshow[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_imshow_clip[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax": "PASSED", "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_symlog[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_symlog2[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolormesh[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolormesh_rgba[png-3-1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolormesh_rgba[png-4-0.5]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorargs": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorargs_with_read_only": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolornearest[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorflaterror": "PASSED", "lib/matplotlib/tests/test_axes.py::test_samesizepcolorflaterror": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_canonical[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_canonical[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_arc_angles[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_line[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_polar[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_marker_edges[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_nan_bar_values": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha": "PASSED", "lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_timedelta": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_datetime_start": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolor_regression": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_pandas": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_hatches[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_labels_length": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_log[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_log[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_log_2[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_float16": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_density[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_fill[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_update[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_empty": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_options[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_contour_hatching[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist2d[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist2d[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist2d_density": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths": "PASSED", "lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_singular_plural_arguments": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error": "PASSED", "lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pyplot_axes": "PASSED", "lib/matplotlib/tests/test_axes.py::test_log_scales": "PASSED", "lib/matplotlib/tests/test_axes.py::test_log_scales_no_data": "PASSED", "lib/matplotlib/tests/test_axes.py::test_log_scales_invalid": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stackplot[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stackplot[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_zorder": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions": "PASSED", "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths": "PASSED", "lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles": "PASSED", "lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles": "PASSED", "lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_manage_xticks": "PASSED", "lib/matplotlib/tests/test_axes.py::test_boxplot_not_single": "PASSED", "lib/matplotlib/tests/test_axes.py::test_tick_space_size_0": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_mixed_errorbar_polar_caps[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_shape": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid": "PASSED", "lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_every[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_offset[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_step[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stem[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stem_args": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stem_markerfmt": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stem_dates": "PASSED", "lib/matplotlib/tests/test_axes.py::test_stem_orientation[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_step_geometry": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_emptydata": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_labels": "PASSED", "lib/matplotlib/tests/test_axes.py::test_transparent_markers[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_rgba_markers[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure": "PASSED", "lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure": "PASSED", "lib/matplotlib/tests/test_axes.py::test_alpha[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_alpha[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_alpha": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_empty_eventplot": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_marker_styles[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vertex_markers[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline_loglog[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline_args": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vlines[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vlines_default": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hlines[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hlines_default": "PASSED", "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vlines_hlines_blended_transform[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_step_linestyle[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_mixed_collection[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_subplot_key_hash": "PASSED", "lib/matplotlib/tests/test_axes.py::test_specgram[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_specgram_angle[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_specgram_fs_none": "PASSED", "lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg": "PASSED", "lib/matplotlib/tests/test_axes.py::test_psd_csd[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_spectrum[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_remove[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_spines[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_grid": "PASSED", "lib/matplotlib/tests/test_axes.py::test_reset_grid": "PASSED", "lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_vline_limit": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots": "PASSED", "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1": "PASSED", "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2": "PASSED", "lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3": "PASSED", "lib/matplotlib/tests/test_axes.py::test_shared_aspect_error": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\\\(\\\\)": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-The": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\\\(\\\\)": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_method_errors": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relim_visible_only": "PASSED", "lib/matplotlib/tests/test_axes.py::test_text_labelsize": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_default[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_shadow[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_textprops": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values": "PASSED", "lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_set_ticks_kwargs_raise_error_without_labels": "PASSED", "lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_xticks_bad_args": "PASSED", "lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels": "PASSED", "lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels": "PASSED", "lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc": "PASSED", "lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_tick_label_update": "PASSED", "lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_margins": "PASSED", "lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits": "PASSED", "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin": "PASSED", "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin": "PASSED", "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin": "PASSED", "lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin": "PASSED", "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot": "PASSED", "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot": "PASSED", "lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must": "PASSED", "lib/matplotlib/tests/test_axes.py::test_length_one_hist": "PASSED", "lib/matplotlib/tests/test_axes.py::test_set_xy_bound": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pathological_hexbin": "PASSED", "lib/matplotlib/tests/test_axes.py::test_color_None": "PASSED", "lib/matplotlib/tests/test_axes.py::test_color_alias": "PASSED", "lib/matplotlib/tests/test_axes.py::test_numerical_hist_label": "PASSED", "lib/matplotlib/tests/test_axes.py::test_unicode_hist_label": "PASSED", "lib/matplotlib/tests/test_axes.py::test_move_offsetlabel": "PASSED", "lib/matplotlib/tests/test_axes.py::test_rc_spines[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_rc_grid[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_rc_tick": "PASSED", "lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick": "PASSED", "lib/matplotlib/tests/test_axes.py::test_square_plot": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bad_plot_args": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_shared_scale": "PASSED", "lib/matplotlib/tests/test_axes.py::test_shared_bool": "PASSED", "lib/matplotlib/tests/test_axes.py::test_violin_point_mass": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_dash_offset[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_title_pad": "PASSED", "lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip": "PASSED", "lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_loglog[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axes_margins": "PASSED", "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim": "PASSED", "lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale": "PASSED", "lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect": "PASSED", "lib/matplotlib/tests/test_axes.py::test_auto_numticks": "PASSED", "lib/matplotlib/tests/test_axes.py::test_auto_numticks_log": "PASSED", "lib/matplotlib/tests/test_axes.py::test_broken_barh_empty": "PASSED", "lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pandas_index_shape": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist": "PASSED", "lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_get_tick_params": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside": "PASSED", "lib/matplotlib/tests/test_axes.py::test_none_kwargs": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_uint8": "PASSED", "lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axisbelow[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_titletwiny": "PASSED", "lib/matplotlib/tests/test_axes.py::test_titlesetpos": "PASSED", "lib/matplotlib/tests/test_axes.py::test_title_xticks_top": "PASSED", "lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both": "PASSED", "lib/matplotlib/tests/test_axes.py::test_title_above_offset[left": "PASSED", "lib/matplotlib/tests/test_axes.py::test_title_above_offset[center": "PASSED", "lib/matplotlib/tests/test_axes.py::test_title_above_offset[both": "PASSED", "lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page": "PASSED", "lib/matplotlib/tests/test_axes.py::test_offset_label_color": "PASSED", "lib/matplotlib/tests/test_axes.py::test_offset_text_visible": "PASSED", "lib/matplotlib/tests/test_axes.py::test_large_offset": "PASSED", "lib/matplotlib/tests/test_axes.py::test_barb_units": "PASSED", "lib/matplotlib/tests/test_axes.py::test_quiver_units": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_color_cycle": "PASSED", "lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle": "PASSED", "lib/matplotlib/tests/test_axes.py::test_log_margins": "PASSED", "lib/matplotlib/tests/test_axes.py::test_color_length_mismatch": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_legend": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args0-kwargs0-lineoffsets": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args1-kwargs1-linelengths": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args2-kwargs2-linewidths": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args3-kwargs3-linestyles": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args4-kwargs4-alpha": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args5-kwargs5-positions": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args6-kwargs6-lineoffsets": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args7-kwargs7-linelengths": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args8-kwargs8-linewidths": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args9-kwargs9-linestyles": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args10-kwargs10-alpha": "PASSED", "lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args11-kwargs11-colors": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args": "PASSED", "lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits": "PASSED", "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits": "PASSED", "lib/matplotlib/tests/test_axes.py::test_zero_linewidth": "PASSED", "lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_decimal[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox": "PASSED", "lib/matplotlib/tests/test_axes.py::test_inset": "PASSED", "lib/matplotlib/tests/test_axes.py::test_zoom_inset": "PASSED", "lib/matplotlib/tests/test_axes.py::test_inset_polar[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_inset_projection": "PASSED", "lib/matplotlib/tests/test_axes.py::test_inset_subclass": "PASSED", "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_set_position": "PASSED", "lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom": "PASSED", "lib/matplotlib/tests/test_axes.py::test_limits_after_scroll_zoom": "PASSED", "lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan": "PASSED", "lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index": "PASSED", "lib/matplotlib/tests/test_axes.py::test_scatter_empty_data": "PASSED", "lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_secondary_xy[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_secondary_fail": "PASSED", "lib/matplotlib/tests/test_axes.py::test_secondary_resize": "PASSED", "lib/matplotlib/tests/test_axes.py::test_secondary_minorloc": "PASSED", "lib/matplotlib/tests/test_axes.py::test_secondary_formatter": "PASSED", "lib/matplotlib/tests/test_axes.py::test_secondary_repr": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_options[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_normal_axes": "PASSED", "lib/matplotlib/tests/test_axes.py::test_nodecorator": "PASSED", "lib/matplotlib/tests/test_axes.py::test_displaced_spine": "PASSED", "lib/matplotlib/tests/test_axes.py::test_tickdirs": "PASSED", "lib/matplotlib/tests/test_axes.py::test_minor_accountedfor": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg": "PASSED", "lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_auto_bins": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_nan_data": "PASSED", "lib/matplotlib/tests/test_axes.py::test_hist_range_and_density": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder": "PASSED", "lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted": "PASSED", "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box": "PASSED", "lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim": "PASSED", "lib/matplotlib/tests/test_axes.py::test_box_aspect": "PASSED", "lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init": "PASSED", "lib/matplotlib/tests/test_axes.py::test_set_aspect_negative": "PASSED", "lib/matplotlib/tests/test_axes.py::test_redraw_in_frame": "PASSED", "lib/matplotlib/tests/test_axes.py::test_invisible_axes_events": "PASSED", "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor": "PASSED", "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor": "PASSED", "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky": "PASSED", "lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor": "PASSED", "lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor": "PASSED", "lib/matplotlib/tests/test_axes.py::test_xaxis_offsetText_color": "PASSED", "lib/matplotlib/tests/test_axes.py::test_yaxis_offsetText_color": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale": "PASSED", "lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions": "PASSED", "lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_shared_axes_retick": "PASSED", "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_location_center": "PASSED", "lib/matplotlib/tests/test_axes.py::test_centered_bar_label_label_beyond_limits": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_labels": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted": "PASSED", "lib/matplotlib/tests/test_axes.py::test_nan_barlabels": "PASSED", "lib/matplotlib/tests/test_axes.py::test_patch_bounds": "PASSED", "lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs": "PASSED", "lib/matplotlib/tests/test_axes.py::test_artist_sublists": "PASSED", "lib/matplotlib/tests/test_axes.py::test_empty_line_plots": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f'": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\\\+'": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-'": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk'": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r'": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f'": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\\\+'": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-'": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk'": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r'": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_format": "PASSED", "lib/matplotlib/tests/test_axes.py::test_automatic_legend": "PASSED", "lib/matplotlib/tests/test_axes.py::test_plot_errors": "PASSED", "lib/matplotlib/tests/test_axes.py::test_clim": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bezier_autoscale": "PASSED", "lib/matplotlib/tests/test_axes.py::test_small_autoscale": "PASSED", "lib/matplotlib/tests/test_axes.py::test_get_xticklabel": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_leading_nan": "PASSED", "lib/matplotlib/tests/test_axes.py::test_bar_all_nan[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_extent_units[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_cla_clears_children_axes_and_fig": "PASSED", "lib/matplotlib/tests/test_axes.py::test_scatter_color_repr_error": "PASSED", "lib/matplotlib/tests/test_axes.py::test_zorder_and_explicit_rasterization": "PASSED", "lib/matplotlib/tests/test_axes.py::test_preset_clip_paths[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_rc_axes_label_formatting": "PASSED", "lib/matplotlib/tests/test_axes.py::test_ecdf[png]": "PASSED", "lib/matplotlib/tests/test_axes.py::test_ecdf_invalid": "PASSED", "lib/matplotlib/tests/test_axes.py::test_fill_between_axes_limits": "PASSED", "lib/matplotlib/tests/test_axes.py::test_tick_param_labelfont": "PASSED", "lib/matplotlib/tests/test_axes.py::test_set_secondary_axis_color": "PASSED", "lib/matplotlib/tests/test_axes.py::test_xylim_changed_shared": "PASSED", "[12]": "SKIPPED", "[54]": "SKIPPED"}]