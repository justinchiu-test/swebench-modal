[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-11870", "base_commit": "5c2e1f96a7ff562d4a778f4ca9ffc9c81557197e", "patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -16,6 +16,8 @@\n from sympy.sets.sets import FiniteSet\n from sympy.utilities.iterables import numbered_symbols\n from sympy.core.compatibility import range\n+from sympy.core.relational import Ne\n+from sympy.functions.elementary.piecewise import Piecewise\n \n ###############################################################################\n ########################## TRIGONOMETRIC FUNCTIONS ############################\n@@ -400,6 +402,9 @@ def _eval_rewrite_as_csc(self, arg):\n     def _eval_rewrite_as_sec(self, arg):\n         return 1 / sec(arg - S.Pi / 2, evaluate=False)\n \n+    def _eval_rewrite_as_sinc(self, arg):\n+        return arg*sinc(arg)\n+\n     def _eval_conjugate(self):\n         return self.func(self.args[0].conjugate())\n \n@@ -1789,7 +1794,7 @@ def _eval_rewrite_as_jn(self, arg):\n         return jn(0, arg)\n \n     def _eval_rewrite_as_sin(self, arg):\n-        return sin(arg) / arg\n+        return Piecewise((sin(arg)/arg, Ne(arg, 0)), (1, True))\n \n \n ###############################################################################\n", "test_patch": "diff --git a/sympy/functions/elementary/tests/test_trigonometric.py b/sympy/functions/elementary/tests/test_trigonometric.py\n--- a/sympy/functions/elementary/tests/test_trigonometric.py\n+++ b/sympy/functions/elementary/tests/test_trigonometric.py\n@@ -6,6 +6,8 @@\n         AccumBounds)\n from sympy.core.compatibility import range\n from sympy.utilities.pytest import XFAIL, slow, raises\n+from sympy.core.relational import Ne, Eq\n+from sympy.functions.elementary.piecewise import Piecewise\n \n x, y, z = symbols('x y z')\n r = Symbol('r', real=True)\n@@ -704,7 +706,7 @@ def test_sinc():\n     assert sinc(x).series() == 1 - x**2/6 + x**4/120 + O(x**6)\n \n     assert sinc(x).rewrite(jn) == jn(0, x)\n-    assert sinc(x).rewrite(sin) == sin(x) / x\n+    assert sinc(x).rewrite(sin) == Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n \n \n def test_asin():\n@@ -1507,6 +1509,14 @@ def test_trig_period():\n     assert tan(3*x).period(y) == S.Zero\n     raises(NotImplementedError, lambda: sin(x**2).period(x))\n \n+\n def test_issue_7171():\n     assert sin(x).rewrite(sqrt) == sin(x)\n     assert sin(x).rewrite(pow) == sin(x)\n+\n+\n+def test_issue_11864():\n+    w, k = symbols('w, k', real=True)\n+    F = Piecewise((1, Eq(2*pi*k, 0)), (sin(pi*k)/(pi*k), True))\n+    soln = Piecewise((1, Eq(2*pi*k, 0)), (sinc(pi*k), True))\n+    assert F.rewrite(sinc) == soln\n", "problem_statement": "simplifying exponential -> trig identities\n```\r\nf = 1 / 2 * (-I*exp(I*k) + I*exp(-I*k))\r\ntrigsimp(f)\r\n```\r\n\r\nIdeally, this would yield `sin(k)`. Is there a way to do this?\r\n\r\nAs a corollary, it would be awesome if \r\n\r\n```\r\nf = 1 / 2 / k* (-I*exp(I*k) + I*exp(-I*k))\r\ntrigsimp(f)\r\n```\r\n\r\ncould yield `sinc(k)`. Thank you for your consideration!\n", "hints_text": "rewrite can be used:\n\n```\n>>> f = S(1) / 2 * (-I*exp(I*k) + I*exp(-I*k))\n>>> f.rewrite(sin).simplify()\nsin(k)\n```\n\nThank you for that suggestion!\n\n> On Nov 17, 2016, at 01:06, Kalevi Suominen notifications@github.com wrote:\n> \n> rewrite can be used:\n> \n> > > > f = S(1) / 2 \\* (-I_exp(I_k) + I_exp(-I_k))\n> > > > f.rewrite(sin).simplify()\n> > > > sin(k)\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n\nToo bad this doesn't work as expected:\n\n```\n\u03c9 = sym.symbols('\u03c9', real=True)\nk = sym.symbols('k', real=True)\nf = 1 / 2 / \u03c0 * sym.exp(sym.I * \u03c9 * k)\nF = sym.integrate(f, (\u03c9, -\u03c0, \u03c0))\nF.rewrite(sym.sinc).simplify()\n```\n\nIt does not produce the desired sinc function in the equation.\n\nIt seems that rewrite for sinc has not been implemented.\n", "created_at": "2016-11-17T21:36:03Z", "version": "1.1", "FAIL_TO_PASS": "[\"test_sinc\"]", "PASS_TO_PASS": "[\"test_sin\", \"test_sin_cos\", \"test_sin_series\", \"test_sin_rewrite\", \"test_sin_expansion\", \"test_sin_AccumBounds\", \"test_trig_symmetry\", \"test_cos\", \"test_issue_6190\", \"test_cos_series\", \"test_cos_rewrite\", \"test_cos_expansion\", \"test_cos_AccumBounds\", \"test_tan\", \"test_tan_series\", \"test_tan_rewrite\", \"test_tan_subs\", \"test_tan_expansion\", \"test_tan_AccumBounds\", \"test_cot\", \"test_cot_series\", \"test_cot_rewrite\", \"test_cot_subs\", \"test_cot_expansion\", \"test_cot_AccumBounds\", \"test_asin\", \"test_asin_series\", \"test_asin_rewrite\", \"test_acos\", \"test_acos_series\", \"test_acos_rewrite\", \"test_atan\", \"test_atan_rewrite\", \"test_atan2\", \"test_acot\", \"test_acot_rewrite\", \"test_attributes\", \"test_sincos_rewrite\", \"test_evenodd_rewrite\", \"test_issue_4547\", \"test_as_leading_term_issue_5272\", \"test_leading_terms\", \"test_atan2_expansion\", \"test_aseries\", \"test_issue_4420\", \"test_inverses\", \"test_real_imag\", \"test_sec\", \"test_sec_rewrite\", \"test_csc\", \"test_asec\", \"test_asec_is_real\", \"test_acsc\", \"test_csc_rewrite\", \"test_issue_8653\", \"test_issue_9157\", \"test_trig_period\", \"test_issue_7171\"]", "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   sympy/functions/elementary/trigonometric.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 5c2e1f96a7ff562d4a778f4ca9ffc9c81557197e\nMerge: 58486c5e26 121ea0c3ce\nAuthor: Chris Smith <smichr@gmail.com>\nDate:   Mon Oct 2 12:10:19 2017 -0500\n\n    Merge pull request #12847 from firedranzer/Rupesh\n    \n    Fixed lgtm: meijerint arg count mismatch\n\ndiff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex b2a3f3d6a7..1c22527775 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -16,6 +16,8 @@\n from sympy.sets.sets import FiniteSet\n from sympy.utilities.iterables import numbered_symbols\n from sympy.core.compatibility import range\n+from sympy.core.relational import Ne\n+from sympy.functions.elementary.piecewise import Piecewise\n \n ###############################################################################\n ########################## TRIGONOMETRIC FUNCTIONS ############################\n@@ -408,6 +410,9 @@ def _eval_rewrite_as_csc(self, arg):\n     def _eval_rewrite_as_sec(self, arg):\n         return 1 / sec(arg - S.Pi / 2, evaluate=False)\n \n+    def _eval_rewrite_as_sinc(self, arg):\n+        return arg*sinc(arg)\n+\n     def _eval_conjugate(self):\n         return self.func(self.args[0].conjugate())\n \n@@ -1817,7 +1822,7 @@ def _eval_rewrite_as_jn(self, arg):\n         return jn(0, arg)\n \n     def _eval_rewrite_as_sin(self, arg):\n-        return sin(arg) / arg\n+        return Piecewise((sin(arg)/arg, Ne(arg, 0)), (1, True))\n \n \n ###############################################################################\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)\nInstalling collected packages: sympy\n  Attempting uninstall: sympy\n    Found existing installation: sympy 1.1.2.dev0\n    Uninstalling sympy-1.1.2.dev0:\n      Successfully uninstalled sympy-1.1.2.dev0\n  Running setup.py develop for sympy\nSuccessfully installed sympy\n============================= test process starts ==============================\nexecutable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]\narchitecture:       64-bit\ncache:              no\nground types:       python \nnumpy:              None\nrandom seed:        38579450\nhash randomization: off\n\nsympy/functions/elementary/tests/test_trigonometric.py[63] \ntest_sin ok\ntest_sin_cos ok\ntest_sin_series ok\ntest_sin_rewrite ok\ntest_sin_expansion ok\ntest_sin_AccumBounds ok\ntest_trig_symmetry ok\ntest_cos ok\ntest_issue_6190 ok\ntest_cos_series ok\ntest_cos_rewrite ok\ntest_cos_expansion ok\ntest_cos_AccumBounds ok\ntest_tan ok\ntest_tan_series ok\ntest_tan_rewrite ok\ntest_tan_subs ok\ntest_tan_expansion ok\ntest_tan_AccumBounds ok\ntest_cot ok\ntest_cot_series ok\ntest_cot_rewrite ok\ntest_cot_subs ok\ntest_cot_expansion ok\ntest_cot_AccumBounds ok\ntest_sinc ok\ntest_asin ok\ntest_asin_series ok\ntest_asin_rewrite ok\ntest_acos ok\ntest_acos_series ok\ntest_acos_rewrite ok\ntest_atan ok\ntest_atan_rewrite ok\ntest_atan2 ok\ntest_acot ok\ntest_acot_rewrite ok\ntest_attributes ok\ntest_sincos_rewrite ok\ntest_evenodd_rewrite ok\ntest_issue_4547 ok\ntest_as_leading_term_issue_5272 ok\ntest_leading_terms ok\ntest_atan2_expansion ok\ntest_aseries ok\ntest_issue_4420 ok\ntest_inverses ok\ntest_real_imag ok\ntest_sin_cos_with_infinity f\ntest_sincos_rewrite_sqrt Slow w\ntest_tancot_rewrite_sqrt Slow w\ntest_sec ok\ntest_sec_rewrite ok\ntest_csc ok\ntest_asec ok\ntest_asec_is_real ok\ntest_acsc ok\ntest_csc_rewrite ok\ntest_issue_8653 ok\ntest_issue_9157 ok\ntest_trig_period ok\ntest_issue_7171 ok\ntest_issue_11864 ok                                                         [OK]\n\n\n________________________________ slowest tests _________________________________\ntest_cot_rewrite - Took 10.981 seconds\ntest_sin - Took 11.168 seconds\ntest_atan2_expansion - Took 28.375 seconds\ntest_sec - Took 33.988 seconds\ntest_tan_rewrite - Took 36.177 seconds\ntest_sin_cos - Took 596.109 seconds\n= tests finished: 60 passed, 2 skipped, 1 expected to fail, in 753.29 seconds ==\n", {"test_sin": "PASSED", "test_sin_cos": "PASSED", "test_sin_series": "PASSED", "test_sin_rewrite": "PASSED", "test_sin_expansion": "PASSED", "test_sin_AccumBounds": "PASSED", "test_trig_symmetry": "PASSED", "test_cos": "PASSED", "test_issue_6190": "PASSED", "test_cos_series": "PASSED", "test_cos_rewrite": "PASSED", "test_cos_expansion": "PASSED", "test_cos_AccumBounds": "PASSED", "test_tan": "PASSED", "test_tan_series": "PASSED", "test_tan_rewrite": "PASSED", "test_tan_subs": "PASSED", "test_tan_expansion": "PASSED", "test_tan_AccumBounds": "PASSED", "test_cot": "PASSED", "test_cot_series": "PASSED", "test_cot_rewrite": "PASSED", "test_cot_subs": "PASSED", "test_cot_expansion": "PASSED", "test_cot_AccumBounds": "PASSED", "test_sinc": "PASSED", "test_asin": "PASSED", "test_asin_series": "PASSED", "test_asin_rewrite": "PASSED", "test_acos": "PASSED", "test_acos_series": "PASSED", "test_acos_rewrite": "PASSED", "test_atan": "PASSED", "test_atan_rewrite": "PASSED", "test_atan2": "PASSED", "test_acot": "PASSED", "test_acot_rewrite": "PASSED", "test_attributes": "PASSED", "test_sincos_rewrite": "PASSED", "test_evenodd_rewrite": "PASSED", "test_issue_4547": "PASSED", "test_as_leading_term_issue_5272": "PASSED", "test_leading_terms": "PASSED", "test_atan2_expansion": "PASSED", "test_aseries": "PASSED", "test_issue_4420": "PASSED", "test_inverses": "PASSED", "test_real_imag": "PASSED", "test_sec": "PASSED", "test_sec_rewrite": "PASSED", "test_csc": "PASSED", "test_asec": "PASSED", "test_asec_is_real": "PASSED", "test_acsc": "PASSED", "test_csc_rewrite": "PASSED", "test_issue_8653": "PASSED", "test_issue_9157": "PASSED", "test_trig_period": "PASSED", "test_issue_7171": "PASSED"}]