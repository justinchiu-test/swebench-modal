[{"repo": "django/django", "instance_id": "django__django-15498", "base_commit": "d90e34c61b27fba2527834806639eebbcfab9631", "patch": "diff --git a/django/views/static.py b/django/views/static.py\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -129,12 +129,14 @@ def was_modified_since(header=None, mtime=0, size=0):\n         if header is None:\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if matches is None:\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n             raise ValueError\n         if int(mtime) > header_mtime:\n             raise ValueError\n-    except (AttributeError, ValueError, OverflowError):\n+    except (ValueError, OverflowError):\n         return True\n     return False\n", "test_patch": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -191,3 +191,6 @@ def test_was_modified_since_fp(self):\n         mtime = 1343416141.107817\n         header = http_date(mtime)\n         self.assertFalse(was_modified_since(header, mtime))\n+\n+    def test_was_modified_since_empty_string(self):\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n", "problem_statement": "Fix handling empty string for If-Modified-Since header\nDescription\n\t\nEmpty string used to be ignored for If-Modified-Since header, but now raises exception since d6aff369ad3.\nFix handling empty string for If-Modified-Since header\nDescription\n\t\nEmpty string used to be ignored for If-Modified-Since header, but now raises exception since d6aff369ad3.\n", "hints_text": "", "created_at": "2022-03-10T19:47:15Z", "version": "4.1", "FAIL_TO_PASS": "[\"test_was_modified_since_empty_string (view_tests.tests.test_static.StaticUtilsTests)\"]", "PASS_TO_PASS": "[\"A floating point mtime does not disturb was_modified_since (#18675).\", \"test_404 (view_tests.tests.test_static.StaticHelperTest)\", \"The static view should stream files in chunks to avoid large memory usage\", \"test_copes_with_empty_path_component (view_tests.tests.test_static.StaticHelperTest)\", \"No URLs are served if DEBUG=False.\", \"test_empty_prefix (view_tests.tests.test_static.StaticHelperTest)\", \"test_index (view_tests.tests.test_static.StaticHelperTest)\", \"test_index_custom_template (view_tests.tests.test_static.StaticHelperTest)\", \"test_index_subdir (view_tests.tests.test_static.StaticHelperTest)\", \"Handle bogus If-Modified-Since values gracefully\", \"Handle even more bogus If-Modified-Since values gracefully\", \"test_is_modified_since (view_tests.tests.test_static.StaticHelperTest)\", \"test_not_modified_since (view_tests.tests.test_static.StaticHelperTest)\", \"test_prefix (view_tests.tests.test_static.StaticHelperTest)\", \"The static view can serve static media\", \"No URLs are served if prefix contains a netloc part.\", \"test_unknown_mime_type (view_tests.tests.test_static.StaticHelperTest)\", \"test_404 (view_tests.tests.test_static.StaticTests)\", \"test_copes_with_empty_path_component (view_tests.tests.test_static.StaticTests)\", \"test_index (view_tests.tests.test_static.StaticTests)\", \"test_index_custom_template (view_tests.tests.test_static.StaticTests)\", \"test_index_subdir (view_tests.tests.test_static.StaticTests)\", \"test_is_modified_since (view_tests.tests.test_static.StaticTests)\", \"test_not_modified_since (view_tests.tests.test_static.StaticTests)\", \"test_unknown_mime_type (view_tests.tests.test_static.StaticTests)\"]", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/views/static.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit d90e34c61b27fba2527834806639eebbcfab9631\nAuthor: Adrian Torres <atorresj@redhat.com>\nDate:   Fri Mar 4 11:04:07 2022 +0100\n\n    Fixed #33561 -- Allowed synchronization of user attributes in RemoteUserBackend.\n\ndiff --git a/AUTHORS b/AUTHORS\nindex 9f2475def7..1f96c6700c 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -23,6 +23,7 @@ answer newbie questions, and generally made Django that much better:\n     Adiyat Mubarak <adiyatmubarak@gmail.com>\n     Adnan Umer <u.adnan@outlook.com>\n     Adrian Holovaty <adrian@holovaty.com>\n+    Adrian Torres <atorresj@redhat.com>\n     Adrien Lemaire <lemaire.adrien@gmail.com>\n     Afonso Fern\u00e1ndez Nogueira <fonzzo.django@gmail.com>\n     AgarFu <heaven@croasanaso.sytes.net>\ndiff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\nindex 7cf405713d..1e12efac38 100644\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -1,6 +1,10 @@\n+import warnings\n+\n from django.contrib.auth import get_user_model\n from django.contrib.auth.models import Permission\n from django.db.models import Exists, OuterRef, Q\n+from django.utils.deprecation import RemovedInDjango50Warning\n+from django.utils.inspect import func_supports_parameter\n \n UserModel = get_user_model()\n \n@@ -192,6 +196,7 @@ class RemoteUserBackend(ModelBackend):\n         \"\"\"\n         if not remote_user:\n             return\n+        created = False\n         user = None\n         username = self.clean_username(remote_user)\n \n@@ -202,13 +207,24 @@ class RemoteUserBackend(ModelBackend):\n             user, created = UserModel._default_manager.get_or_create(\n                 **{UserModel.USERNAME_FIELD: username}\n             )\n-            if created:\n-                user = self.configure_user(request, user)\n         else:\n             try:\n                 user = UserModel._default_manager.get_by_natural_key(username)\n             except UserModel.DoesNotExist:\n                 pass\n+\n+        # RemovedInDjango50Warning: When the deprecation ends, replace with:\n+        #   user = self.configure_user(request, user, created=created)\n+        if func_supports_parameter(self.configure_user, \"created\"):\n+            user = self.configure_user(request, user, created=created)\n+        else:\n+            warnings.warn(\n+                f\"`created=True` must be added to the signature of \"\n+                f\"{self.__class__.__qualname__}.configure_user().\",\n+                category=RemovedInDjango50Warning,\n+            )\n+            if created:\n+                user = self.configure_user(request, user)\n         return user if self.user_can_authenticate(user) else None\n \n     def clean_username(self, username):\n@@ -220,9 +236,9 @@ class RemoteUserBackend(ModelBackend):\n         \"\"\"\n         return username\n \n-    def configure_user(self, request, user):\n+    def configure_user(self, request, user, created=True):\n         \"\"\"\n-        Configure a user after creation and return the updated user.\n+        Configure a user and return the updated user.\n \n         By default, return the user unmodified.\n         \"\"\"\ndiff --git a/docs/internals/deprecation.txt b/docs/internals/deprecation.txt\nindex 11f69b1844..2c85eafc85 100644\n--- a/docs/internals/deprecation.txt\n+++ b/docs/internals/deprecation.txt\n@@ -87,6 +87,9 @@ details on these changes.\n \n * Passing unsaved model instances to related filters will no longer be allowed.\n \n+* ``created=True`` will be required in the signature of\n+  ``RemoteUserBackend.configure_user()`` subclasses.\n+\n .. _deprecation-removed-in-4.1:\n \n 4.1\ndiff --git a/docs/ref/contrib/auth.txt b/docs/ref/contrib/auth.txt\nindex 40c3c84e75..abcf3905c9 100644\n--- a/docs/ref/contrib/auth.txt\n+++ b/docs/ref/contrib/auth.txt\n@@ -649,17 +649,27 @@ The following backends are available in :mod:`django.contrib.auth.backends`:\n         information) prior to using it to get or create a user object. Returns\n         the cleaned username.\n \n-    .. method:: configure_user(request, user)\n+    .. method:: configure_user(request, user, created=True)\n \n-        Configures a newly created user.  This method is called immediately\n-        after a new user is created, and can be used to perform custom setup\n-        actions, such as setting the user's groups based on attributes in an\n-        LDAP directory. Returns the user object.\n+        Configures the user on each authentication attempt. This method is\n+        called immediately after fetching or creating the user being\n+        authenticated, and can be used to perform custom setup actions, such as\n+        setting the user's groups based on attributes in an LDAP directory.\n+        Returns the user object.\n+\n+        The setup can be performed either once when the user is created\n+        (``created`` is ``True``) or on existing users (``created`` is\n+        ``False``) as a way of synchronizing attributes between the remote and\n+        the local systems.\n \n         ``request`` is an :class:`~django.http.HttpRequest` and may be ``None``\n         if it wasn't provided to :func:`~django.contrib.auth.authenticate`\n         (which passes it on to the backend).\n \n+        .. versionchanged:: 4.1\n+\n+            The ``created`` argument was added.\n+\n     .. method:: user_can_authenticate()\n \n         Returns whether the user is allowed to authenticate. This method\ndiff --git a/docs/releases/4.1.txt b/docs/releases/4.1.txt\nindex 72c1c15c7a..9dff4784cb 100644\n--- a/docs/releases/4.1.txt\n+++ b/docs/releases/4.1.txt\n@@ -74,6 +74,9 @@ Minor features\n * The default iteration count for the PBKDF2 password hasher is increased from\n   320,000 to 390,000.\n \n+* The :meth:`.RemoteUserBackend.configure_user` method now allows synchronizing\n+  user attributes with attributes in a remote system such as an LDAP directory.\n+\n :mod:`django.contrib.contenttypes`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n@@ -493,6 +496,10 @@ Miscellaneous\n * Passing unsaved model instances to related filters is deprecated. In Django\n   5.0, the exception will be raised.\n \n+* ``created=True`` is added to the signature of\n+  :meth:`.RemoteUserBackend.configure_user`. Support  for ``RemoteUserBackend``\n+  subclasses that do not accept this argument is deprecated.\n+\n Features removed in 4.1\n =======================\n \ndiff --git a/tests/auth_tests/test_remote_user.py b/tests/auth_tests/test_remote_user.py\nindex bd974cb1d5..8fb1b972b5 100644\n--- a/tests/auth_tests/test_remote_user.py\n+++ b/tests/auth_tests/test_remote_user.py\n@@ -6,8 +6,15 @@ from django.contrib.auth.backends import RemoteUserBackend\n from django.contrib.auth.middleware import RemoteUserMiddleware\n from django.contrib.auth.models import User\n from django.middleware.csrf import _get_new_csrf_string, _mask_cipher_secret\n-from django.test import Client, TestCase, modify_settings, override_settings\n+from django.test import (\n+    Client,\n+    TestCase,\n+    ignore_warnings,\n+    modify_settings,\n+    override_settings,\n+)\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango50Warning\n \n \n @override_settings(ROOT_URLCONF=\"auth_tests.urls\")\n@@ -215,11 +222,14 @@ class CustomRemoteUserBackend(RemoteUserBackend):\n         \"\"\"\n         return username.split(\"@\")[0]\n \n-    def configure_user(self, request, user):\n+    def configure_user(self, request, user, created=True):\n         \"\"\"\n         Sets user's email address using the email specified in an HTTP header.\n+        Sets user's last name for existing users.\n         \"\"\"\n         user.email = request.META.get(RemoteUserTest.email_header, \"\")\n+        if not created:\n+            user.last_name = user.username\n         user.save()\n         return user\n \n@@ -242,8 +252,12 @@ class RemoteUserCustomTest(RemoteUserTest):\n         should not have been configured with an email address.\n         \"\"\"\n         super().test_known_user()\n-        self.assertEqual(User.objects.get(username=\"knownuser\").email, \"\")\n-        self.assertEqual(User.objects.get(username=\"knownuser2\").email, \"\")\n+        knownuser = User.objects.get(username=\"knownuser\")\n+        knownuser2 = User.objects.get(username=\"knownuser2\")\n+        self.assertEqual(knownuser.email, \"\")\n+        self.assertEqual(knownuser2.email, \"\")\n+        self.assertEqual(knownuser.last_name, \"knownuser\")\n+        self.assertEqual(knownuser2.last_name, \"knownuser2\")\n \n     def test_unknown_user(self):\n         \"\"\"\n@@ -260,11 +274,40 @@ class RemoteUserCustomTest(RemoteUserTest):\n         )\n         self.assertEqual(response.context[\"user\"].username, \"newuser\")\n         self.assertEqual(response.context[\"user\"].email, \"user@example.com\")\n+        self.assertEqual(response.context[\"user\"].last_name, \"\")\n         self.assertEqual(User.objects.count(), num_users + 1)\n         newuser = User.objects.get(username=\"newuser\")\n         self.assertEqual(newuser.email, \"user@example.com\")\n \n \n+# RemovedInDjango50Warning.\n+class CustomRemoteUserNoCreatedArgumentBackend(CustomRemoteUserBackend):\n+    def configure_user(self, request, user):\n+        return super().configure_user(request, user)\n+\n+\n+@ignore_warnings(category=RemovedInDjango50Warning)\n+class RemoteUserCustomNoCreatedArgumentTest(RemoteUserTest):\n+    backend = \"auth_tests.test_remote_user.CustomRemoteUserNoCreatedArgumentBackend\"\n+\n+\n+@override_settings(ROOT_URLCONF=\"auth_tests.urls\")\n+@modify_settings(\n+    AUTHENTICATION_BACKENDS={\n+        \"append\": \"auth_tests.test_remote_user.CustomRemoteUserNoCreatedArgumentBackend\"\n+    },\n+    MIDDLEWARE={\"append\": \"django.contrib.auth.middleware.RemoteUserMiddleware\"},\n+)\n+class RemoteUserCustomNoCreatedArgumentDeprecationTest(TestCase):\n+    def test_known_user_sync(self):\n+        msg = (\n+            \"`created=True` must be added to the signature of \"\n+            \"CustomRemoteUserNoCreatedArgumentBackend.configure_user().\"\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):\n+            self.client.get(\"/remote_user/\", **{RemoteUserTest.header: \"newuser\"})\n+\n+\n class CustomHeaderMiddleware(RemoteUserMiddleware):\n     \"\"\"\n     Middleware that overrides custom HTTP auth user header.\ndiff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..3d4075be2b 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -129,12 +129,14 @@ def was_modified_since(header=None, mtime=0, size=0):\n         if header is None:\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n+        if matches is None:\n+            raise ValueError\n         header_mtime = parse_http_date(matches[1])\n         header_len = matches[3]\n         if header_len and int(header_len) != size:\n             raise ValueError\n         if int(mtime) > header_mtime:\n             raise ValueError\n-    except (AttributeError, ValueError, OverflowError):\n+    except (ValueError, OverflowError):\n         return True\n     return False\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220310115719) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220310115719) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220310115719) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.1.dev20220310115719-0.editable-py3-none-any.whl size=26933 sha256=83113db0078b2c40bfe2db70b8d29b0bd4c64135ba55b9c8533859f2314fc40e\n  Stored in directory: /tmp/pip-ephem-wheel-cache-55y4grlg/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.1.dev20220310115719\n    Uninstalling Django-4.1.dev20220310115719:\n      Successfully uninstalled Django-4.1.dev20220310115719\nSuccessfully installed Django-4.1.dev20220310115719\nTesting against Django installed in '/testbed/django'\nImporting application view_tests\nFound 30 test(s).\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n", {}]