[{"repo": "django/django", "instance_id": "django__django-12284", "base_commit": "c5e373d48cbdd923575956fed477b63d66d9603f", "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -764,7 +764,11 @@ def contribute_to_class(self, cls, name, private_only=False):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            if not hasattr(cls, 'get_%s_display' % self.name):\n+            # Don't override a get_FOO_display() method defined explicitly on\n+            # this class, but don't check methods derived from inheritance, to\n+            # allow overriding inherited choices. For more complex inheritance\n+            # structures users should override contribute_to_class().\n+            if 'get_%s_display' % self.name not in cls.__dict__:\n                 setattr(\n                     cls,\n                     'get_%s_display' % self.name,\n", "test_patch": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -178,6 +178,19 @@ def get_foo_bar_display(self):\n         f = FooBar(foo_bar=1)\n         self.assertEqual(f.get_foo_bar_display(), 'something')\n \n+    def test_overriding_inherited_FIELD_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B')])\n+\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+\n     def test_iterator_choices(self):\n         \"\"\"\n         get_choices() works with Iterators.\n", "problem_statement": "Model.get_FOO_display() does not work correctly with inherited choices.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nGiven a base model with choices A containing 3 tuples\nChild Model inherits the base model overrides the choices A and adds 2 more tuples\nget_foo_display does not work correctly for the new tuples added\nExample:\nclass A(models.Model):\n foo_choice = [(\"A\",\"output1\"),(\"B\",\"output2\")]\n field_foo = models.CharField(max_length=254,choices=foo_choice)\n class Meta:\n\t abstract = True\nclass B(A):\n foo_choice = [(\"A\",\"output1\"),(\"B\",\"output2\"),(\"C\",\"output3\")]\n field_foo = models.CharField(max_length=254,choices=foo_choice)\nUpon invoking get_field_foo_display() on instance of B , \nFor value \"A\" and \"B\" the output works correctly i.e. returns \"output1\" / \"output2\"\nbut for value \"C\" the method returns \"C\" and not \"output3\" which is the expected behaviour\n", "hints_text": "Thanks for this report. Can you provide models and describe expected behavior? Can you also check if it's not a duplicate of #30931?, that was fixed in Django 2.2.7.\nReplying to felixxm: Thanks for this report. Can you provide models and describe expected behavior? Can you also check if it's not a duplicate of #30931?, that was fixed in Django 2.2.7.\nAdded the models and expected behaviour. It is not a duplicate of #30931. Using Django 2.2.9 Replying to felixxm: Thanks for this report. Can you provide models and describe expected behavior? Can you also check if it's not a duplicate of #30931?, that was fixed in Django 2.2.7.\nThanks for an extra info. I was able to reproduce this issue, e.g. >>> B.objects.create(field_foo='A').get_field_foo_display() output1 >>> B.objects.create(field_foo='B').get_field_foo_display() output2 >>> B.objects.create(field_foo='C').get_field_foo_display() C Regression in 2d38eb0ab9f78d68c083a5b78b1eca39027b279a (Django 2.2.7).\nmay i work on this?\nAfter digging in, i have found that the choices of B model are the same with the A model, despiite them being the proper ones in init. Migration is correct, so now i must find why the choices of model B are ignored. Being my first issue, some hints would be appreciated. Thanks\n\u200bhttps://github.com/django/django/pull/12266\nI think this ticket is very much related to the discussions on #30931. The line if not hasattr(cls, 'get_%s_display' % self.name) breaks the expected behaviour on model inheritance, which causing this bug. (see \u200bhttps://github.com/django/django/commit/2d38eb0ab9f78d68c083a5b78b1eca39027b279a#diff-bf776a3b8e5dbfac2432015825ef8afeR766) IMO there are three important points to discuss: 1- Obviously get_<field>_display() should work as expected with inheritance, so this line should be reverted/fixed: if not hasattr(cls, 'get_%s_display' % self.name) 2- I think developers should be able to override get_<field>_display() method on the model class: class Bar(models.Model): foo = models.CharField('foo', choices=[(0, 'foo')]) def get_foo_display(self): return 'something' b = Bar(foo=0) assert b.get_foo_display() == 'something' 3- I think Field should not check an attribute of model class and make a decision based on it. This check and set logic should be delegated to BaseModel with an abstraction to make it less magical and more clean. Maybe something like this: class ModelBase(type): .... def add_overridable_to_class(cls, name, value): // Set value only if the name is not already defined in the class itself (no `hasattr`) if name not in cls.__dict__: setattr(cls, name, value) class Field(RegisterLookupMixin): ... def contribute_to_class(self, cls, name, private_only=False): ... if self.choices is not None: cls.add_overridable_to_class('get_%s_display' % self.name, partialmethod(cls._get_FIELD_display, field=self))\nWhy would checking on fields class be a bad idea? If you are a field of a model that is not abstract but your parent is an abstract method, wouldn't you want to override your parent's method if you both have the same method?\nReplying to George Popides: Why would checking on fields class be a bad idea? If you are a field of a model that is not abstract but your parent is an abstract method, wouldn't you want to override your parent's method if you both have the same method? Well it is not something I would prefer because it makes two classes tightly coupled to each other, which means it is hard to change one without touching to the other one and you always need to think about side effects of your change. Which eventually makes this two classes hard to test and makes the codebase hard to maintain. Your logic about overriding might/or might not be true. I would just execute this logic on ModelBase rather than Field.", "created_at": "2020-01-07T11:06:31Z", "version": "3.1", "FAIL_TO_PASS": "[\"test_overriding_inherited_FIELD_display (model_fields.tests.GetFieldDisplayTests)\"]", "PASS_TO_PASS": "[\"test_blank_in_choices (model_fields.tests.GetChoicesTests)\", \"test_blank_in_grouped_choices (model_fields.tests.GetChoicesTests)\", \"test_empty_choices (model_fields.tests.GetChoicesTests)\", \"test_lazy_strings_not_evaluated (model_fields.tests.GetChoicesTests)\", \"test_choices_and_field_display (model_fields.tests.GetFieldDisplayTests)\", \"test_empty_iterator_choices (model_fields.tests.GetFieldDisplayTests)\", \"A translated display value is coerced to str.\", \"test_iterator_choices (model_fields.tests.GetFieldDisplayTests)\", \"test_overriding_FIELD_display (model_fields.tests.GetFieldDisplayTests)\", \"test_check (model_fields.tests.ChoicesTests)\", \"test_choices (model_fields.tests.ChoicesTests)\", \"test_flatchoices (model_fields.tests.ChoicesTests)\", \"test_formfield (model_fields.tests.ChoicesTests)\", \"test_invalid_choice (model_fields.tests.ChoicesTests)\", \"test_get_choices (model_fields.tests.GetChoicesLimitChoicesToTests)\", \"test_get_choices_reverse_related_field (model_fields.tests.GetChoicesLimitChoicesToTests)\", \"Can supply a custom choices form class to Field.formfield()\", \"deconstruct() uses __qualname__ for nested class support.\", \"Field instances can be pickled.\", \"test_field_name (model_fields.tests.BasicFieldTests)\", \"Fields are ordered based on their creation.\", \"test_field_repr (model_fields.tests.BasicFieldTests)\", \"__repr__() uses __qualname__ for nested class support.\", \"test_field_str (model_fields.tests.BasicFieldTests)\", \"test_field_verbose_name (model_fields.tests.BasicFieldTests)\", \"Field.formfield() sets disabled for fields with choices.\", \"test_show_hidden_initial (model_fields.tests.BasicFieldTests)\", \"test_get_choices (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_default_ordering (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_reverse_related_field (model_fields.tests.GetChoicesOrderingTests)\", \"test_get_choices_reverse_related_field_default_ordering (model_fields.tests.GetChoicesOrderingTests)\"]", "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab"}, "Generating locales (this might take a while)...\n  en_US.UTF-8... done\nGeneration complete.\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/db/models/fields/__init__.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit c5e373d48cbdd923575956fed477b63d66d9603f\nAuthor: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate:   Wed Jan 15 11:58:01 2020 +0100\n\n    Fixed obsolete comment in django.utils.crypto.salted_hmac().\n    \n    Obsolete since 13864703bc1d5dd4dac63c96c6a4b42a392bc57f.\n\ndiff --git a/django/utils/crypto.py b/django/utils/crypto.py\nindex eeb55af066..4ec1cfcf77 100644\n--- a/django/utils/crypto.py\n+++ b/django/utils/crypto.py\n@@ -26,8 +26,7 @@ def salted_hmac(key_salt, value, secret=None):\n     # passing the key_salt and our base key through a pseudo-random function and\n     # SHA1 works nicely.\n     key = hashlib.sha1(key_salt + secret).digest()\n-\n-    # If len(key_salt + secret) > sha_constructor().block_size, the above\n+    # If len(key_salt + secret) > block size of the hash algorithm, the above\n     # line is redundant and could be replaced by key = key_salt + secret, since\n     # the hmac module does the same thing for keys longer than the block size.\n     # However, we need to ensure that we *always* do this.\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 1a55d3d417..6bd95f542c 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -764,7 +764,11 @@ class Field(RegisterLookupMixin):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            if not hasattr(cls, 'get_%s_display' % self.name):\n+            # Don't override a get_FOO_display() method defined explicitly on\n+            # this class, but don't check methods derived from inheritance, to\n+            # allow overriding inherited choices. For more complex inheritance\n+            # structures users should override contribute_to_class().\n+            if 'get_%s_display' % self.name not in cls.__dict__:\n                 setattr(\n                     cls,\n                     'get_%s_display' % self.name,\nObtaining file:///testbed\nRequirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2024.2)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)\nRequirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.1) (4.1.1)\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 3.1\n    Uninstalling Django-3.1:\n      Successfully uninstalled Django-3.1\n  Running setup.py develop for Django\nSuccessfully installed Django-3.1\nTesting against Django installed in '/testbed/django'\nImporting application model_fields\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, messages, model_fields, sessions, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table model_fields_foo\n    Creating table model_fields_bar\n    Creating table model_fields_whiz\n    Creating table model_fields_whizdelayed\n    Creating table model_fields_whiziter\n    Creating table model_fields_whiziterempty\n    Creating table model_fields_choiceful\n    Creating table model_fields_bigd\n    Creating table model_fields_floatmodel\n    Creating table model_fields_bigs\n    Creating table model_fields_unicodeslugfield\n    Creating table model_fields_automodel\n    Creating table model_fields_bigautomodel\n    Creating table model_fields_smallautomodel\n    Creating table model_fields_smallintegermodel\n    Creating table model_fields_integermodel\n    Creating table model_fields_bigintegermodel\n    Creating table model_fields_positivebigintegermodel\n    Creating table model_fields_positivesmallintegermodel\n    Creating table model_fields_positiveintegermodel\n    Creating table model_fields_post\n    Creating table model_fields_nullbooleanmodel\n    Creating table model_fields_booleanmodel\n    Creating table model_fields_datetimemodel\n    Creating table model_fields_durationmodel\n    Creating table model_fields_nulldurationmodel\n    Creating table model_fields_primarykeycharmodel\n    Creating table model_fields_fkstobooleans\n    Creating table model_fields_fktochar\n    Creating table model_fields_renamedfield\n    Creating table model_fields_verbosenamefield\n    Creating table model_fields_genericipaddress\n    Creating table model_fields_decimallessthanone\n    Creating table model_fields_fieldclassattributemodel\n    Creating table model_fields_datamodel\n    Creating table model_fields_document\n    Creating table model_fields_person\n    Creating table model_fields_personwithheight\n    Creating table model_fields_personwithheightandwidth\n    Creating table model_fields_persondimensionsfirst\n    Creating table model_fields_persontwoimages\n    Creating table model_fields_allfieldsmodel\n    Creating table model_fields_manytomany\n    Creating table model_fields_uuidmodel\n    Creating table model_fields_nullableuuidmodel\n    Creating table model_fields_primarykeyuuidmodel\n    Creating table model_fields_relatedtouuidmodel\n    Creating table model_fields_uuidchild\n    Creating table model_fields_uuidgrandchild\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]