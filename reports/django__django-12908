[{"repo": "django/django", "instance_id": "django__django-12908", "base_commit": "49ae7ce50a874f8a04cd910882fb9571ff3a0d7a", "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1138,6 +1138,7 @@ def distinct(self, *field_names):\n         \"\"\"\n         Return a new QuerySet instance that will select only distinct results.\n         \"\"\"\n+        self._not_support_combined_queries('distinct')\n         assert not self.query.is_sliced, \\\n             \"Cannot create distinct fields once a slice has been taken.\"\n         obj = self._chain()\n", "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -272,6 +272,7 @@ def test_unsupported_operations_on_combined_qs(self):\n                 'annotate',\n                 'defer',\n                 'delete',\n+                'distinct',\n                 'exclude',\n                 'extra',\n                 'filter',\n", "problem_statement": "Union queryset should raise on distinct().\nDescription\n\t \n\t\t(last modified by Sielc Technologies)\n\t \nAfter using\n.annotate() on 2 different querysets\nand then .union()\n.distinct() will not affect the queryset\n\tdef setUp(self) -> None:\n\t\tuser = self.get_or_create_admin_user()\n\t\tSample.h.create(user, name=\"Sam1\")\n\t\tSample.h.create(user, name=\"Sam2 acid\")\n\t\tSample.h.create(user, name=\"Sam3\")\n\t\tSample.h.create(user, name=\"Sam4 acid\")\n\t\tSample.h.create(user, name=\"Dub\")\n\t\tSample.h.create(user, name=\"Dub\")\n\t\tSample.h.create(user, name=\"Dub\")\n\t\tself.user = user\n\tdef test_union_annotated_diff_distinct(self):\n\t\tqs = Sample.objects.filter(user=self.user)\n\t\tqs1 = qs.filter(name='Dub').annotate(rank=Value(0, IntegerField()))\n\t\tqs2 = qs.filter(name='Sam1').annotate(rank=Value(1, IntegerField()))\n\t\tqs = qs1.union(qs2)\n\t\tqs = qs.order_by('name').distinct('name') # THIS DISTINCT DOESN'T WORK\n\t\tself.assertEqual(qs.count(), 2)\nexpected to get wrapped union\n\tSELECT DISTINCT ON (siebox_sample.name) * FROM (SELECT ... UNION SELECT ...) AS siebox_sample\n", "hints_text": "distinct() is not supported but doesn't raise an error yet. As \u200b\u200bper the documentation, \"only LIMIT, OFFSET, COUNT(*), ORDER BY, and specifying columns (i.e. slicing, count(), order_by(), and values()/values_list()) are allowed on the resulting QuerySet.\". Follow up to #27995.", "created_at": "2020-05-13T11:36:48Z", "version": "3.2", "FAIL_TO_PASS": "[\"test_unsupported_operations_on_combined_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_unsupported_ordering_slicing_raises_db_error (queries.test_qs_combinators.QuerySetSetOperationTests)\"]", "PASS_TO_PASS": "[\"test_combining_multiple_models (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_count_union_empty_result (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_difference_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_intersection_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_limits (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_by_same_type (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_order_raises_on_non_selected_column (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_ordering_by_f_expression (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_qs_with_subcompound_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_difference (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_intersection (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_simple_union (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_distinct (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_empty_qs (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_extra_and_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_two_annotated_values_list (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_and_order (queries.test_qs_combinators.QuerySetSetOperationTests)\", \"test_union_with_values_list_on_annotated_and_unannotated (queries.test_qs_combinators.QuerySetSetOperationTests)\"]", "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d"}, "Generating locales (this might take a while)...\n  en_US.UTF-8... done\nGeneration complete.\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/db/models/query.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 49ae7ce50a874f8a04cd910882fb9571ff3a0d7a\nAuthor: Fran\u00e7ois Freitag <mail@franek.fr>\nDate:   Wed May 13 11:07:15 2020 +0000\n\n    Removed redundant assertions in fixtures tests.\n\ndiff --git a/tests/fixtures/tests.py b/tests/fixtures/tests.py\nindex cac3ccabc4..d46bf65c97 100644\n--- a/tests/fixtures/tests.py\n+++ b/tests/fixtures/tests.py\n@@ -33,7 +33,6 @@ class TestCaseFixtureLoadingTests(TestCase):\n \n     def test_class_fixtures(self):\n         \"Test case has installed 3 fixture objects\"\n-        self.assertEqual(Article.objects.count(), 3)\n         self.assertQuerysetEqual(Article.objects.all(), [\n             '<Article: Django conquers world!>',\n             '<Article: Copyright is fine the way it is>',\n@@ -721,7 +720,6 @@ class FixtureLoadingTests(DumpDataAssertMixin, TestCase):\n \n         with mock.patch('django.core.management.commands.loaddata.sys.stdin', open(fixture_json)):\n             management.call_command('loaddata', '--format=json', '-', verbosity=0)\n-            self.assertEqual(Article.objects.count(), 2)\n             self.assertQuerysetEqual(Article.objects.all(), [\n                 '<Article: Time to reform copyright>',\n                 '<Article: Poker has no place on ESPN>',\n@@ -729,7 +727,6 @@ class FixtureLoadingTests(DumpDataAssertMixin, TestCase):\n \n         with mock.patch('django.core.management.commands.loaddata.sys.stdin', open(fixture_xml)):\n             management.call_command('loaddata', '--format=xml', '-', verbosity=0)\n-            self.assertEqual(Article.objects.count(), 3)\n             self.assertQuerysetEqual(Article.objects.all(), [\n                 '<Article: XML identified as leading cause of cancer>',\n                 '<Article: Time to reform copyright>',\n@@ -810,7 +807,6 @@ class FixtureTransactionTests(DumpDataAssertMixin, TransactionTestCase):\n class ForwardReferenceTests(DumpDataAssertMixin, TestCase):\n     def test_forward_reference_fk(self):\n         management.call_command('loaddata', 'forward_reference_fk.json', verbosity=0)\n-        self.assertEqual(NaturalKeyThing.objects.count(), 2)\n         t1, t2 = NaturalKeyThing.objects.all()\n         self.assertEqual(t1.other_thing, t2)\n         self.assertEqual(t2.other_thing, t1)\n@@ -828,7 +824,6 @@ class ForwardReferenceTests(DumpDataAssertMixin, TestCase):\n             'forward_reference_fk_natural_key.json',\n             verbosity=0,\n         )\n-        self.assertEqual(NaturalKeyThing.objects.count(), 2)\n         t1, t2 = NaturalKeyThing.objects.all()\n         self.assertEqual(t1.other_thing, t2)\n         self.assertEqual(t2.other_thing, t1)\ndiff --git a/tests/fixtures_model_package/tests.py b/tests/fixtures_model_package/tests.py\nindex 56d833b9f9..78afed1b90 100644\n--- a/tests/fixtures_model_package/tests.py\n+++ b/tests/fixtures_model_package/tests.py\n@@ -10,7 +10,6 @@ class SampleTestCase(TestCase):\n \n     def test_class_fixtures(self):\n         \"Test cases can load fixture objects into models defined in packages\"\n-        self.assertEqual(Article.objects.count(), 3)\n         self.assertQuerysetEqual(\n             Article.objects.all(), [\n                 \"Django conquers world!\",\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0eeccefa6..5c70229263 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1138,6 +1138,7 @@ class QuerySet:\n         \"\"\"\n         Return a new QuerySet instance that will select only distinct results.\n         \"\"\"\n+        self._not_support_combined_queries('distinct')\n         assert not self.query.is_sliced, \\\n             \"Cannot create distinct fields once a slice has been taken.\"\n         obj = self._chain()\nObtaining file:///testbed\nRequirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.2)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)\nRequirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.2) (4.1.1)\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 3.2\n    Uninstalling Django-3.2:\n      Successfully uninstalled Django-3.2\n  Running setup.py develop for Django\nSuccessfully installed Django-3.2\nTesting against Django installed in '/testbed/django'\nImporting application queries\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, messages, queries, sessions, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table queries_dumbcategory\n    Creating table queries_namedcategory\n    Creating table queries_tag\n    Creating table queries_note\n    Creating table queries_annotation\n    Creating table queries_datetimepk\n    Creating table queries_extrainfo\n    Creating table queries_author\n    Creating table queries_item\n    Creating table queries_report\n    Creating table queries_reportcomment\n    Creating table queries_ranking\n    Creating table queries_cover\n    Creating table queries_number\n    Creating table queries_valid\n    Creating table queries_x\n    Creating table queries_y\n    Creating table queries_loopx\n    Creating table queries_loopy\n    Creating table queries_loopz\n    Creating table queries_managedmodel\n    Creating table queries_detail\n    Creating table queries_member\n    Creating table queries_child\n    Creating table queries_custompk\n    Creating table queries_related\n    Creating table queries_custompktag\n    Creating table queries_celebrity\n    Creating table queries_tvchef\n    Creating table queries_fan\n    Creating table queries_leafa\n    Creating table queries_leafb\n    Creating table queries_join\n    Creating table queries_reservedname\n    Creating table queries_sharedconnection\n    Creating table queries_pointera\n    Creating table queries_pointerb\n    Creating table queries_singleobject\n    Creating table queries_relatedobject\n    Creating table queries_plaything\n    Creating table queries_article\n    Creating table queries_food\n    Creating table queries_eaten\n    Creating table queries_node\n    Creating table queries_objecta\n    Creating table queries_childobjecta\n    Creating table queries_objectb\n    Creating table queries_objectc\n    Creating table queries_simplecategory\n    Creating table queries_specialcategory\n    Creating table queries_categoryitem\n    Creating table queries_mixedcasefieldcategoryitem\n    Creating table queries_mixedcasedbcolumncategoryitem\n    Creating table queries_onetoonecategory\n    Creating table queries_categoryrelationship\n    Creating table queries_commonmixedcaseforeignkeys\n    Creating table queries_nullablename\n    Creating table queries_modeld\n    Creating table queries_modelc\n    Creating table queries_modelb\n    Creating table queries_modela\n    Creating table queries_job\n    Creating table queries_jobresponsibilities\n    Creating table queries_responsibility\n    Creating table queries_fk1\n    Creating table queries_fk2\n    Creating table queries_fk3\n    Creating table queries_basea\n    Creating table queries_identifier\n    Creating table queries_program\n    Creating table queries_channel\n    Creating table queries_book\n    Creating table queries_chapter\n    Creating table queries_paragraph\n    Creating table queries_page\n    Creating table queries_myobject\n    Creating table queries_order\n    Creating table queries_orderitem\n    Creating table queries_baseuser\n    Creating table queries_task\n    Creating table queries_staff\n    Creating table queries_staffuser\n    Creating table queries_ticket21203parent\n    Creating table queries_ticket21203child\n    Creating table queries_person\n    Creating table queries_company\n    Creating table queries_employment\n    Creating table queries_school\n    Creating table queries_student\n    Creating table queries_classroom\n    Creating table queries_teacher\n    Creating table queries_ticket23605aparent\n    Creating table queries_ticket23605a\n    Creating table queries_ticket23605b\n    Creating table queries_ticket23605c\n    Creating table Individual\n    Creating table RelatedIndividual\n    Creating table queries_customdbcolumn\n    Creating table queries_returningmodel\n    Creating table queries_nonintegerpkreturningmodel\n    Creating table queries_jsonfieldnullable\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (1 silenced).\n", {}]