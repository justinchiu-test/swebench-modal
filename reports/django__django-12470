[{"repo": "django/django", "instance_id": "django__django-12470", "base_commit": "142ab6846ac09d6d401e26fc8b6b988a583ac0f5", "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -709,9 +709,9 @@ def find_ordering_name(self, name, opts, alias=None, default_order='ASC',\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n         # If we get to this point and the field is a relation to another model,\n-        # append the default ordering for that model unless the attribute name\n-        # of the field is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name:\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n", "test_patch": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -181,6 +181,8 @@ class GrandParent(models.Model):\n     place = models.ForeignKey(Place, models.CASCADE, null=True, related_name='+')\n \n     class Meta:\n+        # Ordering used by test_inherited_ordering_pk_desc.\n+        ordering = ['-pk']\n         unique_together = ('first_name', 'last_name')\n \n \ndiff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -7,7 +7,7 @@\n \n from .models import (\n     Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n-    MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n+    MixinModel, Parent, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n     Supplier, Title, Worker,\n )\n \n@@ -204,6 +204,19 @@ class A(models.Model):\n \n         self.assertEqual(A.attr.called, (A, 'attr'))\n \n+    def test_inherited_ordering_pk_desc(self):\n+        p1 = Parent.objects.create(first_name='Joe', email='joe@email.com')\n+        p2 = Parent.objects.create(first_name='Jon', email='jon@email.com')\n+        expected_order_by_sql = 'ORDER BY %s.%s DESC' % (\n+            connection.ops.quote_name(Parent._meta.db_table),\n+            connection.ops.quote_name(\n+                Parent._meta.get_field('grandparent_ptr').column\n+            ),\n+        )\n+        qs = Parent.objects.all()\n+        self.assertSequenceEqual(qs, [p2, p1])\n+        self.assertIn(expected_order_by_sql, str(qs.query))\n+\n \n class ModelInheritanceDataTests(TestCase):\n     @classmethod\n", "problem_statement": "Inherited model doesn't correctly order by \"-pk\" when specified on Parent.Meta.ordering\nDescription\n\t\nGiven the following model definition:\nfrom django.db import models\nclass Parent(models.Model):\n\tclass Meta:\n\t\tordering = [\"-pk\"]\nclass Child(Parent):\n\tpass\nQuerying the Child class results in the following:\n>>> print(Child.objects.all().query)\nSELECT \"myapp_parent\".\"id\", \"myapp_child\".\"parent_ptr_id\" FROM \"myapp_child\" INNER JOIN \"myapp_parent\" ON (\"myapp_child\".\"parent_ptr_id\" = \"myapp_parent\".\"id\") ORDER BY \"myapp_parent\".\"id\" ASC\nThe query is ordered ASC but I expect the order to be DESC.\n", "hints_text": "", "created_at": "2020-02-19T04:48:55Z", "version": "3.1", "FAIL_TO_PASS": "[\"test_inherited_ordering_pk_desc (model_inheritance.tests.ModelInheritanceTests)\"]", "PASS_TO_PASS": "[\"test_abstract_fk_related_name (model_inheritance.tests.InheritanceSameModelNameTests)\", \"test_unique (model_inheritance.tests.InheritanceUniqueTests)\", \"test_unique_together (model_inheritance.tests.InheritanceUniqueTests)\", \"test_abstract (model_inheritance.tests.ModelInheritanceTests)\", \"test_abstract_parent_link (model_inheritance.tests.ModelInheritanceTests)\", \"Creating a child with non-abstract parents only issues INSERTs.\", \"test_custompk_m2m (model_inheritance.tests.ModelInheritanceTests)\", \"test_eq (model_inheritance.tests.ModelInheritanceTests)\", \"test_init_subclass (model_inheritance.tests.ModelInheritanceTests)\", \"test_meta_fields_and_ordering (model_inheritance.tests.ModelInheritanceTests)\", \"test_mixin_init (model_inheritance.tests.ModelInheritanceTests)\", \"test_model_with_distinct_accessors (model_inheritance.tests.ModelInheritanceTests)\", \"test_model_with_distinct_related_query_name (model_inheritance.tests.ModelInheritanceTests)\", \"test_reverse_relation_for_different_hierarchy_tree (model_inheritance.tests.ModelInheritanceTests)\", \"test_set_name (model_inheritance.tests.ModelInheritanceTests)\", \"test_update_parent_filtering (model_inheritance.tests.ModelInheritanceTests)\", \"test_exclude_inherited_on_null (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_filter_inherited_model (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_filter_inherited_on_null (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_filter_on_parent_returns_object_of_parent_type (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_inherited_does_not_exist_exception (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_inherited_multiple_objects_returned_exception (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_cache_reuse (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_child_one_to_one_link (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_child_one_to_one_link_on_nonrelated_objects (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_parent_fields_available_for_filtering_in_child_model (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_related_objects_for_inherited_models (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_select_related_defer (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_select_related_works_on_parent_model_fields (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_update_inherited_model (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_update_query_counts (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_update_works_on_parent_and_child_models_at_once (model_inheritance.tests.ModelInheritanceDataTests)\", \"test_values_works_on_parent_model_fields (model_inheritance.tests.ModelInheritanceDataTests)\"]", "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab"}, "Generating locales (this might take a while)...\n  en_US.UTF-8... done\nGeneration complete.\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/db/models/sql/compiler.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 142ab6846ac09d6d401e26fc8b6b988a583ac0f5\nAuthor: gowthamk63 <gowthamk63@gmail.com>\nDate:   Wed Mar 11 15:14:50 2020 -0400\n\n    Fixed #31123 -- Added --include-stale-apps option to the remove_stale_contenttypes management command.\n    \n    Co-Authored-By: Javier Buzzi <buzzi.javier@gmail.com>\n\ndiff --git a/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py b/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\nindex 4d282d524e..b1f966b032 100644\n--- a/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\n+++ b/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\n@@ -1,11 +1,11 @@\n+import itertools\n+\n from django.apps import apps\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import BaseCommand\n from django.db import DEFAULT_DB_ALIAS, router\n from django.db.models.deletion import Collector\n \n-from ...management import get_contenttypes_and_models\n-\n \n class Command(BaseCommand):\n \n@@ -18,18 +18,32 @@ class Command(BaseCommand):\n             '--database', default=DEFAULT_DB_ALIAS,\n             help='Nominates the database to use. Defaults to the \"default\" database.',\n         )\n+        parser.add_argument(\n+            '--include-stale-apps', action='store_true', default=False,\n+            help=(\n+                \"Deletes stale content types including ones from previously \"\n+                \"installed apps that have been removed from INSTALLED_APPS.\"\n+            ),\n+        )\n \n     def handle(self, **options):\n         db = options['database']\n+        include_stale_apps = options['include_stale_apps']\n         interactive = options['interactive']\n         verbosity = options['verbosity']\n \n-        for app_config in apps.get_app_configs():\n-            content_types, app_models = get_contenttypes_and_models(app_config, db, ContentType)\n-            to_remove = [\n-                ct for (model_name, ct) in content_types.items()\n-                if model_name not in app_models\n-            ]\n+        if not router.allow_migrate_model(db, ContentType):\n+            return\n+        ContentType.objects.clear_cache()\n+\n+        apps_content_types = itertools.groupby(\n+            ContentType.objects.using(db).order_by('app_label', 'model'),\n+            lambda obj: obj.app_label,\n+        )\n+        for app_label, content_types in apps_content_types:\n+            if not include_stale_apps and app_label not in apps.app_configs:\n+                continue\n+            to_remove = [ct for ct in content_types if ct.model_class() is None]\n             # Confirm that the content type is stale before deletion.\n             using = router.db_for_write(ContentType)\n             if to_remove:\ndiff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt\nindex a5ef671e26..56358b4ef8 100644\n--- a/docs/ref/django-admin.txt\n+++ b/docs/ref/django-admin.txt\n@@ -1651,6 +1651,13 @@ the deletion.\n \n Specifies the database to use. Defaults to ``default``.\n \n+.. django-admin-option:: --include-stale-apps\n+\n+.. versionadded:: 3.1\n+\n+Deletes stale content types including ones from previously installed apps that\n+have been removed from :setting:`INSTALLED_APPS`. Defaults to ``False``.\n+\n ``django.contrib.gis``\n ----------------------\n \ndiff --git a/docs/releases/3.1.txt b/docs/releases/3.1.txt\nindex efc57e8d01..77a71bbc43 100644\n--- a/docs/releases/3.1.txt\n+++ b/docs/releases/3.1.txt\n@@ -99,7 +99,9 @@ Minor features\n :mod:`django.contrib.contenttypes`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ...\n+* The new :option:`remove_stale_contenttypes --include-stale-apps` option\n+  allows removing stale content types from previously installed apps that have\n+  been removed from :setting:`INSTALLED_APPS`.\n \n :mod:`django.contrib.gis`\n ~~~~~~~~~~~~~~~~~~~~~~~~~\ndiff --git a/tests/contenttypes_tests/test_management.py b/tests/contenttypes_tests/test_management.py\nindex 3e375518c9..65842aa09e 100644\n--- a/tests/contenttypes_tests/test_management.py\n+++ b/tests/contenttypes_tests/test_management.py\n@@ -10,10 +10,15 @@ from django.test.utils import captured_stdout\n from .models import ModelWithNullFKToSite, Post\n \n \n-@modify_settings(INSTALLED_APPS={'append': ['no_models']})\n+@modify_settings(INSTALLED_APPS={'append': ['empty_models', 'no_models']})\n class RemoveStaleContentTypesTests(TestCase):\n     # Speed up tests by avoiding retrieving ContentTypes for all test apps.\n-    available_apps = ['contenttypes_tests', 'no_models', 'django.contrib.contenttypes']\n+    available_apps = [\n+        'contenttypes_tests',\n+        'empty_models',\n+        'no_models',\n+        'django.contrib.contenttypes',\n+    ]\n \n     def setUp(self):\n         self.before_count = ContentType.objects.count()\n@@ -65,9 +70,34 @@ class RemoveStaleContentTypesTests(TestCase):\n             contenttypes_management.create_contenttypes(self.app_config, interactive=False, verbosity=0, apps=apps)\n         self.assertEqual(ContentType.objects.count(), self.before_count + 1)\n \n-    def test_contenttypes_removed_in_apps_without_models(self):\n-        ContentType.objects.create(app_label='no_models', model='Fake')\n+    @modify_settings(INSTALLED_APPS={'remove': ['empty_models']})\n+    def test_contenttypes_removed_in_installed_apps_without_models(self):\n+        ContentType.objects.create(app_label='empty_models', model='Fake 1')\n+        ContentType.objects.create(app_label='no_models', model='Fake 2')\n         with mock.patch('builtins.input', return_value='yes'), captured_stdout() as stdout:\n             call_command('remove_stale_contenttypes', verbosity=2)\n-        self.assertIn(\"Deleting stale content type 'no_models | Fake'\", stdout.getvalue())\n+        self.assertNotIn(\n+            \"Deleting stale content type 'empty_models | Fake 1'\",\n+            stdout.getvalue(),\n+        )\n+        self.assertIn(\n+            \"Deleting stale content type 'no_models | Fake 2'\",\n+            stdout.getvalue(),\n+        )\n+        self.assertEqual(ContentType.objects.count(), self.before_count + 1)\n+\n+    @modify_settings(INSTALLED_APPS={'remove': ['empty_models']})\n+    def test_contenttypes_removed_for_apps_not_in_installed_apps(self):\n+        ContentType.objects.create(app_label='empty_models', model='Fake 1')\n+        ContentType.objects.create(app_label='no_models', model='Fake 2')\n+        with mock.patch('builtins.input', return_value='yes'), captured_stdout() as stdout:\n+            call_command('remove_stale_contenttypes', include_stale_apps=True, verbosity=2)\n+        self.assertIn(\n+            \"Deleting stale content type 'empty_models | Fake 1'\",\n+            stdout.getvalue(),\n+        )\n+        self.assertIn(\n+            \"Deleting stale content type 'no_models | Fake 2'\",\n+            stdout.getvalue(),\n+        )\n         self.assertEqual(ContentType.objects.count(), self.before_count)\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..63ca817355 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -709,9 +709,9 @@ class SQLCompiler:\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n \n         # If we get to this point and the field is a relation to another model,\n-        # append the default ordering for that model unless the attribute name\n-        # of the field is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name:\n+        # append the default ordering for that model unless it is the pk\n+        # shortcut or the attribute name of the field that is specified.\n+        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\nObtaining file:///testbed\nRequirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2024.2)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)\nRequirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.1) (4.1.1)\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 3.1\n    Uninstalling Django-3.1:\n      Successfully uninstalled Django-3.1\n  Running setup.py develop for Django\nSuccessfully installed Django-3.1\nTesting against Django installed in '/testbed/django'\nImporting application model_inheritance\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, messages, model_inheritance, sessions, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table model_inheritance_worker\n    Creating table model_inheritance_student\n    Creating table model_inheritance_post\n    Creating table model_inheritance_comment\n    Creating table model_inheritance_link\n    Creating table model_inheritance_chef\n    Creating table model_inheritance_place\n    Creating table my_restaurant\n    Creating table model_inheritance_italianrestaurant\n    Creating table model_inheritance_supplier\n    Creating table model_inheritance_parkinglot\n    Creating table model_inheritance_title\n    Creating table model_inheritance_mixinmodel\n    Creating table model_inheritance_base\n    Creating table model_inheritance_subbase\n    Creating table model_inheritance_grandparent\n    Creating table model_inheritance_parent\n    Creating table model_inheritance_child\n    Creating table model_inheritance_grandchild\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]