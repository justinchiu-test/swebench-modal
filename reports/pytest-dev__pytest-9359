[{"repo": "pytest-dev/pytest", "instance_id": "pytest-dev__pytest-9359", "base_commit": "e2ee3144ed6e241dea8d96215fcdca18b3892551", "patch": "diff --git a/src/_pytest/_code/source.py b/src/_pytest/_code/source.py\n--- a/src/_pytest/_code/source.py\n+++ b/src/_pytest/_code/source.py\n@@ -149,6 +149,11 @@ def get_statement_startend2(lineno: int, node: ast.AST) -> Tuple[int, Optional[i\n     values: List[int] = []\n     for x in ast.walk(node):\n         if isinstance(x, (ast.stmt, ast.ExceptHandler)):\n+            # Before Python 3.8, the lineno of a decorated class or function pointed at the decorator.\n+            # Since Python 3.8, the lineno points to the class/def, so need to include the decorators.\n+            if isinstance(x, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n+                for d in x.decorator_list:\n+                    values.append(d.lineno - 1)\n             values.append(x.lineno - 1)\n             for name in (\"finalbody\", \"orelse\"):\n                 val: Optional[List[ast.stmt]] = getattr(x, name, None)\n", "test_patch": "diff --git a/testing/code/test_source.py b/testing/code/test_source.py\n--- a/testing/code/test_source.py\n+++ b/testing/code/test_source.py\n@@ -618,6 +618,19 @@ def something():\n     assert str(source) == \"def func(): raise ValueError(42)\"\n \n \n+def test_decorator() -> None:\n+    s = \"\"\"\\\n+def foo(f):\n+    pass\n+\n+@foo\n+def bar():\n+    pass\n+    \"\"\"\n+    source = getstatement(3, s)\n+    assert \"@foo\" in str(source)\n+\n+\n def XXX_test_expression_multiline() -> None:\n     source = \"\"\"\\\n something\n", "problem_statement": "Error message prints extra code line when using assert in python3.9\n<!--\r\nThanks for submitting an issue!\r\n\r\nQuick check-list while reporting bugs:\r\n-->\r\n\r\n- [x] a detailed description of the bug or problem you are having\r\n- [x] output of `pip list` from the virtual environment you are using\r\n- [x] pytest and operating system versions\r\n- [ ] minimal example if possible\r\n### Description\r\nI have a test like this:\r\n```\r\nfrom pytest import fixture\r\n\r\n\r\ndef t(foo):\r\n    return foo\r\n\r\n\r\n@fixture\r\ndef foo():\r\n    return 1\r\n\r\n\r\ndef test_right_statement(foo):\r\n    assert foo == (3 + 2) * (6 + 9)\r\n\r\n    @t\r\n    def inner():\r\n        return 2\r\n\r\n    assert 2 == inner\r\n\r\n\r\n@t\r\ndef outer():\r\n    return 2\r\n```\r\nThe test \"test_right_statement\" fails at the first assertion,but print extra code (the \"t\" decorator) in error details, like this:\r\n\r\n```\r\n ============================= test session starts =============================\r\nplatform win32 -- Python 3.9.6, pytest-6.2.5, py-1.10.0, pluggy-0.13.1 -- \r\ncachedir: .pytest_cache\r\nrootdir: \r\nplugins: allure-pytest-2.9.45\r\ncollecting ... collected 1 item\r\n\r\ntest_statement.py::test_right_statement FAILED                           [100%]\r\n\r\n================================== FAILURES ===================================\r\n____________________________ test_right_statement _____________________________\r\n\r\nfoo = 1\r\n\r\n    def test_right_statement(foo):\r\n>       assert foo == (3 + 2) * (6 + 9)\r\n    \r\n        @t\r\nE       assert 1 == 75\r\nE         +1\r\nE         -75\r\n\r\ntest_statement.py:14: AssertionError\r\n=========================== short test summary info ===========================\r\nFAILED test_statement.py::test_right_statement - assert 1 == 75\r\n============================== 1 failed in 0.12s ==============================\r\n```\r\nAnd the same thing **did not** happen when using python3.7.10\uff1a\r\n```\r\n============================= test session starts =============================\r\nplatform win32 -- Python 3.7.10, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- \r\ncachedir: .pytest_cache\r\nrootdir: \r\ncollecting ... collected 1 item\r\n\r\ntest_statement.py::test_right_statement FAILED                           [100%]\r\n\r\n================================== FAILURES ===================================\r\n____________________________ test_right_statement _____________________________\r\n\r\nfoo = 1\r\n\r\n    def test_right_statement(foo):\r\n>       assert foo == (3 + 2) * (6 + 9)\r\nE       assert 1 == 75\r\nE         +1\r\nE         -75\r\n\r\ntest_statement.py:14: AssertionError\r\n=========================== short test summary info ===========================\r\nFAILED test_statement.py::test_right_statement - assert 1 == 75\r\n============================== 1 failed in 0.03s ==============================\r\n```\r\nIs there some problems when calculate the statement lineno?\r\n\r\n### pip list \r\n```\r\n$ pip list\r\nPackage            Version\r\n------------------ -------\r\natomicwrites       1.4.0\r\nattrs              21.2.0\r\ncolorama           0.4.4\r\nimportlib-metadata 4.8.2\r\niniconfig          1.1.1\r\npackaging          21.3\r\npip                21.3.1\r\npluggy             1.0.0\r\npy                 1.11.0\r\npyparsing          3.0.6\r\npytest             6.2.5\r\nsetuptools         59.4.0\r\ntoml               0.10.2\r\ntyping_extensions  4.0.0\r\nzipp               3.6.0\r\n\r\n```\r\n### pytest and operating system versions\r\npytest 6.2.5\r\nWindows 10 \r\nSeems to happen in python 3.9,not 3.7\r\n\n", "hints_text": "", "created_at": "2021-12-01T14:31:38Z", "version": "7.0", "FAIL_TO_PASS": "[\"testing/code/test_source.py::test_decorator\"]", "PASS_TO_PASS": "[\"testing/code/test_source.py::test_source_str_function\", \"testing/code/test_source.py::test_source_from_function\", \"testing/code/test_source.py::test_source_from_method\", \"testing/code/test_source.py::test_source_from_lines\", \"testing/code/test_source.py::test_source_from_inner_function\", \"testing/code/test_source.py::test_source_strips\", \"testing/code/test_source.py::test_source_strip_multiline\", \"testing/code/test_source.py::TestAccesses::test_getrange\", \"testing/code/test_source.py::TestAccesses::test_getrange_step_not_supported\", \"testing/code/test_source.py::TestAccesses::test_getline\", \"testing/code/test_source.py::TestAccesses::test_len\", \"testing/code/test_source.py::TestAccesses::test_iter\", \"testing/code/test_source.py::TestSourceParsing::test_getstatement\", \"testing/code/test_source.py::TestSourceParsing::test_getstatementrange_triple_quoted\", \"testing/code/test_source.py::TestSourceParsing::test_getstatementrange_within_constructs\", \"testing/code/test_source.py::TestSourceParsing::test_getstatementrange_bug\", \"testing/code/test_source.py::TestSourceParsing::test_getstatementrange_bug2\", \"testing/code/test_source.py::TestSourceParsing::test_getstatementrange_ast_issue58\", \"testing/code/test_source.py::TestSourceParsing::test_getstatementrange_out_of_bounds_py3\", \"testing/code/test_source.py::TestSourceParsing::test_getstatementrange_with_syntaxerror_issue7\", \"testing/code/test_source.py::test_getstartingblock_singleline\", \"testing/code/test_source.py::test_getline_finally\", \"testing/code/test_source.py::test_getfuncsource_dynamic\", \"testing/code/test_source.py::test_getfuncsource_with_multine_string\", \"testing/code/test_source.py::test_deindent\", \"testing/code/test_source.py::test_source_of_class_at_eof_without_newline\", \"testing/code/test_source.py::test_source_fallback\", \"testing/code/test_source.py::test_findsource_fallback\", \"testing/code/test_source.py::test_findsource\", \"testing/code/test_source.py::test_getfslineno\", \"testing/code/test_source.py::test_code_of_object_instance_with_call\", \"testing/code/test_source.py::test_oneline\", \"testing/code/test_source.py::test_comment_and_no_newline_at_end\", \"testing/code/test_source.py::test_oneline_and_comment\", \"testing/code/test_source.py::test_comments\", \"testing/code/test_source.py::test_comment_in_statement\", \"testing/code/test_source.py::test_source_with_decorator\", \"testing/code/test_source.py::test_single_line_else\", \"testing/code/test_source.py::test_single_line_finally\", \"testing/code/test_source.py::test_issue55\", \"testing/code/test_source.py::test_multiline\", \"testing/code/test_source.py::TestTry::test_body\", \"testing/code/test_source.py::TestTry::test_except_line\", \"testing/code/test_source.py::TestTry::test_except_body\", \"testing/code/test_source.py::TestTry::test_else\", \"testing/code/test_source.py::TestTryFinally::test_body\", \"testing/code/test_source.py::TestTryFinally::test_finally\", \"testing/code/test_source.py::TestIf::test_body\", \"testing/code/test_source.py::TestIf::test_elif_clause\", \"testing/code/test_source.py::TestIf::test_elif\", \"testing/code/test_source.py::TestIf::test_else\", \"testing/code/test_source.py::test_semicolon\", \"testing/code/test_source.py::test_def_online\", \"testing/code/test_source.py::test_getstartingblock_multiline\"]", "environment_setup_commit": "e2ee3144ed6e241dea8d96215fcdca18b3892551"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   src/_pytest/_code/source.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit e2ee3144ed6e241dea8d96215fcdca18b3892551\nMerge: fa240b0bb 86bcaad82\nAuthor: Zac Hatfield-Dodds <zac.hatfield.dodds@gmail.com>\nDate:   Tue Nov 30 22:47:35 2021 +1100\n\n    Merge pull request #9352 from truth-quark/spelling_fix_9351\n\ndiff --git a/src/_pytest/_code/source.py b/src/_pytest/_code/source.py\nindex 6f54057c0..208cfb800 100644\n--- a/src/_pytest/_code/source.py\n+++ b/src/_pytest/_code/source.py\n@@ -149,6 +149,11 @@ def get_statement_startend2(lineno: int, node: ast.AST) -> Tuple[int, Optional[i\n     values: List[int] = []\n     for x in ast.walk(node):\n         if isinstance(x, (ast.stmt, ast.ExceptHandler)):\n+            # Before Python 3.8, the lineno of a decorated class or function pointed at the decorator.\n+            # Since Python 3.8, the lineno points to the class/def, so need to include the decorators.\n+            if isinstance(x, (ast.ClassDef, ast.FunctionDef, ast.AsyncFunctionDef)):\n+                for d in x.decorator_list:\n+                    values.append(d.lineno - 1)\n             values.append(x.lineno - 1)\n             for name in (\"finalbody\", \"orelse\"):\n                 val: Optional[List[ast.stmt]] = getattr(x, name, None)\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: attrs>=19.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==7.0.0.dev332+ge2ee3144e.d20220101) (23.1.0)\nRequirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==7.0.0.dev332+ge2ee3144e.d20220101) (2.0.0)\nRequirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==7.0.0.dev332+ge2ee3144e.d20220101) (23.1)\nRequirement already satisfied: pluggy<2.0,>=0.12 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==7.0.0.dev332+ge2ee3144e.d20220101) (0.13.1)\nRequirement already satisfied: py>=1.8.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==7.0.0.dev332+ge2ee3144e.d20220101) (1.11.0)\nRequirement already satisfied: tomli>=1.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==7.0.0.dev332+ge2ee3144e.d20220101) (2.0.2)\nBuilding wheels for collected packages: pytest\n  Building editable for pytest (pyproject.toml): started\n  Building editable for pytest (pyproject.toml): finished with status 'done'\n  Created wheel for pytest: filename=pytest-7.0.0.dev332+ge2ee3144e.d20220101-0.editable-py3-none-any.whl size=5370 sha256=7b8d35d775233aceb7e344d2de1d3d55de75631ebb976f96d92da35a7948a09e\n  Stored in directory: /tmp/pip-ephem-wheel-cache-_s7mylvz/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built pytest\nInstalling collected packages: pytest\n  Attempting uninstall: pytest\n    Found existing installation: pytest 7.0.0.dev332+ge2ee3144e\n    Uninstalling pytest-7.0.0.dev332+ge2ee3144e:\n      Successfully uninstalled pytest-7.0.0.dev332+ge2ee3144e\nSuccessfully installed pytest-7.0.0.dev332+ge2ee3144e.d20220101\n============================= test session starts ==============================\nplatform linux -- Python 3.9.20, pytest-7.0.0.dev332+ge2ee3144e.d20220101, pluggy-0.13.1\nrootdir: /testbed, configfile: pyproject.toml\ncollected 55 items\n\ntesting/code/test_source.py ............................................ [ 80%]\n...........                                                              [100%]\n\n==================================== PASSES ====================================\n=========================== short test summary info ============================\nPASSED testing/code/test_source.py::test_source_str_function\nPASSED testing/code/test_source.py::test_source_from_function\nPASSED testing/code/test_source.py::test_source_from_method\nPASSED testing/code/test_source.py::test_source_from_lines\nPASSED testing/code/test_source.py::test_source_from_inner_function\nPASSED testing/code/test_source.py::test_source_strips\nPASSED testing/code/test_source.py::test_source_strip_multiline\nPASSED testing/code/test_source.py::TestAccesses::test_getrange\nPASSED testing/code/test_source.py::TestAccesses::test_getrange_step_not_supported\nPASSED testing/code/test_source.py::TestAccesses::test_getline\nPASSED testing/code/test_source.py::TestAccesses::test_len\nPASSED testing/code/test_source.py::TestAccesses::test_iter\nPASSED testing/code/test_source.py::TestSourceParsing::test_getstatement\nPASSED testing/code/test_source.py::TestSourceParsing::test_getstatementrange_triple_quoted\nPASSED testing/code/test_source.py::TestSourceParsing::test_getstatementrange_within_constructs\nPASSED testing/code/test_source.py::TestSourceParsing::test_getstatementrange_bug\nPASSED testing/code/test_source.py::TestSourceParsing::test_getstatementrange_bug2\nPASSED testing/code/test_source.py::TestSourceParsing::test_getstatementrange_ast_issue58\nPASSED testing/code/test_source.py::TestSourceParsing::test_getstatementrange_out_of_bounds_py3\nPASSED testing/code/test_source.py::TestSourceParsing::test_getstatementrange_with_syntaxerror_issue7\nPASSED testing/code/test_source.py::test_getstartingblock_singleline\nPASSED testing/code/test_source.py::test_getline_finally\nPASSED testing/code/test_source.py::test_getfuncsource_dynamic\nPASSED testing/code/test_source.py::test_getfuncsource_with_multine_string\nPASSED testing/code/test_source.py::test_deindent\nPASSED testing/code/test_source.py::test_source_of_class_at_eof_without_newline\nPASSED testing/code/test_source.py::test_source_fallback\nPASSED testing/code/test_source.py::test_findsource_fallback\nPASSED testing/code/test_source.py::test_findsource\nPASSED testing/code/test_source.py::test_getfslineno\nPASSED testing/code/test_source.py::test_code_of_object_instance_with_call\nPASSED testing/code/test_source.py::test_oneline\nPASSED testing/code/test_source.py::test_comment_and_no_newline_at_end\nPASSED testing/code/test_source.py::test_oneline_and_comment\nPASSED testing/code/test_source.py::test_comments\nPASSED testing/code/test_source.py::test_comment_in_statement\nPASSED testing/code/test_source.py::test_source_with_decorator\nPASSED testing/code/test_source.py::test_single_line_else\nPASSED testing/code/test_source.py::test_single_line_finally\nPASSED testing/code/test_source.py::test_issue55\nPASSED testing/code/test_source.py::test_multiline\nPASSED testing/code/test_source.py::TestTry::test_body\nPASSED testing/code/test_source.py::TestTry::test_except_line\nPASSED testing/code/test_source.py::TestTry::test_except_body\nPASSED testing/code/test_source.py::TestTry::test_else\nPASSED testing/code/test_source.py::TestTryFinally::test_body\nPASSED testing/code/test_source.py::TestTryFinally::test_finally\nPASSED testing/code/test_source.py::TestIf::test_body\nPASSED testing/code/test_source.py::TestIf::test_elif_clause\nPASSED testing/code/test_source.py::TestIf::test_elif\nPASSED testing/code/test_source.py::TestIf::test_else\nPASSED testing/code/test_source.py::test_semicolon\nPASSED testing/code/test_source.py::test_def_online\nPASSED testing/code/test_source.py::test_decorator\nPASSED testing/code/test_source.py::test_getstartingblock_multiline\n============================== 55 passed in 0.16s ==============================\n", {"testing/code/test_source.py::test_source_str_function": "PASSED", "testing/code/test_source.py::test_source_from_function": "PASSED", "testing/code/test_source.py::test_source_from_method": "PASSED", "testing/code/test_source.py::test_source_from_lines": "PASSED", "testing/code/test_source.py::test_source_from_inner_function": "PASSED", "testing/code/test_source.py::test_source_strips": "PASSED", "testing/code/test_source.py::test_source_strip_multiline": "PASSED", "testing/code/test_source.py::TestAccesses::test_getrange": "PASSED", "testing/code/test_source.py::TestAccesses::test_getrange_step_not_supported": "PASSED", "testing/code/test_source.py::TestAccesses::test_getline": "PASSED", "testing/code/test_source.py::TestAccesses::test_len": "PASSED", "testing/code/test_source.py::TestAccesses::test_iter": "PASSED", "testing/code/test_source.py::TestSourceParsing::test_getstatement": "PASSED", "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_triple_quoted": "PASSED", "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_within_constructs": "PASSED", "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_bug": "PASSED", "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_bug2": "PASSED", "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_ast_issue58": "PASSED", "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_out_of_bounds_py3": "PASSED", "testing/code/test_source.py::TestSourceParsing::test_getstatementrange_with_syntaxerror_issue7": "PASSED", "testing/code/test_source.py::test_getstartingblock_singleline": "PASSED", "testing/code/test_source.py::test_getline_finally": "PASSED", "testing/code/test_source.py::test_getfuncsource_dynamic": "PASSED", "testing/code/test_source.py::test_getfuncsource_with_multine_string": "PASSED", "testing/code/test_source.py::test_deindent": "PASSED", "testing/code/test_source.py::test_source_of_class_at_eof_without_newline": "PASSED", "testing/code/test_source.py::test_source_fallback": "PASSED", "testing/code/test_source.py::test_findsource_fallback": "PASSED", "testing/code/test_source.py::test_findsource": "PASSED", "testing/code/test_source.py::test_getfslineno": "PASSED", "testing/code/test_source.py::test_code_of_object_instance_with_call": "PASSED", "testing/code/test_source.py::test_oneline": "PASSED", "testing/code/test_source.py::test_comment_and_no_newline_at_end": "PASSED", "testing/code/test_source.py::test_oneline_and_comment": "PASSED", "testing/code/test_source.py::test_comments": "PASSED", "testing/code/test_source.py::test_comment_in_statement": "PASSED", "testing/code/test_source.py::test_source_with_decorator": "PASSED", "testing/code/test_source.py::test_single_line_else": "PASSED", "testing/code/test_source.py::test_single_line_finally": "PASSED", "testing/code/test_source.py::test_issue55": "PASSED", "testing/code/test_source.py::test_multiline": "PASSED", "testing/code/test_source.py::TestTry::test_body": "PASSED", "testing/code/test_source.py::TestTry::test_except_line": "PASSED", "testing/code/test_source.py::TestTry::test_except_body": "PASSED", "testing/code/test_source.py::TestTry::test_else": "PASSED", "testing/code/test_source.py::TestTryFinally::test_body": "PASSED", "testing/code/test_source.py::TestTryFinally::test_finally": "PASSED", "testing/code/test_source.py::TestIf::test_body": "PASSED", "testing/code/test_source.py::TestIf::test_elif_clause": "PASSED", "testing/code/test_source.py::TestIf::test_elif": "PASSED", "testing/code/test_source.py::TestIf::test_else": "PASSED", "testing/code/test_source.py::test_semicolon": "PASSED", "testing/code/test_source.py::test_def_online": "PASSED", "testing/code/test_source.py::test_decorator": "PASSED", "testing/code/test_source.py::test_getstartingblock_multiline": "PASSED"}]