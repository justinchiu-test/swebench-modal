[{"repo": "django/django", "instance_id": "django__django-13660", "base_commit": "50c3ac6fa9b7c8a94a6d1dc87edf775e3bc4d575", "patch": "diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -84,13 +84,13 @@ def python(self, options):\n     def handle(self, **options):\n         # Execute the command and exit.\n         if options['command']:\n-            exec(options['command'])\n+            exec(options['command'], globals())\n             return\n \n         # Execute stdin if it has anything to read and exit.\n         # Not supported on Windows due to select.select() limitations.\n         if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n-            exec(sys.stdin.read())\n+            exec(sys.stdin.read(), globals())\n             return\n \n         available_shells = [options['interface']] if options['interface'] else self.shells\n", "test_patch": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -9,6 +9,13 @@\n \n \n class ShellCommandTestCase(SimpleTestCase):\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n \n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n@@ -21,6 +28,16 @@ def test_command_option(self):\n             )\n         self.assertEqual(cm.records[0].getMessage(), __version__)\n \n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n     @mock.patch('django.core.management.commands.shell.select')\n     def test_stdin_read(self, select):\n@@ -30,6 +47,30 @@ def test_stdin_read(self, select):\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n \n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n", "problem_statement": "shell command crashes when passing (with -c) the python code with functions.\nDescription\n\t\nThe examples below use Python 3.7 and Django 2.2.16, but I checked that the code is the same on master and works the same in Python 3.8.\nHere's how \u200bpython -c works:\n$ python -c <<EOF \" \nimport django\ndef f():\n\t\tprint(django.__version__)\nf()\"\nEOF\n2.2.16\nHere's how \u200bpython -m django shell -c works (paths shortened for clarify):\n$ python -m django shell -c <<EOF \"\nimport django\ndef f():\n\t\tprint(django.__version__)\nf()\"\nEOF\nTraceback (most recent call last):\n File \"{sys.base_prefix}/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\n\t\"__main__\", mod_spec)\n File \"{sys.base_prefix}/lib/python3.7/runpy.py\", line 85, in _run_code\n\texec(code, run_globals)\n File \"{sys.prefix}/lib/python3.7/site-packages/django/__main__.py\", line 9, in <module>\n\tmanagement.execute_from_command_line()\n File \"{sys.prefix}/lib/python3.7/site-packages/django/core/management/__init__.py\", line 381, in execute_from_command_line\n\tutility.execute()\n File \"{sys.prefix}/lib/python3.7/site-packages/django/core/management/__init__.py\", line 375, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"{sys.prefix}/lib/python3.7/site-packages/django/core/management/base.py\", line 323, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"{sys.prefix}/lib/python3.7/site-packages/django/core/management/base.py\", line 364, in execute\n\toutput = self.handle(*args, **options)\n File \"{sys.prefix}/lib/python3.7/site-packages/django/core/management/commands/shell.py\", line 86, in handle\n\texec(options['command'])\n File \"<string>\", line 5, in <module>\n File \"<string>\", line 4, in f\nNameError: name 'django' is not defined\nThe problem is in the \u200busage of \u200bexec:\n\tdef handle(self, **options):\n\t\t# Execute the command and exit.\n\t\tif options['command']:\n\t\t\texec(options['command'])\n\t\t\treturn\n\t\t# Execute stdin if it has anything to read and exit.\n\t\t# Not supported on Windows due to select.select() limitations.\n\t\tif sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n\t\t\texec(sys.stdin.read())\n\t\t\treturn\nexec should be passed a dictionary containing a minimal set of globals. This can be done by just passing a new, empty dictionary as the second argument of exec.\n", "hints_text": "\u200bPR includes tests and documents the new feature in the release notes (but not in the main docs since it seems more like a bug fix than a new feature to me).", "created_at": "2020-11-09T22:43:32Z", "version": "3.2", "FAIL_TO_PASS": "[\"test_command_option_inline_function_call (shell.tests.ShellCommandTestCase)\", \"test_stdin_read_inline_function_call (shell.tests.ShellCommandTestCase)\"]", "PASS_TO_PASS": "[\"test_command_option (shell.tests.ShellCommandTestCase)\", \"test_command_option_globals (shell.tests.ShellCommandTestCase)\", \"test_shell_with_bpython_not_installed (shell.tests.ShellCommandTestCase)\", \"test_shell_with_ipython_not_installed (shell.tests.ShellCommandTestCase)\", \"test_stdin_read (shell.tests.ShellCommandTestCase)\", \"test_stdin_read_globals (shell.tests.ShellCommandTestCase)\"]", "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d"}, "Generating locales (this might take a while)...\n  en_US.UTF-8... done\nGeneration complete.\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/core/management/commands/shell.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 50c3ac6fa9b7c8a94a6d1dc87edf775e3bc4d575\nAuthor: Hasan Ramezani <hasan.r67@gmail.com>\nDate:   Tue Nov 10 23:22:30 2020 +0100\n\n    Fixed #31762 -- Made reloading the database for tests use the base manager.\n    \n    Co-authored-by: Eugene Kulak <kulak.eugene@gmail.com>\n\ndiff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 48a4a6994e..0099dd18bb 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -122,7 +122,7 @@ class BaseDatabaseCreation:\n                             model._meta.can_migrate(self.connection) and\n                             router.allow_migrate_model(self.connection.alias, model)\n                         ):\n-                            queryset = model._default_manager.using(\n+                            queryset = model._base_manager.using(\n                                 self.connection.alias,\n                             ).order_by(model._meta.pk.name)\n                             yield from queryset.iterator()\ndiff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 3d22cabd0f..3e29961d21 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,4 +1,5 @@\n import copy\n+import datetime\n from unittest import mock\n \n from django.db import DEFAULT_DB_ALIAS, connection, connections\n@@ -10,6 +11,7 @@ from django.test.utils import override_settings\n \n from ..models import (\n     CircularA, CircularB, Object, ObjectReference, ObjectSelfReference,\n+    SchoolClass,\n )\n \n \n@@ -175,3 +177,14 @@ class TestDeserializeDbFromString(TransactionTestCase):\n         obj_b = CircularB.objects.get()\n         self.assertEqual(obj_a.obj, obj_b)\n         self.assertEqual(obj_b.obj, obj_a)\n+\n+    def test_serialize_db_to_string_base_manager(self):\n+        SchoolClass.objects.create(year=1000, last_updated=datetime.datetime.now())\n+        with mock.patch('django.db.migrations.loader.MigrationLoader') as loader:\n+            # serialize_db_to_string() serializes only migrated apps, so mark\n+            # the backends app as migrated.\n+            loader_instance = loader.return_value\n+            loader_instance.migrated_apps = {'backends'}\n+            data = connection.creation.serialize_db_to_string()\n+        self.assertIn('\"model\": \"backends.schoolclass\"', data)\n+        self.assertIn('\"year\": 1000', data)\ndiff --git a/tests/backends/models.py b/tests/backends/models.py\nindex 096fdb57cc..5368e8d903 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -21,11 +21,18 @@ class Person(models.Model):\n         return '%s %s' % (self.first_name, self.last_name)\n \n \n+class SchoolClassManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().exclude(year=1000)\n+\n+\n class SchoolClass(models.Model):\n     year = models.PositiveIntegerField()\n     day = models.CharField(max_length=9, blank=True)\n     last_updated = models.DateTimeField()\n \n+    objects = SchoolClassManager()\n+\n \n class VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ(models.Model):\n     primary_key_is_quite_long_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = models.AutoField(primary_key=True)\ndiff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\nindex 2b306a579e..3e8a451e3e 100644\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -84,13 +84,13 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         # Execute the command and exit.\n         if options['command']:\n-            exec(options['command'])\n+            exec(options['command'], globals())\n             return\n \n         # Execute stdin if it has anything to read and exit.\n         # Not supported on Windows due to select.select() limitations.\n         if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n-            exec(sys.stdin.read())\n+            exec(sys.stdin.read(), globals())\n             return\n \n         available_shells = [options['interface']] if options['interface'] else self.shells\nObtaining file:///testbed\nRequirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.2)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)\nRequirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 3.2\n    Uninstalling Django-3.2:\n      Successfully uninstalled Django-3.2\n  Running setup.py develop for Django\nSuccessfully installed Django-3.2\nTesting against Django installed in '/testbed/django'\nImporting application shell\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n", {}]