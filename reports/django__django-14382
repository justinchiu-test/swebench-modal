[{"repo": "django/django", "instance_id": "django__django-14382", "base_commit": "29345aecf6e8d53ccb3577a3762bb0c263f7558d", "patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -73,9 +73,9 @@ def handle(self, app_or_project, name, target=None, **options):\n             except OSError as e:\n                 raise CommandError(e)\n         else:\n-            if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n+            if app_or_project == 'app':\n+                self.validate_name(os.path.basename(top_dir), 'directory')\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n                                    \"exist, please create it first.\" % top_dir)\n", "test_patch": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2206,6 +2206,13 @@ def test_importable_target_name(self):\n             \"another directory.\"\n         )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n     def test_overlaying_app(self):\n         # Use a subdirectory so it is outside the PYTHONPATH.\n         os.makedirs(os.path.join(self.test_dir, 'apps/app1'))\n", "problem_statement": "django-admin startapp with trailing slash in directory name results in error\nDescription\n\t\nBash tab-completion appends trailing slashes to directory names. django-admin startapp name directory/ results in the error:\nCommandError: '' is not a valid app directory. Please make sure the directory is a valid identifier.\nThe error is caused by \u200bline 77 of django/core/management/templates.py by calling basename() on the path with no consideration for a trailing slash:\nself.validate_name(os.path.basename(target), 'directory')\nRemoving potential trailing slashes would solve the problem:\nself.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n", "hints_text": "OK, yes, this seems a case we could handle. I didn't look into exactly why but it works for startproject: $ django-admin startproject ticket32734 testing/ Thanks for the report. Do you fancy making a PR?\nI didn't look into exactly why but it works for startproject This is the relevant piece of code: if app_or_project == 'app': self.validate_name(os.path.basename(target), 'directory') The changes were made here: \u200bhttps://github.com/django/django/pull/11270/files", "created_at": "2021-05-11T10:40:42Z", "version": "4.0", "FAIL_TO_PASS": "[\"test_trailing_slash_in_target_app_directory_name (admin_scripts.tests.StartApp)\"]", "PASS_TO_PASS": "[\"Program name is computed from the execute_from_command_line()'s argv\", \"test_params_to_runserver (admin_scripts.tests.ManageTestserver)\", \"test_testserver_handle_params (admin_scripts.tests.ManageTestserver)\", \"test_migration_warning_multiple_apps (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"test_migration_warning_one_app (admin_scripts.tests.ManageRunserverMigrationWarning)\", \"Ensure runserver.check_migrations doesn't choke on empty DATABASES.\", \"runserver.check_migrations() doesn't choke when a database is read-only.\", \"test_runner_addrport_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_ambiguous (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults (admin_scripts.tests.ManageRunserver)\", \"test_runner_custom_defaults_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname (admin_scripts.tests.ManageRunserver)\", \"test_runner_hostname_ipv6 (admin_scripts.tests.ManageRunserver)\", \"test_runserver_addrport (admin_scripts.tests.ManageRunserver)\", \"test_skip_checks (admin_scripts.tests.ManageRunserver)\", \"Apps listed first in INSTALLED_APPS have precedence.\", \"test_program_name_in_help (admin_scripts.tests.MainModule)\", \"test_non_existent_command_output (admin_scripts.tests.ManageManuallyConfiguredSettings)\", \"test_empty_allowed_hosts_error (admin_scripts.tests.ManageRunserverEmptyAllowedHosts)\", \"Regression for #20509\", \"no settings: manage.py builtin commands fail with an error when no settings provided\", \"no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"manage.py builtin commands does not swallow attribute error due to bad\", \"Test listing available commands output note when only core commands are\", \"import error: manage.py builtin commands shows useful diagnostic info\", \"test_key_error (admin_scripts.tests.ManageSettingsWithSettingsErrors)\", \"no settings: django-admin builtin commands fail with an error when no settings provided\", \"no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"Commands that don't require settings succeed if the settings file\", \"test_no_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"test_suggestions (admin_scripts.tests.DjangoAdminSuggestions)\", \"Options passed before settings are correctly handled.\", \"Options are correctly handled when they are passed before and after\", \"Options passed after settings are correctly handled.\", \"Short options passed after settings are correctly handled.\", \"Short options passed before settings are correctly handled.\", \"alternate: django-admin builtin commands fail with an error when no settings provided\", \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: django-admin builtin commands succeed if settings are provided in the environment\", \"alternate: django-admin builtin commands succeed if settings are provided as argument\", \"alternate: django-admin can't execute user commands unless settings are provided\", \"alternate: django-admin can execute user commands if settings are provided in environment\", \"alternate: django-admin can execute user commands if settings are provided as argument\", \"minimal: django-admin builtin commands fail with an error when no settings provided\", \"minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: django-admin builtin commands fail if settings are provided in the environment\", \"minimal: django-admin builtin commands fail if settings are provided as argument\", \"minimal: django-admin can't execute user commands unless settings are provided\", \"minimal: django-admin can't execute user commands, even if settings are provided in environment\", \"minimal: django-admin can't execute user commands, even if settings are provided as argument\", \"fulldefault: django-admin builtin commands fail with an error when no settings provided\", \"fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"fulldefault: django-admin builtin commands succeed if the environment contains settings\", \"fulldefault: django-admin builtin commands succeed if a settings file is provided\", \"fulldefault: django-admin can't execute user commands unless settings are provided\", \"fulldefault: django-admin can execute user commands if settings are provided in environment\", \"fulldefault: django-admin can execute user commands if settings are provided as argument\", \"default: django-admin builtin commands fail with an error when no settings provided\", \"default: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"default: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"default: django-admin builtin commands succeed if settings are provided in the environment\", \"default: django-admin builtin commands succeed if settings are provided as argument\", \"default: django-admin can't execute user commands if it isn't provided settings\", \"default: django-admin can execute user commands if settings are provided in environment\", \"default: django-admin can execute user commands if settings are provided as argument\", \"manage.py check does not raise errors when an app imports a base\", \"manage.py check reports an ImportError if an app's models.py\", \"manage.py check does not raise an ImportError validating a\", \"check reports an error on a nonexistent app in INSTALLED_APPS.\", \"All errors/warnings should be sorted by level and by message.\", \"When there are only warnings or less serious messages, then Django\", \"The all option also shows settings with the default value.\", \"Runs without error and emits settings diff.\", \"The --default option specifies an alternate settings module for\", \"test_dynamic_settings_configured (admin_scripts.tests.DiffSettings)\", \"test_settings_configured (admin_scripts.tests.DiffSettings)\", \"--output=unified emits settings diff in unified mode.\", \"--output=unified --all emits settings diff in unified mode and includes\", \"alternate: manage.py builtin commands fail with an error when no default settings provided\", \"alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"alternate: manage.py builtin commands work if settings are provided in the environment\", \"alternate: manage.py builtin commands work with settings provided as argument\", \"alternate: manage.py can't execute user commands without settings\", \"alternate: manage.py output syntax color can be deactivated with the `--no-color` option\", \"alternate: manage.py can execute user commands if settings are provided in environment\", \"alternate: manage.py can execute user commands if settings are provided as argument\", \"directory: django-admin builtin commands fail with an error when no settings provided\", \"directory: django-admin builtin commands fail if settings file (from environment) doesn't exist\", \"directory: django-admin builtin commands fail if settings file (from argument) doesn't exist\", \"directory: django-admin builtin commands succeed if settings are provided in the environment\", \"directory: django-admin builtin commands succeed if settings are provided as argument\", \"directory: django-admin can't execute user commands unless settings are provided\", \"directory: startapp creates the correct directory\", \"directory: startapp creates the correct directory with a custom template\", \"startapp creates the correct directory with Unicode characters.\", \"minimal: manage.py builtin commands fail with an error when no settings provided\", \"minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"minimal: manage.py builtin commands fail if settings are provided in the environment\", \"minimal: manage.py builtin commands fail if settings are provided as argument\", \"minimal: manage.py can't execute user commands without appropriate settings\", \"minimal: manage.py can't execute user commands, even if settings are provided in environment\", \"minimal: manage.py can't execute user commands, even if settings are provided as argument\", \"multiple: manage.py builtin commands fail with an error when no settings provided\", \"multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist\", \"multiple: manage.py can execute builtin commands if settings are provided in the environment\", \"multiple: manage.py builtin commands succeed if settings are provided as argument\", \"multiple: manage.py can't execute user commands using default settings\", \"multiple: manage.py can execute user commands if settings are provided in environment\", \"multiple: manage.py can execute user commands if settings are provided as argument\", \"fulldefault: manage.py builtin commands succeed when default settings are appropriate\", \"fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"fulldefault: manage.py builtin commands succeed if settings are provided in the environment\", \"fulldefault: manage.py builtin commands succeed if settings are provided as argument\", \"fulldefault: manage.py can execute user commands when default settings are appropriate\", \"fulldefault: manage.py can execute user commands when settings are provided in environment\", \"fulldefault: manage.py can execute user commands when settings are provided as argument\", \"default: manage.py builtin commands succeed when default settings are appropriate\", \"default: manage.py builtin commands fail if settings file (from environment) doesn't exist\", \"default: manage.py builtin commands succeed if settings file (from argument) doesn't exist\", \"default: manage.py builtin commands succeed if settings are provided in the environment\", \"default: manage.py builtin commands succeed if settings are provided as argument\", \"default: manage.py can execute user commands when default settings are appropriate\", \"default: manage.py can execute user commands when settings are provided in environment\", \"default: manage.py can execute user commands when settings are provided as argument\", \"startapp validates that app name doesn't clash with existing Python\", \"test_importable_target_name (admin_scripts.tests.StartApp)\", \"startapp validates that app name is a valid Python identifier.\", \"test_invalid_target_name (admin_scripts.tests.StartApp)\", \"test_overlaying_app (admin_scripts.tests.StartApp)\", \"test_template (admin_scripts.tests.StartApp)\", \"Make sure an exception is raised when the provided\", \"Make sure the startproject management command is able to use a different project template\", \"Make sure template context variables are rendered with proper values\", \"Make sure the startproject management command is able to use a different project template from a tarball\", \"The startproject management command is able to use a different project\", \"Startproject can use a project template from a tarball and create it in a specified location\", \"The startproject management command is able to render templates with\", \"Make sure the startproject management command is able to render custom files\", \"startproject validates that project name doesn't clash with existing\", \"Make sure the startproject management command validates a project name\", \"Make sure template context variables are not html escaped\", \"Startproject management command handles project template tar/zip balls from non-canonical urls\", \"Make sure the startproject management command creates a project\", \"Make sure the startproject management command creates a project in a specific directory\", \"Ticket 17475: Template dir passed has a trailing path separator\", \"Make sure passing the wrong kinds of arguments outputs an error and prints usage\", \"User AppCommands can execute when a single app name is provided\", \"User AppCommands raise an error when multiple app names are provided\", \"User AppCommands raise an error when no app name is provided\", \"User AppCommands can execute when some of the provided app names are invalid\", \"User BaseCommands can execute when a label is provided\", \"User BaseCommands can execute when no labels are provided\", \"User BaseCommands can execute with options when a label is provided\", \"User BaseCommands can execute with multiple options when a label is provided\", \"User BaseCommands outputs command usage when wrong option is specified\", \"Test run_from_argv properly terminates even with custom execute() (#19665)\", \"test_color_style (admin_scripts.tests.CommandTypes)\", \"test_command_color (admin_scripts.tests.CommandTypes)\", \"--no-color prevent colorization of the output\", \"test_custom_stderr (admin_scripts.tests.CommandTypes)\", \"test_custom_stdout (admin_scripts.tests.CommandTypes)\", \"test_force_color_command_init (admin_scripts.tests.CommandTypes)\", \"test_force_color_execute (admin_scripts.tests.CommandTypes)\", \"help is handled as a special case\", \"--help is equivalent to help\", \"help --commands shows the list of all available commands\", \"-h is handled as a short form of --help\", \"User LabelCommands can execute when a label is provided\", \"User LabelCommands are executed multiple times if multiple labels are provided\", \"User LabelCommands raise an error if no label is provided\", \"test_no_color_force_color_mutually_exclusive_command_init (admin_scripts.tests.CommandTypes)\", \"test_no_color_force_color_mutually_exclusive_execute (admin_scripts.tests.CommandTypes)\", \"NoArg Commands can be executed\", \"NoArg Commands raise an error if an argument is provided\", \"A command called from the command line should close connections after\", \"Non-ASCII message of CommandError does not raise any\", \"--help can be used on a specific command\", \"version is handled as a special case\", \"--version is equivalent to version\"]", "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/core/management/templates.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 29345aecf6e8d53ccb3577a3762bb0c263f7558d\nAuthor: snowman2 <alansnow21@gmail.com>\nDate:   Thu May 13 13:02:31 2021 +0200\n\n    Fixed #32721 -- Fixed migrations crash when adding namespaced spatial indexes on PostGIS.\n\ndiff --git a/django/contrib/gis/db/backends/postgis/schema.py b/django/contrib/gis/db/backends/postgis/schema.py\nindex a4b4910c36..c574bed84f 100644\n--- a/django/contrib/gis/db/backends/postgis/schema.py\n+++ b/django/contrib/gis/db/backends/postgis/schema.py\n@@ -33,10 +33,9 @@ class PostGISSchemaEditor(DatabaseSchemaEditor):\n         elif field.dim > 2 and not field.geography:\n             # Use \"nd\" ops which are fast on multidimensional cases\n             opclasses = [self.geom_index_ops_nd]\n-        if not kwargs.get('name'):\n-            name = '%s_%s_id' % (model._meta.db_table, field.column)\n-        else:\n-            name = kwargs['name']\n+        name = kwargs.get('name')\n+        if not name:\n+            name = self._create_index_name(model._meta.db_table, [field.column], '_id')\n \n         return super()._create_index_sql(\n             model,\ndiff --git a/tests/gis_tests/geoapp/test_indexes.py b/tests/gis_tests/geoapp/test_indexes.py\nindex 4aee5062d8..ce9376d810 100644\n--- a/tests/gis_tests/geoapp/test_indexes.py\n+++ b/tests/gis_tests/geoapp/test_indexes.py\n@@ -1,6 +1,8 @@\n+from django.contrib.gis.db import models\n from django.db import connection\n from django.db.models import Index\n from django.test import TransactionTestCase\n+from django.test.utils import isolate_apps\n \n from .models import City\n \n@@ -38,6 +40,30 @@ class SchemaIndexesTests(TransactionTestCase):\n             str(index.create_sql(City, editor)),\n         )\n \n+    @isolate_apps('gis_tests.geoapp')\n+    def test_namespaced_db_table(self):\n+        if not connection.ops.postgis:\n+            self.skipTest('PostGIS-specific test.')\n+\n+        class SchemaCity(models.Model):\n+            point = models.PointField()\n+\n+            class Meta:\n+                app_label = 'geoapp'\n+                db_table = 'django_schema\".\"geoapp_schema_city'\n+\n+        index = Index(fields=['point'])\n+        editor = connection.schema_editor()\n+        create_index_sql = str(index.create_sql(SchemaCity, editor))\n+        self.assertIn(\n+            '%s USING ' % editor.quote_name(SchemaCity._meta.db_table),\n+            create_index_sql,\n+        )\n+        self.assertIn(\n+            'CREATE INDEX \"geoapp_schema_city_point_9ed70651_id\" ',\n+            create_index_sql,\n+        )\n+\n     def test_index_name(self):\n         if not self.has_spatial_indexes(City._meta.db_table):\n             self.skipTest('Spatial indexes in Meta.indexes are not supported.')\ndiff --git a/tests/gis_tests/gis_migrations/test_operations.py b/tests/gis_tests/gis_migrations/test_operations.py\nindex 25d55619ed..6c7adcf359 100644\n--- a/tests/gis_tests/gis_migrations/test_operations.py\n+++ b/tests/gis_tests/gis_migrations/test_operations.py\n@@ -210,7 +210,7 @@ class OperationTests(OperationTestCase):\n         self.assertSpatialIndexExists('gis_neighborhood', 'point3d')\n \n         with connection.cursor() as cursor:\n-            index_name = 'gis_neighborhood_point3d_id'\n+            index_name = 'gis_neighborhood_point3d_113bc868_id'\n             cursor.execute(self.get_opclass_query, [index_name])\n             self.assertEqual(\n                 cursor.fetchall(),\ndiff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc6068286..8607ca8542 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -73,9 +73,9 @@ class TemplateCommand(BaseCommand):\n             except OSError as e:\n                 raise CommandError(e)\n         else:\n-            if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n+            if app_or_project == 'app':\n+                self.validate_name(os.path.basename(top_dir), 'directory')\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n                                    \"exist, please create it first.\" % top_dir)\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210514051028) (3.8.1)\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210514051028) (2024.2)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210514051028) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210514051028) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.0.dev20210514051028-0.editable-py3-none-any.whl size=26100 sha256=0be1be32884f2747170160417692da9939ea5b65635a98f91a693794e9cfcdac\n  Stored in directory: /tmp/pip-ephem-wheel-cache-q8ccesr_/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.0.dev20210514051028\n    Uninstalling Django-4.0.dev20210514051028:\n      Successfully uninstalled Django-4.0.dev20210514051028\nSuccessfully installed Django-4.0.dev20210514051028\nTesting against Django installed in '/testbed/django'\nImporting application admin_scripts\nFound 199 tests.\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: admin_scripts, auth, contenttypes, messages, sessions, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]