[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-21612", "base_commit": "b4777fdcef467b7132c055f8ac2c9a5059e6a145", "patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -333,7 +333,7 @@ def apow(i):\n                     b.append(apow(item))\n                 else:\n                     if (len(item.args[0].args) != 1 and\n-                            isinstance(item.base, Mul)):\n+                            isinstance(item.base, (Mul, Pow))):\n                         # To avoid situations like #14160\n                         pow_paren.append(item)\n                     b.append(item.base)\n", "test_patch": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -252,6 +252,8 @@ def test_Mul():\n     # For issue 14160\n     assert str(Mul(-2, x, Pow(Mul(y,y,evaluate=False), -1, evaluate=False),\n                                                 evaluate=False)) == '-2*x/(y*y)'\n+    # issue 21537\n+    assert str(Mul(x, Pow(1/y, -1, evaluate=False), evaluate=False)) == 'x/(1/y)'\n \n \n     class CustomClass1(Expr):\n", "problem_statement": "Latex parsing of fractions yields wrong expression due to missing brackets\nProblematic latex expression: `\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\"`\r\n\r\nis parsed to: `((a**3 + b)/c)/1/(c**2)`.\r\n\r\nExpected is: `((a**3 + b)/c)/(1/(c**2))`. \r\n\r\nThe missing brackets in the denominator result in a wrong expression.\r\n\r\n## Tested on\r\n\r\n- 1.8\r\n- 1.6.2\r\n\r\n## Reproduce:\r\n\r\n```\r\nroot@d31ef1c26093:/# python3\r\nPython 3.6.9 (default, Jan 26 2021, 15:33:00)\r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from sympy.parsing.latex import parse_latex\r\n>>> parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\r\n((a**3 + b)/c)/1/(c**2)\r\n\r\n\n", "hints_text": "This can be further simplified and fails with \r\n\r\n````python\r\n>>> parse_latex(\"\\\\frac{a}{\\\\frac{1}{b}}\")\r\na/1/b\r\n````\r\nbut works with a slighty different expression correctly (although the double brackets are not necessary):\r\n\r\n````python\r\n>>> parse_latex(\"\\\\frac{a}{\\\\frac{b}{c}}\")\r\na/((b/c))\r\n````\n> This can be further simplified and fails with\r\n\r\nThis is a printing, not a parsing error. If you look at the args of the result they are `(a, 1/(1/b))`\nThis can be fixed with \r\n```diff\r\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\r\nindex c3fdcdd435..3e4b7d1b19 100644\r\n--- a/sympy/printing/str.py\r\n+++ b/sympy/printing/str.py\r\n@@ -333,7 +333,7 @@ def apow(i):\r\n                     b.append(apow(item))\r\n                 else:\r\n                     if (len(item.args[0].args) != 1 and\r\n-                            isinstance(item.base, Mul)):\r\n+                            isinstance(item.base, (Mul, Pow))):\r\n                         # To avoid situations like #14160\r\n                         pow_paren.append(item)\r\n                     b.append(item.base)\r\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\r\nindex 690b1a8bbf..68c7d63769 100644\r\n--- a/sympy/printing/tests/test_str.py\r\n+++ b/sympy/printing/tests/test_str.py\r\n@@ -252,6 +252,8 @@ def test_Mul():\r\n     # For issue 14160\r\n     assert str(Mul(-2, x, Pow(Mul(y,y,evaluate=False), -1, evaluate=False),\r\n                                                 evaluate=False)) == '-2*x/(y*y)'\r\n+    # issue 21537\r\n+    assert str(Mul(x, Pow(1/y, -1, evaluate=False), evaluate=False)) == 'x/(1/y)'\r\n \r\n \r\n     class CustomClass1(Expr):\r\n```\n@smichr That's great, thank you for the quick fix! This works fine here now with all the test cases.\r\n\r\nI did not even consider that this is connected to printing and took the expression at face value. ", "created_at": "2021-06-14T04:31:24Z", "version": "1.9", "FAIL_TO_PASS": "[\"test_Mul\"]", "PASS_TO_PASS": "[\"test_printmethod\", \"test_Abs\", \"test_Add\", \"test_Catalan\", \"test_ComplexInfinity\", \"test_Derivative\", \"test_dict\", \"test_Dict\", \"test_Dummy\", \"test_EulerGamma\", \"test_Exp\", \"test_factorial\", \"test_Function\", \"test_Geometry\", \"test_GoldenRatio\", \"test_TribonacciConstant\", \"test_ImaginaryUnit\", \"test_Infinity\", \"test_Integer\", \"test_Integral\", \"test_Interval\", \"test_AccumBounds\", \"test_Lambda\", \"test_Limit\", \"test_list\", \"test_Matrix_str\", \"test_NaN\", \"test_NegativeInfinity\", \"test_Order\", \"test_Permutation_Cycle\", \"test_Pi\", \"test_Poly\", \"test_PolyRing\", \"test_FracField\", \"test_PolyElement\", \"test_FracElement\", \"test_GaussianInteger\", \"test_GaussianRational\", \"test_Pow\", \"test_sqrt\", \"test_Rational\", \"test_Float\", \"test_Relational\", \"test_AppliedBinaryRelation\", \"test_CRootOf\", \"test_RootSum\", \"test_GroebnerBasis\", \"test_set\", \"test_SparseMatrix\", \"test_Sum\", \"test_Symbol\", \"test_tuple\", \"test_Series_str\", \"test_TransferFunction_str\", \"test_Parallel_str\", \"test_Feedback_str\", \"test_Quaternion_str_printer\", \"test_Quantity_str\", \"test_wild_str\", \"test_wild_matchpy\", \"test_zeta\", \"test_issue_3101\", \"test_issue_3103\", \"test_issue_4021\", \"test_sstrrepr\", \"test_infinity\", \"test_full_prec\", \"test_noncommutative\", \"test_empty_printer\", \"test_settings\", \"test_RandomDomain\", \"test_FiniteSet\", \"test_UniversalSet\", \"test_PrettyPoly\", \"test_categories\", \"test_Tr\", \"test_issue_6387\", \"test_MatMul_MatAdd\", \"test_MatrixSlice\", \"test_true_false\", \"test_Equivalent\", \"test_Xor\", \"test_Complement\", \"test_SymmetricDifference\", \"test_UnevaluatedExpr\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_MatrixExpressions\", \"test_Subs_printing\", \"test_issue_15716\", \"test_str_special_matrices\", \"test_issue_14567\", \"test_issue_21119_21460\", \"test_Str\", \"test_diffgeom\", \"test_NDimArray\", \"test_Predicate\", \"test_AppliedPredicate\"]", "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   sympy/printing/str.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit b4777fdcef467b7132c055f8ac2c9a5059e6a145\nMerge: 47e86081be 495e2c3236\nAuthor: Oscar Benjamin <oscar.j.benjamin@gmail.com>\nDate:   Sun Jun 13 14:23:08 2021 +0100\n\n    Merge pull request #21607 from oscarbenjamin/pr_pythonsat\n    \n    maint(ci): don't test python-sat in Travis\n\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex c3fdcdd435..3e4b7d1b19 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -333,7 +333,7 @@ def apow(i):\n                     b.append(apow(item))\n                 else:\n                     if (len(item.args[0].args) != 1 and\n-                            isinstance(item.base, Mul)):\n+                            isinstance(item.base, (Mul, Pow))):\n                         # To avoid situations like #14160\n                         pow_paren.append(item)\n                     b.append(item.base)\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.9.dev0) (1.3.0)\nInstalling collected packages: sympy\n  Attempting uninstall: sympy\n    Found existing installation: sympy 1.9.dev0\n    Uninstalling sympy-1.9.dev0:\n      Successfully uninstalled sympy-1.9.dev0\n  Running setup.py develop for sympy\nSuccessfully installed sympy\n============================= test process starts ==============================\nexecutable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]\narchitecture:       64-bit\ncache:              no\nground types:       python \nnumpy:              None\nrandom seed:        72262145\nhash randomization: off\n\nsympy/printing/tests/test_str.py[100] \ntest_printmethod ok\ntest_Abs ok\ntest_Add ok\ntest_Catalan ok\ntest_ComplexInfinity ok\ntest_Derivative ok\ntest_dict ok\ntest_Dict ok\ntest_Dummy ok\ntest_EulerGamma ok\ntest_Exp ok\ntest_factorial ok\ntest_Function ok\ntest_Geometry ok\ntest_GoldenRatio ok\ntest_TribonacciConstant ok\ntest_ImaginaryUnit ok\ntest_Infinity ok\ntest_Integer ok\ntest_Integral ok\ntest_Interval ok\ntest_AccumBounds ok\ntest_Lambda ok\ntest_Limit ok\ntest_list ok\ntest_Matrix_str ok\ntest_Mul ok\ntest_NaN ok\ntest_NegativeInfinity ok\ntest_Order ok\ntest_Permutation_Cycle ok\ntest_Pi ok\ntest_Poly ok\ntest_PolyRing ok\ntest_FracField ok\ntest_PolyElement ok\ntest_FracElement ok\ntest_GaussianInteger ok\ntest_GaussianRational ok\ntest_Pow ok\ntest_sqrt ok\ntest_Rational ok\ntest_Float ok\ntest_Relational ok\ntest_AppliedBinaryRelation ok\ntest_CRootOf ok\ntest_RootSum ok\ntest_GroebnerBasis ok\ntest_set ok\ntest_SparseMatrix ok\ntest_Sum ok\ntest_Symbol ok\ntest_tuple ok\ntest_Series_str ok\ntest_TransferFunction_str ok\ntest_Parallel_str ok\ntest_Feedback_str ok\ntest_Quaternion_str_printer ok\ntest_Quantity_str ok\ntest_wild_str ok\ntest_wild_matchpy ok\ntest_zeta ok\ntest_issue_3101 ok\ntest_issue_3103 ok\ntest_issue_4021 ok\ntest_sstrrepr ok\ntest_infinity ok\ntest_full_prec ok\ntest_noncommutative ok\ntest_empty_printer ok\ntest_settings ok\ntest_RandomDomain ok\ntest_FiniteSet ok\ntest_UniversalSet ok\ntest_PrettyPoly ok\ntest_categories ok\ntest_Tr ok\ntest_issue_6387 ok\ntest_MatMul_MatAdd ok\ntest_MatrixSlice ok\ntest_true_false ok\ntest_Equivalent ok\ntest_Xor ok\ntest_Complement ok\ntest_SymmetricDifference ok\ntest_UnevaluatedExpr ok\ntest_MatrixElement_printing ok\ntest_MatrixSymbol_printing ok\ntest_MatrixExpressions ok\ntest_Subs_printing ok\ntest_issue_15716 ok\ntest_str_special_matrices ok\ntest_issue_14567 ok\ntest_issue_21119_21460 ok\ntest_Str ok\ntest_diffgeom ok\ntest_NDimArray ok\ntest_Predicate ok\ntest_AppliedPredicate ok\ntest_printing_str_array_expressions ok                                      [OK]\n\n\n================= tests finished: 100 passed, in 1.15 seconds ==================\n", {"test_printmethod": "PASSED", "test_Abs": "PASSED", "test_Add": "PASSED", "test_Catalan": "PASSED", "test_ComplexInfinity": "PASSED", "test_Derivative": "PASSED", "test_dict": "PASSED", "test_Dict": "PASSED", "test_Dummy": "PASSED", "test_EulerGamma": "PASSED", "test_Exp": "PASSED", "test_factorial": "PASSED", "test_Function": "PASSED", "test_Geometry": "PASSED", "test_GoldenRatio": "PASSED", "test_TribonacciConstant": "PASSED", "test_ImaginaryUnit": "PASSED", "test_Infinity": "PASSED", "test_Integer": "PASSED", "test_Integral": "PASSED", "test_Interval": "PASSED", "test_AccumBounds": "PASSED", "test_Lambda": "PASSED", "test_Limit": "PASSED", "test_list": "PASSED", "test_Matrix_str": "PASSED", "test_Mul": "PASSED", "test_NaN": "PASSED", "test_NegativeInfinity": "PASSED", "test_Order": "PASSED", "test_Permutation_Cycle": "PASSED", "test_Pi": "PASSED", "test_Poly": "PASSED", "test_PolyRing": "PASSED", "test_FracField": "PASSED", "test_PolyElement": "PASSED", "test_FracElement": "PASSED", "test_GaussianInteger": "PASSED", "test_GaussianRational": "PASSED", "test_Pow": "PASSED", "test_sqrt": "PASSED", "test_Rational": "PASSED", "test_Float": "PASSED", "test_Relational": "PASSED", "test_AppliedBinaryRelation": "PASSED", "test_CRootOf": "PASSED", "test_RootSum": "PASSED", "test_GroebnerBasis": "PASSED", "test_set": "PASSED", "test_SparseMatrix": "PASSED", "test_Sum": "PASSED", "test_Symbol": "PASSED", "test_tuple": "PASSED", "test_Series_str": "PASSED", "test_TransferFunction_str": "PASSED", "test_Parallel_str": "PASSED", "test_Feedback_str": "PASSED", "test_Quaternion_str_printer": "PASSED", "test_Quantity_str": "PASSED", "test_wild_str": "PASSED", "test_wild_matchpy": "PASSED", "test_zeta": "PASSED", "test_issue_3101": "PASSED", "test_issue_3103": "PASSED", "test_issue_4021": "PASSED", "test_sstrrepr": "PASSED", "test_infinity": "PASSED", "test_full_prec": "PASSED", "test_noncommutative": "PASSED", "test_empty_printer": "PASSED", "test_settings": "PASSED", "test_RandomDomain": "PASSED", "test_FiniteSet": "PASSED", "test_UniversalSet": "PASSED", "test_PrettyPoly": "PASSED", "test_categories": "PASSED", "test_Tr": "PASSED", "test_issue_6387": "PASSED", "test_MatMul_MatAdd": "PASSED", "test_MatrixSlice": "PASSED", "test_true_false": "PASSED", "test_Equivalent": "PASSED", "test_Xor": "PASSED", "test_Complement": "PASSED", "test_SymmetricDifference": "PASSED", "test_UnevaluatedExpr": "PASSED", "test_MatrixElement_printing": "PASSED", "test_MatrixSymbol_printing": "PASSED", "test_MatrixExpressions": "PASSED", "test_Subs_printing": "PASSED", "test_issue_15716": "PASSED", "test_str_special_matrices": "PASSED", "test_issue_14567": "PASSED", "test_issue_21119_21460": "PASSED", "test_Str": "PASSED", "test_diffgeom": "PASSED", "test_NDimArray": "PASSED", "test_Predicate": "PASSED", "test_AppliedPredicate": "PASSED"}]