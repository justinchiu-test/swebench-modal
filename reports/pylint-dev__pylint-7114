[{"repo": "pylint-dev/pylint", "instance_id": "pylint-dev__pylint-7114", "base_commit": "397c1703e8ae6349d33f7b99f45b2ccaf581e666", "patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -82,8 +82,10 @@ def expand_modules(\n             continue\n         module_path = get_python_path(something)\n         additional_search_path = [\".\", module_path] + path\n-        if os.path.exists(something):\n-            # this is a file or a directory\n+        if os.path.isfile(something) or os.path.exists(\n+            os.path.join(something, \"__init__.py\")\n+        ):\n+            # this is a file or a directory with an explicit __init__.py\n             try:\n                 modname = \".\".join(\n                     modutils.modpath_from_file(something, path=additional_search_path)\n@@ -103,9 +105,7 @@ def expand_modules(\n                 )\n                 if filepath is None:\n                     continue\n-            except (ImportError, SyntaxError) as ex:\n-                # The SyntaxError is a Python bug and should be\n-                # removed once we move away from imp.find_module: https://bugs.python.org/issue10588\n+            except ImportError as ex:\n                 errors.append({\"key\": \"fatal\", \"mod\": modname, \"ex\": ex})\n                 continue\n         filepath = os.path.normpath(filepath)\n", "test_patch": "diff --git a/tests/checkers/unittest_imports.py b/tests/checkers/unittest_imports.py\n--- a/tests/checkers/unittest_imports.py\n+++ b/tests/checkers/unittest_imports.py\n@@ -7,6 +7,7 @@\n import os\n \n import astroid\n+import pytest\n \n from pylint import epylint as lint\n from pylint.checkers import imports\n@@ -40,6 +41,9 @@ def test_relative_beyond_top_level(self) -> None:\n             self.checker.visit_importfrom(module.body[2].body[0])\n \n     @staticmethod\n+    @pytest.mark.xfail(\n+        reason=\"epylint manipulates cwd; these tests should not be using epylint\"\n+    )\n     def test_relative_beyond_top_level_two() -> None:\n         output, errors = lint.py_run(\n             f\"{os.path.join(REGR_DATA, 'beyond_top_two')} -d all -e relative-beyond-top-level\",\ndiff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -942,3 +942,12 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n     assert not linter.stats.by_msg\n+\n+\n+def test_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    with tempdir():\n+        create_files([\"identical/identical.py\"])\n+        with open(\"identical/identical.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"import imp\")\n+        initialized_linter.check([\"identical\"])\n+    assert initialized_linter.stats.by_msg[\"deprecated-module\"] == 1\n", "problem_statement": "Linting fails if module contains module of the same name\n### Steps to reproduce\r\n\r\nGiven multiple files:\r\n```\r\n.\r\n`-- a/\r\n    |-- a.py\r\n    `-- b.py\r\n```\r\nWhich are all empty, running `pylint a` fails:\r\n\r\n```\r\n$ pylint a\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n$\r\n```\r\n\r\nHowever, if I rename `a.py`, `pylint a` succeeds:\r\n\r\n```\r\n$ mv a/a.py a/c.py\r\n$ pylint a\r\n$\r\n```\r\nAlternatively, I can also `touch a/__init__.py`, but that shouldn't be necessary anymore.\r\n\r\n### Current behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present fails while searching for an `__init__.py` file.\r\n\r\n### Expected behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present should succeed.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 3.0.0a3\r\nastroid 2.5.6\r\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \r\n[GCC 9.3.0]\r\n```\r\n\r\n### Additional info\r\n\r\nThis also has some side-effects in module resolution. For example, if I create another file `r.py`:\r\n\r\n```\r\n.\r\n|-- a\r\n|   |-- a.py\r\n|   `-- b.py\r\n`-- r.py\r\n```\r\n\r\nWith the content:\r\n\r\n```\r\nfrom a import b\r\n```\r\n\r\nRunning `pylint -E r` will run fine, but `pylint -E r a` will fail. Not just for module a, but for module r as well.\r\n\r\n```\r\n************* Module r\r\nr.py:1:0: E0611: No name 'b' in module 'a' (no-name-in-module)\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n```\r\n\r\nAgain, if I rename `a.py` to `c.py`, `pylint -E r a` will work perfectly.\n", "hints_text": "@iFreilicht thanks for your report.\n#4909 was a duplicate.", "created_at": "2022-07-03T04:36:40Z", "version": "2.15", "FAIL_TO_PASS": "[\"tests/lint/unittest_lint.py::test_identically_named_nested_module\"]", "PASS_TO_PASS": "[\"tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level\", \"tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_three\", \"tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_four\", \"tests/lint/unittest_lint.py::test_no_args\", \"tests/lint/unittest_lint.py::test_one_arg[case0]\", \"tests/lint/unittest_lint.py::test_one_arg[case1]\", \"tests/lint/unittest_lint.py::test_one_arg[case2]\", \"tests/lint/unittest_lint.py::test_one_arg[case3]\", \"tests/lint/unittest_lint.py::test_one_arg[case4]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case0]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case1]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case2]\", \"tests/lint/unittest_lint.py::test_two_similar_args[case3]\", \"tests/lint/unittest_lint.py::test_more_args[case0]\", \"tests/lint/unittest_lint.py::test_more_args[case1]\", \"tests/lint/unittest_lint.py::test_more_args[case2]\", \"tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account\", \"tests/lint/unittest_lint.py::test_enable_message\", \"tests/lint/unittest_lint.py::test_enable_message_category\", \"tests/lint/unittest_lint.py::test_message_state_scope\", \"tests/lint/unittest_lint.py::test_enable_message_block\", \"tests/lint/unittest_lint.py::test_enable_by_symbol\", \"tests/lint/unittest_lint.py::test_enable_report\", \"tests/lint/unittest_lint.py::test_report_output_format_aliased\", \"tests/lint/unittest_lint.py::test_set_unsupported_reporter\", \"tests/lint/unittest_lint.py::test_set_option_1\", \"tests/lint/unittest_lint.py::test_set_option_2\", \"tests/lint/unittest_lint.py::test_enable_checkers\", \"tests/lint/unittest_lint.py::test_errors_only\", \"tests/lint/unittest_lint.py::test_disable_similar\", \"tests/lint/unittest_lint.py::test_disable_alot\", \"tests/lint/unittest_lint.py::test_addmessage\", \"tests/lint/unittest_lint.py::test_addmessage_invalid\", \"tests/lint/unittest_lint.py::test_load_plugin_command_line\", \"tests/lint/unittest_lint.py::test_load_plugin_config_file\", \"tests/lint/unittest_lint.py::test_load_plugin_configuration\", \"tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins\", \"tests/lint/unittest_lint.py::test_analyze_explicit_script\", \"tests/lint/unittest_lint.py::test_full_documentation\", \"tests/lint/unittest_lint.py::test_list_msgs_enabled\", \"tests/lint/unittest_lint.py::test_pylint_home\", \"tests/lint/unittest_lint.py::test_pylint_home_from_environ\", \"tests/lint/unittest_lint.py::test_warn_about_old_home\", \"tests/lint/unittest_lint.py::test_pylintrc\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir\", \"tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package\", \"tests/lint/unittest_lint.py::test_custom_should_analyze_file\", \"tests/lint/unittest_lint.py::test_multiprocessing[1]\", \"tests/lint/unittest_lint.py::test_multiprocessing[2]\", \"tests/lint/unittest_lint.py::test_filename_with__init__\", \"tests/lint/unittest_lint.py::test_by_module_statement_value\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-failing.py]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-ignored_subdirectory]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-failing.*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-ignored_*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*directory/ignored.*]\", \"tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*ignored.*/failing.*]\", \"tests/lint/unittest_lint.py::test_import_sibling_module_from_namespace\", \"tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir\"]", "environment_setup_commit": "e90702074e68e20dc8e5df5013ee3ecf22139c3e"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   pylint/lint/expand_modules.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 397c1703e8ae6349d33f7b99f45b2ccaf581e666\nAuthor: Dani\u00ebl van Noord <13665637+DanielNoord@users.noreply.github.com>\nDate:   Sun Jul 31 22:23:57 2022 +0200\n\n    Don't emit ``super-init-not-called`` for abstract ``__init__`` methods (#7227)\n\ndiff --git a/doc/whatsnew/fragments/3975.false_positive b/doc/whatsnew/fragments/3975.false_positive\nnew file mode 100644\nindex 000000000..f6c7f1f9d\n--- /dev/null\n+++ b/doc/whatsnew/fragments/3975.false_positive\n@@ -0,0 +1,3 @@\n+Don't report ``super-init-not-called`` for abstract ``__init__`` methods.\n+\n+Closes #3975\ndiff --git a/pylint/checkers/classes/class_checker.py b/pylint/checkers/classes/class_checker.py\nindex c345f41b5..fb329c6ee 100644\n--- a/pylint/checkers/classes/class_checker.py\n+++ b/pylint/checkers/classes/class_checker.py\n@@ -2034,7 +2034,7 @@ a metaclass class method.\",\n                         # Record that the class' init has been called\n                         parents_with_called_inits.add(node_frame_class(method))\n                     except KeyError:\n-                        if klass not in to_call:\n+                        if klass not in klass_node.ancestors(recurs=False):\n                             self.add_message(\n                                 \"non-parent-init-called\", node=expr, args=klass.name\n                             )\n@@ -2061,9 +2061,6 @@ a metaclass class method.\",\n \n             if decorated_with(node, [\"typing.overload\"]):\n                 continue\n-            cls = node_frame_class(method)\n-            if klass.name == \"object\" or (cls and cls.name == \"object\"):\n-                continue\n             self.add_message(\n                 \"super-init-not-called\",\n                 args=klass.name,\n@@ -2196,7 +2193,10 @@ def _ancestors_to_call(\n     to_call: dict[nodes.ClassDef, bases.UnboundMethod] = {}\n     for base_node in klass_node.ancestors(recurs=False):\n         try:\n-            to_call[base_node] = next(base_node.igetattr(method))\n+            init_node: bases.UnboundMethod = next(base_node.igetattr(method))\n+            if init_node.is_abstract():\n+                continue\n+            to_call[base_node] = init_node\n         except astroid.InferenceError:\n             continue\n     return to_call\ndiff --git a/tests/functional/i/init_not_called.py b/tests/functional/i/init_not_called.py\nindex a95efadf6..ac4baac6e 100644\n--- a/tests/functional/i/init_not_called.py\n+++ b/tests/functional/i/init_not_called.py\n@@ -59,9 +59,9 @@ class NewStyleC(object):\n \n \n class AssignedInit(NewStyleC):\n-    \"\"\"No init called.\"\"\"\n+    \"\"\"No init called, but abstract so that is fine.\"\"\"\n \n-    def __init__(self):  # [super-init-not-called]\n+    def __init__(self):\n         self.arg = 0\n \n \ndiff --git a/tests/functional/i/init_not_called.txt b/tests/functional/i/init_not_called.txt\nindex 9015d1e27..b944b5585 100644\n--- a/tests/functional/i/init_not_called.txt\n+++ b/tests/functional/i/init_not_called.txt\n@@ -1,2 +1 @@\n super-init-not-called:32:4:32:16:ZZZZ.__init__:__init__ method from base class 'BBBB' is not called:INFERENCE\n-super-init-not-called:64:4:64:16:AssignedInit.__init__:__init__ method from base class 'NewStyleC' is not called:INFERENCE\ndiff --git a/tests/functional/n/non/non_init_parent_called.py b/tests/functional/n/non/non_init_parent_called.py\nindex 7ad3f1932..0721703b2 100644\n--- a/tests/functional/n/non/non_init_parent_called.py\n+++ b/tests/functional/n/non/non_init_parent_called.py\n@@ -46,6 +46,6 @@ class Super2(dict):\n     \"\"\" Using the same idiom as Super, but without calling\n     the __init__ method.\n     \"\"\"\n-    def __init__(self):  # [super-init-not-called]\n+    def __init__(self):\n         base = super()\n         base.__woohoo__()  # [no-member]\ndiff --git a/tests/functional/n/non/non_init_parent_called.txt b/tests/functional/n/non/non_init_parent_called.txt\nindex 06de9a244..0d9e227c2 100644\n--- a/tests/functional/n/non/non_init_parent_called.txt\n+++ b/tests/functional/n/non/non_init_parent_called.txt\n@@ -2,5 +2,4 @@ import-error:7:0:7:18::Unable to import 'nonexistant':UNDEFINED\n non-parent-init-called:15:8:15:26:AAAA.__init__:__init__ method from a non direct base class 'BBBBMixin' is called:UNDEFINED\n no-member:23:50:23:77:CCC:Module 'functional.n.non.non_init_parent_called' has no 'BBBB' member:INFERENCE\n no-member:28:8:28:35:CCC.__init__:Module 'functional.n.non.non_init_parent_called' has no 'BBBB' member:INFERENCE\n-super-init-not-called:49:4:49:16:Super2.__init__:__init__ method from base class 'dict' is not called:INFERENCE\n no-member:51:8:51:23:Super2.__init__:Super of 'Super2' has no '__woohoo__' member:INFERENCE\ndiff --git a/tests/functional/s/super/super_init_not_called.py b/tests/functional/s/super/super_init_not_called.py\nindex 90a884b0b..f0bfe0329 100644\n--- a/tests/functional/s/super/super_init_not_called.py\n+++ b/tests/functional/s/super/super_init_not_called.py\n@@ -1,6 +1,7 @@\n \"\"\"Tests for super-init-not-called.\"\"\"\n # pylint: disable=too-few-public-methods, missing-class-docstring\n \n+import abc\n import ctypes\n \n \n@@ -53,5 +54,45 @@ class ChildThree(ParentWithoutInit):\n # Regression test as reported in\n # https://github.com/PyCQA/pylint/issues/6027\n class MyUnion(ctypes.Union):\n-    def __init__(self):  # [super-init-not-called]\n+    def __init__(self):\n         pass\n+\n+\n+# Should not be called on abstract __init__ methods\n+# https://github.com/PyCQA/pylint/issues/3975\n+class Base:\n+    def __init__(self, param: int, param_two: str) -> None:\n+        raise NotImplementedError()\n+\n+\n+class Derived(Base):\n+    def __init__(self, param: int, param_two: str) -> None:\n+        self.param = param + 1\n+        self.param_two = param_two[::-1]\n+\n+\n+class AbstractBase(abc.ABC):\n+    def __init__(self, param: int) -> None:\n+        self.param = param + 1\n+\n+    def abstract_method(self) -> str:\n+        \"\"\"This needs to be implemented.\"\"\"\n+        raise NotImplementedError()\n+\n+\n+class DerivedFromAbstract(AbstractBase):\n+    def __init__(self, param: int) -> None:  # [super-init-not-called]\n+        print(\"Called\")\n+\n+    def abstract_method(self) -> str:\n+        return \"Implemented\"\n+\n+\n+class DerivedFrom(UnknownParent):  # [undefined-variable]\n+    def __init__(self) -> None:\n+        print(\"Called\")\n+\n+\n+class DerivedFromUnknownGrandparent(DerivedFrom):\n+    def __init__(self) -> None:\n+        DerivedFrom.__init__(self)\ndiff --git a/tests/functional/s/super/super_init_not_called.rc b/tests/functional/s/super/super_init_not_called.rc\nnew file mode 100644\nindex 000000000..b8621ee57\n--- /dev/null\n+++ b/tests/functional/s/super/super_init_not_called.rc\n@@ -0,0 +1,4 @@\n+[testoptions]\n+# ctypes has a different implementation in PyPy and does have an inferable\n+# __init__ method for ctypes.Union.\n+except_implementations=PyPy\ndiff --git a/tests/functional/s/super/super_init_not_called.txt b/tests/functional/s/super/super_init_not_called.txt\nindex aafaa2023..002db0d76 100644\n--- a/tests/functional/s/super/super_init_not_called.txt\n+++ b/tests/functional/s/super/super_init_not_called.txt\n@@ -1,3 +1,4 @@\n-undefined-variable:18:23:18:40:UninferableChild:Undefined variable 'UninferableParent':UNDEFINED\n-super-init-not-called:49:4:49:16:ChildThree.__init__:__init__ method from base class 'ParentWithoutInit' is not called:INFERENCE\n-super-init-not-called:56:4:56:16:MyUnion.__init__:__init__ method from base class 'Union' is not called:INFERENCE\n+undefined-variable:19:23:19:40:UninferableChild:Undefined variable 'UninferableParent':UNDEFINED\n+super-init-not-called:50:4:50:16:ChildThree.__init__:__init__ method from base class 'ParentWithoutInit' is not called:INFERENCE\n+super-init-not-called:84:4:84:16:DerivedFromAbstract.__init__:__init__ method from base class 'AbstractBase' is not called:INFERENCE\n+undefined-variable:91:18:91:31:DerivedFrom:Undefined variable 'UnknownParent':UNDEFINED\ndiff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..d5fe60661 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -82,8 +82,10 @@ def expand_modules(\n             continue\n         module_path = get_python_path(something)\n         additional_search_path = [\".\", module_path] + path\n-        if os.path.exists(something):\n-            # this is a file or a directory\n+        if os.path.isfile(something) or os.path.exists(\n+            os.path.join(something, \"__init__.py\")\n+        ):\n+            # this is a file or a directory with an explicit __init__.py\n             try:\n                 modname = \".\".join(\n                     modutils.modpath_from_file(something, path=additional_search_path)\n@@ -103,9 +105,7 @@ def expand_modules(\n                 )\n                 if filepath is None:\n                     continue\n-            except (ImportError, SyntaxError) as ex:\n-                # The SyntaxError is a Python bug and should be\n-                # removed once we move away from imp.find_module: https://bugs.python.org/issue10588\n+            except ImportError as ex:\n                 errors.append({\"key\": \"fatal\", \"mod\": modname, \"ex\": ex})\n                 continue\n         filepath = os.path.normpath(filepath)\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'done'\n  Preparing metadata (pyproject.toml): started\n  Preparing metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: dill>=0.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (0.3.9)\nRequirement already satisfied: platformdirs>=2.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (4.3.6)\nRequirement already satisfied: astroid<=2.14.0-dev0,>=2.12.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (2.12.13)\nRequirement already satisfied: isort<6,>=4.2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (5.10.1)\nRequirement already satisfied: mccabe<0.8,>=0.6 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (0.7.0)\nRequirement already satisfied: tomlkit>=0.10.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (0.13.2)\nRequirement already satisfied: typing-extensions>=3.10.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (4.12.2)\nRequirement already satisfied: tomli>=1.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.0a0) (2.0.2)\nRequirement already satisfied: lazy-object-proxy>=1.4.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astroid<=2.14.0-dev0,>=2.12.2->pylint==2.15.0a0) (1.10.0)\nRequirement already satisfied: wrapt<2,>=1.11 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astroid<=2.14.0-dev0,>=2.12.2->pylint==2.15.0a0) (1.16.0)\nInstalling collected packages: pylint\n  Attempting uninstall: pylint\n    Found existing installation: pylint 2.15.0a0\n    Uninstalling pylint-2.15.0a0:\n      Successfully uninstalled pylint-2.15.0a0\n  Running setup.py develop for pylint\nSuccessfully installed pylint\n============================= test session starts ==============================\nplatform linux -- Python 3.9.20, pytest-7.4.4, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /testbed\nconfigfile: setup.cfg\nplugins: timeout-2.3.1, profiling-1.7.0, forked-1.6.0, cov-3.0.0, benchmark-4.0.0, xdist-2.5.0\ncollected 63 items\n\ntests/checkers/unittest_imports.py .x..FF                                [  9%]\ntests/lint/unittest_lint.py ...........................................s [ 79%]\nss...........                                                            [100%]\n\n=================================== FAILURES ===================================\n_________________ TestImportsChecker.test_wildcard_import_init _________________\n\nself = <checkers.unittest_imports.TestImportsChecker object at 0x7f87789bfe20>\n\n    def test_wildcard_import_init(self) -> None:\n        module = astroid.MANAGER.ast_from_module_name(\"init_wildcard\", REGR_DATA)\n        import_from = module.body[0]\n    \n        with self.assertNoMessages():\n>           self.checker.visit_importfrom(import_from)\n\ntests/checkers/unittest_imports.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.9/contextlib.py:126: in __exit__\n    next(self.gen)\npylint/testutils/checker_test_case.py:40: in assertNoMessages\n    yield\n/opt/miniconda3/envs/testbed/lib/python3.9/contextlib.py:126: in __exit__\n    next(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <checkers.unittest_imports.TestImportsChecker object at 0x7f87789bfe20>\nignore_position = False, messages = ()\ngot = [MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7f8778a9e130>, args=\"'empty'\", confidence=Confid...EFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)]\nno_msg = 'No message.'\n\n    @contextlib.contextmanager\n    def assertAddsMessages(\n        self, *messages: MessageTest, ignore_position: bool = False\n    ) -> Generator[None, None, None]:\n        \"\"\"Assert that exactly the given method adds the given messages.\n    \n        The list of messages must exactly match *all* the messages added by the\n        method. Additionally, we check to see whether the args in each message can\n        actually be substituted into the message string.\n    \n        Using the keyword argument `ignore_position`, all checks for position\n        arguments (line, col_offset, ...) will be skipped. This can be used to\n        just test messages for the correct node.\n        \"\"\"\n        yield\n        got = self.linter.release_messages()\n        no_msg = \"No message.\"\n        expected = \"\\n\".join(repr(m) for m in messages) or no_msg\n        got_str = \"\\n\".join(repr(m) for m in got) or no_msg\n        msg = (\n            \"Expected messages did not match actual.\\n\"\n            f\"\\nExpected:\\n{expected}\\n\\nGot:\\n{got_str}\\n\"\n        )\n    \n>       assert len(messages) == len(got), msg\nE       AssertionError: Expected messages did not match actual.\nE         \nE         Expected:\nE         No message.\nE         \nE         Got:\nE         MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7f8778a9e130>, args=\"'empty'\", confidence=Confidence(name='UNDEFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)\nE         \nE       assert 0 == 1\nE        +  where 0 = len(())\nE        +  and   1 = len([MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7f8778a9e130>, args=\"'empty'\", confidence=Confid...EFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)])\n\npylint/testutils/checker_test_case.py:66: AssertionError\n_______________ TestImportsChecker.test_wildcard_import_non_init _______________\n\nself = <checkers.unittest_imports.TestImportsChecker object at 0x7f87789bf3a0>\n\n    def test_wildcard_import_non_init(self) -> None:\n        module = astroid.MANAGER.ast_from_module_name(\"wildcard\", REGR_DATA)\n        import_from = module.body[0]\n    \n        msg = MessageTest(\n            msg_id=\"wildcard-import\",\n            node=import_from,\n            args=\"empty\",\n            confidence=UNDEFINED,\n            line=1,\n            col_offset=0,\n            end_line=1,\n            end_col_offset=19,\n        )\n        with self.assertAddsMessages(msg):\n>           self.checker.visit_importfrom(import_from)\n\ntests/checkers/unittest_imports.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.9/contextlib.py:126: in __exit__\n    next(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <checkers.unittest_imports.TestImportsChecker object at 0x7f87789bf3a0>\nignore_position = False\nmessages = (MessageTest(msg_id='wildcard-import', line=1, node=<ImportFrom l.1 at 0x7f8778ab8160>, args='empty', confidence=Confi...FINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19),)\ngot = [MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7f8778ab8160>, args=\"'empty'\", confidence=Confid...EFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)]\nno_msg = 'No message.'\n\n    @contextlib.contextmanager\n    def assertAddsMessages(\n        self, *messages: MessageTest, ignore_position: bool = False\n    ) -> Generator[None, None, None]:\n        \"\"\"Assert that exactly the given method adds the given messages.\n    \n        The list of messages must exactly match *all* the messages added by the\n        method. Additionally, we check to see whether the args in each message can\n        actually be substituted into the message string.\n    \n        Using the keyword argument `ignore_position`, all checks for position\n        arguments (line, col_offset, ...) will be skipped. This can be used to\n        just test messages for the correct node.\n        \"\"\"\n        yield\n        got = self.linter.release_messages()\n        no_msg = \"No message.\"\n        expected = \"\\n\".join(repr(m) for m in messages) or no_msg\n        got_str = \"\\n\".join(repr(m) for m in got) or no_msg\n        msg = (\n            \"Expected messages did not match actual.\\n\"\n            f\"\\nExpected:\\n{expected}\\n\\nGot:\\n{got_str}\\n\"\n        )\n    \n>       assert len(messages) == len(got), msg\nE       AssertionError: Expected messages did not match actual.\nE         \nE         Expected:\nE         MessageTest(msg_id='wildcard-import', line=1, node=<ImportFrom l.1 at 0x7f8778ab8160>, args='empty', confidence=Confidence(name='UNDEFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)\nE         \nE         Got:\nE         MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7f8778ab8160>, args=\"'empty'\", confidence=Confidence(name='UNDEFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)\nE         MessageTest(msg_id='wildcard-import', line=1, node=<ImportFrom l.1 at 0x7f8778ab8160>, args='empty', confidence=Confidence(name='UNDEFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)\nE         \nE       assert 1 == 2\nE        +  where 1 = len((MessageTest(msg_id='wildcard-import', line=1, node=<ImportFrom l.1 at 0x7f8778ab8160>, args='empty', confidence=Confi...FINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19),))\nE        +  and   2 = len([MessageTest(msg_id='import-error', line=1, node=<ImportFrom l.1 at 0x7f8778ab8160>, args=\"'empty'\", confidence=Confid...EFINED', description='Warning without any associated confidence level.'), col_offset=0, end_line=1, end_col_offset=19)])\n\npylint/testutils/checker_test_case.py:66: AssertionError\n==================================== PASSES ====================================\n__________________ test_init_hooks_called_before_load_plugins __________________\n----------------------------- Captured stderr call -----------------------------\nOption --init-hook expects a value\n=========================== short test summary info ============================\nPASSED tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level\nPASSED tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_three\nPASSED tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_four\nPASSED tests/lint/unittest_lint.py::test_no_args\nPASSED tests/lint/unittest_lint.py::test_one_arg[case0]\nPASSED tests/lint/unittest_lint.py::test_one_arg[case1]\nPASSED tests/lint/unittest_lint.py::test_one_arg[case2]\nPASSED tests/lint/unittest_lint.py::test_one_arg[case3]\nPASSED tests/lint/unittest_lint.py::test_one_arg[case4]\nPASSED tests/lint/unittest_lint.py::test_two_similar_args[case0]\nPASSED tests/lint/unittest_lint.py::test_two_similar_args[case1]\nPASSED tests/lint/unittest_lint.py::test_two_similar_args[case2]\nPASSED tests/lint/unittest_lint.py::test_two_similar_args[case3]\nPASSED tests/lint/unittest_lint.py::test_more_args[case0]\nPASSED tests/lint/unittest_lint.py::test_more_args[case1]\nPASSED tests/lint/unittest_lint.py::test_more_args[case2]\nPASSED tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account\nPASSED tests/lint/unittest_lint.py::test_enable_message\nPASSED tests/lint/unittest_lint.py::test_enable_message_category\nPASSED tests/lint/unittest_lint.py::test_message_state_scope\nPASSED tests/lint/unittest_lint.py::test_enable_message_block\nPASSED tests/lint/unittest_lint.py::test_enable_by_symbol\nPASSED tests/lint/unittest_lint.py::test_enable_report\nPASSED tests/lint/unittest_lint.py::test_report_output_format_aliased\nPASSED tests/lint/unittest_lint.py::test_set_unsupported_reporter\nPASSED tests/lint/unittest_lint.py::test_set_option_1\nPASSED tests/lint/unittest_lint.py::test_set_option_2\nPASSED tests/lint/unittest_lint.py::test_enable_checkers\nPASSED tests/lint/unittest_lint.py::test_errors_only\nPASSED tests/lint/unittest_lint.py::test_disable_similar\nPASSED tests/lint/unittest_lint.py::test_disable_alot\nPASSED tests/lint/unittest_lint.py::test_addmessage\nPASSED tests/lint/unittest_lint.py::test_addmessage_invalid\nPASSED tests/lint/unittest_lint.py::test_load_plugin_command_line\nPASSED tests/lint/unittest_lint.py::test_load_plugin_config_file\nPASSED tests/lint/unittest_lint.py::test_load_plugin_configuration\nPASSED tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins\nPASSED tests/lint/unittest_lint.py::test_analyze_explicit_script\nPASSED tests/lint/unittest_lint.py::test_full_documentation\nPASSED tests/lint/unittest_lint.py::test_list_msgs_enabled\nPASSED tests/lint/unittest_lint.py::test_pylint_home\nPASSED tests/lint/unittest_lint.py::test_pylint_home_from_environ\nPASSED tests/lint/unittest_lint.py::test_warn_about_old_home\nPASSED tests/lint/unittest_lint.py::test_pylintrc\nPASSED tests/lint/unittest_lint.py::test_pylintrc_parentdir\nPASSED tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package\nPASSED tests/lint/unittest_lint.py::test_filename_with__init__\nPASSED tests/lint/unittest_lint.py::test_by_module_statement_value\nPASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-failing.py]\nPASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-ignored_subdirectory]\nPASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-failing.*]\nPASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-ignored_*]\nPASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*directory/ignored.*]\nPASSED tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*ignored.*/failing.*]\nPASSED tests/lint/unittest_lint.py::test_import_sibling_module_from_namespace\nPASSED tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir\nPASSED tests/lint/unittest_lint.py::test_identically_named_nested_module\nSKIPPED [1] tests/lint/unittest_lint.py:781: Need 2 or more cores for test to be meaningful\nSKIPPED [2] tests/lint/unittest_lint.py:810: Need 2 or more cores for test to be meaningful\nXFAIL tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_two - epylint manipulates cwd; these tests should not be using epylint\nFAILED tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_init\nFAILED tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_non_init\n============== 2 failed, 57 passed, 3 skipped, 1 xfailed in 3.24s ==============\n", {"tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level": "PASSED", "tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_three": "PASSED", "tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level_four": "PASSED", "tests/lint/unittest_lint.py::test_no_args": "PASSED", "tests/lint/unittest_lint.py::test_one_arg[case0]": "PASSED", "tests/lint/unittest_lint.py::test_one_arg[case1]": "PASSED", "tests/lint/unittest_lint.py::test_one_arg[case2]": "PASSED", "tests/lint/unittest_lint.py::test_one_arg[case3]": "PASSED", "tests/lint/unittest_lint.py::test_one_arg[case4]": "PASSED", "tests/lint/unittest_lint.py::test_two_similar_args[case0]": "PASSED", "tests/lint/unittest_lint.py::test_two_similar_args[case1]": "PASSED", "tests/lint/unittest_lint.py::test_two_similar_args[case2]": "PASSED", "tests/lint/unittest_lint.py::test_two_similar_args[case3]": "PASSED", "tests/lint/unittest_lint.py::test_more_args[case0]": "PASSED", "tests/lint/unittest_lint.py::test_more_args[case1]": "PASSED", "tests/lint/unittest_lint.py::test_more_args[case2]": "PASSED", "tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account": "PASSED", "tests/lint/unittest_lint.py::test_enable_message": "PASSED", "tests/lint/unittest_lint.py::test_enable_message_category": "PASSED", "tests/lint/unittest_lint.py::test_message_state_scope": "PASSED", "tests/lint/unittest_lint.py::test_enable_message_block": "PASSED", "tests/lint/unittest_lint.py::test_enable_by_symbol": "PASSED", "tests/lint/unittest_lint.py::test_enable_report": "PASSED", "tests/lint/unittest_lint.py::test_report_output_format_aliased": "PASSED", "tests/lint/unittest_lint.py::test_set_unsupported_reporter": "PASSED", "tests/lint/unittest_lint.py::test_set_option_1": "PASSED", "tests/lint/unittest_lint.py::test_set_option_2": "PASSED", "tests/lint/unittest_lint.py::test_enable_checkers": "PASSED", "tests/lint/unittest_lint.py::test_errors_only": "PASSED", "tests/lint/unittest_lint.py::test_disable_similar": "PASSED", "tests/lint/unittest_lint.py::test_disable_alot": "PASSED", "tests/lint/unittest_lint.py::test_addmessage": "PASSED", "tests/lint/unittest_lint.py::test_addmessage_invalid": "PASSED", "tests/lint/unittest_lint.py::test_load_plugin_command_line": "PASSED", "tests/lint/unittest_lint.py::test_load_plugin_config_file": "PASSED", "tests/lint/unittest_lint.py::test_load_plugin_configuration": "PASSED", "tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins": "PASSED", "tests/lint/unittest_lint.py::test_analyze_explicit_script": "PASSED", "tests/lint/unittest_lint.py::test_full_documentation": "PASSED", "tests/lint/unittest_lint.py::test_list_msgs_enabled": "PASSED", "tests/lint/unittest_lint.py::test_pylint_home": "PASSED", "tests/lint/unittest_lint.py::test_pylint_home_from_environ": "PASSED", "tests/lint/unittest_lint.py::test_warn_about_old_home": "PASSED", "tests/lint/unittest_lint.py::test_pylintrc": "PASSED", "tests/lint/unittest_lint.py::test_pylintrc_parentdir": "PASSED", "tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package": "PASSED", "tests/lint/unittest_lint.py::test_filename_with__init__": "PASSED", "tests/lint/unittest_lint.py::test_by_module_statement_value": "PASSED", "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-failing.py]": "PASSED", "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-ignored_subdirectory]": "PASSED", "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-failing.*]": "PASSED", "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-patterns-ignored_*]": "PASSED", "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*directory/ignored.*]": "PASSED", "tests/lint/unittest_lint.py::test_recursive_ignore[--ignore-paths-.*ignored.*/failing.*]": "PASSED", "tests/lint/unittest_lint.py::test_import_sibling_module_from_namespace": "PASSED", "tests/lint/unittest_lint.py::test_lint_namespace_package_under_dir": "PASSED", "tests/lint/unittest_lint.py::test_identically_named_nested_module": "PASSED", "[1]": "SKIPPED", "[2]": "SKIPPED", "tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_init": "FAILED", "tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_non_init": "FAILED"}]