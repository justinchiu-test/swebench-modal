[{"repo": "django/django", "instance_id": "django__django-16046", "base_commit": "ec13e801b820614ff374cb0046092caab8d67249", "patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -25,6 +25,8 @@ def format(\n         module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).\n     * thousand_sep: Thousand separator symbol (for example \",\")\n     \"\"\"\n+    if number is None or number == \"\":\n+        return mark_safe(number)\n     use_grouping = (\n         use_l10n or (use_l10n is None and settings.USE_L10N)\n     ) and settings.USE_THOUSAND_SEPARATOR\n", "test_patch": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -172,3 +172,7 @@ def __format__(self, specifier, **kwargs):\n \n         price = EuroDecimal(\"1.23\")\n         self.assertEqual(nformat(price, \",\"), \"\u20ac 1,23\")\n+\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n", "problem_statement": "Fix numberformat.py \"string index out of range\" when null\nDescription\n\t\nWhen:\nif str_number[0] == \"-\"\nencounters a number field that's null when formatting for the admin list_display this causes an \nIndexError: string index out of range\nI can attach the proposed fix here, or open a pull request on GitHub if you like?\n", "hints_text": "proposed fix patch\nPlease provide a pull request, including a test.", "created_at": "2022-09-10T13:27:38Z", "version": "4.2", "FAIL_TO_PASS": "[\"test_empty (utils_tests.test_numberformat.TestNumberFormat)\"]", "PASS_TO_PASS": "[\"test_decimal_numbers (utils_tests.test_numberformat.TestNumberFormat)\", \"test_decimal_subclass (utils_tests.test_numberformat.TestNumberFormat)\", \"test_float_numbers (utils_tests.test_numberformat.TestNumberFormat)\", \"test_format_number (utils_tests.test_numberformat.TestNumberFormat)\", \"test_format_string (utils_tests.test_numberformat.TestNumberFormat)\", \"test_large_number (utils_tests.test_numberformat.TestNumberFormat)\"]", "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/utils/numberformat.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit ec13e801b820614ff374cb0046092caab8d67249\nAuthor: Sergey Fursov <geyser85@gmail.com>\nDate:   Mon Sep 12 08:52:18 2022 +0200\n\n    Refs #31335 -- Added SchemaEditor._create_missing_fk_index() on MySQL.\n\ndiff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\nindex d6d303f0f0..044a752c7a 100644\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -135,24 +135,35 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             return False\n         return not self._is_limited_data_type(field)\n \n-    def _delete_composed_index(self, model, fields, *args):\n+    def _create_missing_fk_index(\n+        self,\n+        model,\n+        *,\n+        fields,\n+    ):\n         \"\"\"\n         MySQL can remove an implicit FK index on a field when that field is\n         covered by another index like a unique_together. \"covered\" here means\n-        that the more complex index starts like the simpler one.\n-        https://bugs.mysql.com/bug.php?id=37910 / Django ticket #24757\n-        We check here before removing the [unique|index]_together if we have to\n-        recreate a FK index.\n+        that the more complex index has the FK field as its first field (see\n+        https://bugs.mysql.com/bug.php?id=37910).\n+\n+        Manually create an implicit FK index to make it possible to remove the\n+        composed index.\n         \"\"\"\n         first_field = model._meta.get_field(fields[0])\n         if first_field.get_internal_type() == \"ForeignKey\":\n             constraint_names = self._constraint_names(\n-                model, [first_field.column], index=True\n+                model,\n+                [first_field.column],\n+                index=True,\n             )\n             if not constraint_names:\n                 self.execute(\n                     self._create_index_sql(model, fields=[first_field], suffix=\"\")\n                 )\n+\n+    def _delete_composed_index(self, model, fields, *args):\n+        self._create_missing_fk_index(model, fields=fields)\n         return super()._delete_composed_index(model, fields, *args)\n \n     def _set_field_new_type_null_status(self, field, new_type):\ndiff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 488d6a77cd..6e3628ff91 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -25,6 +25,8 @@ def format(\n         module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).\n     * thousand_sep: Thousand separator symbol (for example \",\")\n     \"\"\"\n+    if number is None or number == \"\":\n+        return mark_safe(number)\n     use_grouping = (\n         use_l10n or (use_l10n is None and settings.USE_L10N)\n     ) and settings.USE_THOUSAND_SEPARATOR\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.5.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220912065218) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220912065218) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.5.2->Django==4.2.dev20220912065218) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.2.dev20220912065218-0.editable-py3-none-any.whl size=27191 sha256=10758389731c135eb7225499d9f2096eaa6725e19caaed17e6dbbd4538f0a1be\n  Stored in directory: /tmp/pip-ephem-wheel-cache-ehs5ayr6/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.2.dev20220912065218\n    Uninstalling Django-4.2.dev20220912065218:\n      Successfully uninstalled Django-4.2.dev20220912065218\nSuccessfully installed Django-4.2.dev20220912065218\nTesting against Django installed in '/testbed/django'\nImporting application utils_tests\nFound 7 test(s).\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n", {}]