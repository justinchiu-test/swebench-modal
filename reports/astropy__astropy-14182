[{"repo": "astropy/astropy", "instance_id": "astropy__astropy-14182", "base_commit": "a5917978be39d13cd90b517e1de4e7a539ffaa48", "patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -27,7 +27,6 @@ def get_fixedwidth_params(self, line):\n \n \n class SimpleRSTData(FixedWidthData):\n-    start_line = 3\n     end_line = -1\n     splitter_class = FixedWidthTwoLineDataSplitter\n \n@@ -39,12 +38,29 @@ class RST(FixedWidth):\n \n     Example::\n \n-        ==== ===== ======\n-        Col1  Col2  Col3\n-        ==== ===== ======\n-          1    2.3  Hello\n-          2    4.5  Worlds\n-        ==== ===== ======\n+      >>> from astropy.table import QTable\n+      >>> import astropy.units as u\n+      >>> import sys\n+      >>> tbl = QTable({\"wave\": [350, 950] * u.nm, \"response\": [0.7, 1.2] * u.count})\n+      >>> tbl.write(sys.stdout,  format=\"ascii.rst\")\n+      ===== ========\n+       wave response\n+      ===== ========\n+      350.0      0.7\n+      950.0      1.2\n+      ===== ========\n+\n+    Like other fixed-width formats, when writing a table you can provide ``header_rows``\n+    to specify a list of table rows to output as the header.  For example::\n+\n+      >>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=['name', 'unit'])\n+      ===== ========\n+       wave response\n+         nm       ct\n+      ===== ========\n+      350.0      0.7\n+      950.0      1.2\n+      ===== ========\n \n     Currently there is no support for reading tables which utilize continuation lines,\n     or for ones which define column spans through the use of an additional\n@@ -57,10 +73,15 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        idx = len(self.header.header_rows)\n+        lines = [lines[idx]] + lines + [lines[idx]]\n         return lines\n+\n+    def read(self, table):\n+        self.data.start_line = 2 + len(self.header.header_rows)\n+        return super().read(table)\n", "test_patch": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -2,7 +2,11 @@\n \n from io import StringIO\n \n+import numpy as np\n+\n+import astropy.units as u\n from astropy.io import ascii\n+from astropy.table import QTable\n \n from .common import assert_almost_equal, assert_equal\n \n@@ -185,3 +189,27 @@ def test_write_normal():\n ==== ========= ==== ====\n \"\"\",\n     )\n+\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n", "problem_statement": "Please support header rows in RestructuredText output\n### Description\r\n\r\nIt would be great if the following would work:\r\n\r\n```Python\r\n>>> from astropy.table import QTable\r\n>>> import astropy.units as u\r\n>>> import sys\r\n>>> tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\r\n>>> tbl.write(sys.stdout,  format=\"ascii.rst\")\r\n===== ========\r\n wave response\r\n===== ========\r\n350.0      0.7\r\n950.0      1.2\r\n===== ========\r\n>>> tbl.write(sys.stdout,  format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\r\n|  wave | response |\r\n|    nm |       ct |\r\n| 350.0 |      0.7 |\r\n| 950.0 |      1.2 |\r\n>>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3/dist-packages/astropy/table/connect.py\", line 129, in __call__\r\n    self.registry.write(instance, *args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/registry/core.py\", line 369, in write\r\n    return writer(data, *args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/connect.py\", line 26, in io_write\r\n    return write(table, filename, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/ui.py\", line 856, in write\r\n    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/ui.py\", line 800, in get_writer\r\n    writer = core._get_writer(Writer, fast_writer, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/core.py\", line 1719, in _get_writer\r\n    writer = Writer(**writer_kwargs)\r\nTypeError: RST.__init__() got an unexpected keyword argument 'header_rows'\r\n```\r\n\r\n\r\n### Additional context\r\n\r\nRestructuredText output is a great way to fill autogenerated documentation with content, so having this flexible makes the life easier `:-)`\r\n\r\n\n", "hints_text": "", "created_at": "2022-12-16T11:13:37Z", "version": "5.1", "FAIL_TO_PASS": "[\"astropy/io/ascii/tests/test_rst.py::test_rst_with_header_rows\"]", "PASS_TO_PASS": "[\"astropy/io/ascii/tests/test_rst.py::test_read_normal\", \"astropy/io/ascii/tests/test_rst.py::test_read_normal_names\", \"astropy/io/ascii/tests/test_rst.py::test_read_normal_names_include\", \"astropy/io/ascii/tests/test_rst.py::test_read_normal_exclude\", \"astropy/io/ascii/tests/test_rst.py::test_read_unbounded_right_column\", \"astropy/io/ascii/tests/test_rst.py::test_read_unbounded_right_column_header\", \"astropy/io/ascii/tests/test_rst.py::test_read_right_indented_table\", \"astropy/io/ascii/tests/test_rst.py::test_trailing_spaces_in_row_definition\", \"astropy/io/ascii/tests/test_rst.py::test_write_normal\"]", "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   astropy/io/ascii/rst.py\n\tmodified:   pyproject.toml\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit a5917978be39d13cd90b517e1de4e7a539ffaa48\nMerge: 1bac6191b7 1ff38dc8ed\nAuthor: William Jamieson <wjamieson@stsci.edu>\nDate:   Thu Dec 15 23:36:33 2022 -0500\n\n    Merge pull request #14172 from astropy/pre-commit-ci-update-config\n\ndiff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..d765e369e3 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -27,7 +27,6 @@ class SimpleRSTHeader(FixedWidthHeader):\n \n \n class SimpleRSTData(FixedWidthData):\n-    start_line = 3\n     end_line = -1\n     splitter_class = FixedWidthTwoLineDataSplitter\n \n@@ -39,12 +38,29 @@ class RST(FixedWidth):\n \n     Example::\n \n-        ==== ===== ======\n-        Col1  Col2  Col3\n-        ==== ===== ======\n-          1    2.3  Hello\n-          2    4.5  Worlds\n-        ==== ===== ======\n+      >>> from astropy.table import QTable\n+      >>> import astropy.units as u\n+      >>> import sys\n+      >>> tbl = QTable({\"wave\": [350, 950] * u.nm, \"response\": [0.7, 1.2] * u.count})\n+      >>> tbl.write(sys.stdout,  format=\"ascii.rst\")\n+      ===== ========\n+       wave response\n+      ===== ========\n+      350.0      0.7\n+      950.0      1.2\n+      ===== ========\n+\n+    Like other fixed-width formats, when writing a table you can provide ``header_rows``\n+    to specify a list of table rows to output as the header.  For example::\n+\n+      >>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=['name', 'unit'])\n+      ===== ========\n+       wave response\n+         nm       ct\n+      ===== ========\n+      350.0      0.7\n+      950.0      1.2\n+      ===== ========\n \n     Currently there is no support for reading tables which utilize continuation lines,\n     or for ones which define column spans through the use of an additional\n@@ -57,10 +73,15 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        idx = len(self.header.header_rows)\n+        lines = [lines[idx]] + lines + [lines[idx]]\n         return lines\n+\n+    def read(self, table):\n+        self.data.start_line = 2 + len(self.header.header_rows)\n+        return super().read(table)\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0d1ee66ab9..ec234472e2 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\nCollecting pytest-json-report\n  Downloading pytest_json_report-1.5.0-py3-none-any.whl.metadata (15 kB)\nRequirement already satisfied: pytest>=3.8.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-json-report) (7.4.0)\nCollecting pytest-metadata (from pytest-json-report)\n  Downloading pytest_metadata-3.1.1-py3-none-any.whl.metadata (8.6 kB)\nRequirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=3.8.0->pytest-json-report) (2.0.0)\nRequirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=3.8.0->pytest-json-report) (23.1)\nRequirement already satisfied: pluggy<2.0,>=0.12 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=3.8.0->pytest-json-report) (1.3.0)\nRequirement already satisfied: exceptiongroup>=1.0.0rc8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=3.8.0->pytest-json-report) (1.1.3)\nRequirement already satisfied: tomli>=1.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=3.8.0->pytest-json-report) (2.0.1)\nDownloading pytest_json_report-1.5.0-py3-none-any.whl (13 kB)\nDownloading pytest_metadata-3.1.1-py3-none-any.whl (11 kB)\nInstalling collected packages: pytest-metadata, pytest-json-report\nSuccessfully installed pytest-json-report-1.5.0 pytest-metadata-3.1.1\nUsing pip 24.2 from /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pip (python 3.9)\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: numpy>=1.20 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astropy==5.3.dev133+ga5917978be.d20220101) (1.25.2)\nRequirement already satisfied: pyerfa>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astropy==5.3.dev133+ga5917978be.d20220101) (2.0.0.3)\nRequirement already satisfied: PyYAML>=3.13 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astropy==5.3.dev133+ga5917978be.d20220101) (6.0.1)\nRequirement already satisfied: packaging>=19.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astropy==5.3.dev133+ga5917978be.d20220101) (23.1)\nRequirement already satisfied: pytest>=7.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astropy==5.3.dev133+ga5917978be.d20220101) (7.4.0)\nRequirement already satisfied: pytest-doctestplus>=0.12 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astropy==5.3.dev133+ga5917978be.d20220101) (1.0.0)\nRequirement already satisfied: pytest-astropy-header>=0.2.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astropy==5.3.dev133+ga5917978be.d20220101) (0.2.2)\nRequirement already satisfied: pytest-astropy>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astropy==5.3.dev133+ga5917978be.d20220101) (0.10.0)\nRequirement already satisfied: pytest-xdist in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astropy==5.3.dev133+ga5917978be.d20220101) (3.3.1)\nRequirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=7.0->astropy==5.3.dev133+ga5917978be.d20220101) (2.0.0)\nRequirement already satisfied: pluggy<2.0,>=0.12 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=7.0->astropy==5.3.dev133+ga5917978be.d20220101) (1.3.0)\nRequirement already satisfied: exceptiongroup>=1.0.0rc8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=7.0->astropy==5.3.dev133+ga5917978be.d20220101) (1.1.3)\nRequirement already satisfied: tomli>=1.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=7.0->astropy==5.3.dev133+ga5917978be.d20220101) (2.0.1)\nRequirement already satisfied: pytest-remotedata>=0.3.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (0.4.0)\nRequirement already satisfied: pytest-openfiles>=0.3.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (0.5.0)\nRequirement already satisfied: pytest-arraydiff>=0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (0.5.0)\nRequirement already satisfied: pytest-filter-subpackage>=0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (0.1.2)\nRequirement already satisfied: pytest-cov>=2.3.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (4.1.0)\nRequirement already satisfied: pytest-mock>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (3.11.1)\nRequirement already satisfied: attrs>=19.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (23.1.0)\nRequirement already satisfied: hypothesis>=5.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (6.82.6)\nRequirement already satisfied: setuptools>=30.3.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-doctestplus>=0.12->astropy==5.3.dev133+ga5917978be.d20220101) (68.0.0)\nRequirement already satisfied: execnet>=1.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-xdist->astropy==5.3.dev133+ga5917978be.d20220101) (2.0.2)\nRequirement already satisfied: sortedcontainers<3.0.0,>=2.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from hypothesis>=5.1->pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (2.4.0)\nRequirement already satisfied: coverage>=5.2.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from coverage[toml]>=5.2.1->pytest-cov>=2.3.1->pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (7.6.1)\nRequirement already satisfied: psutil in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-openfiles>=0.3.1->pytest-astropy>=0.10->astropy==5.3.dev133+ga5917978be.d20220101) (5.9.5)\nBuilding wheels for collected packages: astropy\n  Building editable for astropy (pyproject.toml): started\n  Building editable for astropy (pyproject.toml): finished with status 'done'\n  Created wheel for astropy: filename=astropy-5.3.dev133+ga5917978be.d20220101-0.editable-cp39-cp39-linux_x86_64.whl size=6911 sha256=a5be81d8414650fe92869995d299f251c9fa41d2d4be8bd3f1e73549222de8ab\n  Stored in directory: /tmp/pip-ephem-wheel-cache-mpfythdl/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built astropy\nInstalling collected packages: astropy\n  Attempting uninstall: astropy\n    Found existing installation: astropy 5.3.dev133+ga5917978be.d20220101\n    Uninstalling astropy-5.3.dev133+ga5917978be.d20220101:\n      Removing file or directory /opt/miniconda3/envs/testbed/bin/fits2bitmap\n      Removing file or directory /opt/miniconda3/envs/testbed/bin/fitscheck\n      Removing file or directory /opt/miniconda3/envs/testbed/bin/fitsdiff\n      Removing file or directory /opt/miniconda3/envs/testbed/bin/fitsheader\n      Removing file or directory /opt/miniconda3/envs/testbed/bin/fitsinfo\n      Removing file or directory /opt/miniconda3/envs/testbed/bin/samp_hub\n      Removing file or directory /opt/miniconda3/envs/testbed/bin/showtable\n      Removing file or directory /opt/miniconda3/envs/testbed/bin/volint\n      Removing file or directory /opt/miniconda3/envs/testbed/bin/wcslint\n      Removing file or directory /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/__editable__.astropy-5.3.dev133+ga5917978be.d20220101.pth\n      Removing file or directory /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/__editable___astropy_5_3_dev133_ga5917978be_d20220101_finder.py\n      Removing file or directory /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/__pycache__/__editable___astropy_5_3_dev133_ga5917978be_d20220101_finder.cpython-39.pyc\n      Removing file or directory /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/astropy-5.3.dev133+ga5917978be.d20220101.dist-info/\n      Successfully uninstalled astropy-5.3.dev133+ga5917978be.d20220101\n  changing mode of /opt/miniconda3/envs/testbed/bin/fits2bitmap to 755\n  changing mode of /opt/miniconda3/envs/testbed/bin/fitscheck to 755\n  changing mode of /opt/miniconda3/envs/testbed/bin/fitsdiff to 755\n  changing mode of /opt/miniconda3/envs/testbed/bin/fitsheader to 755\n  changing mode of /opt/miniconda3/envs/testbed/bin/fitsinfo to 755\n  changing mode of /opt/miniconda3/envs/testbed/bin/samp_hub to 755\n  changing mode of /opt/miniconda3/envs/testbed/bin/showtable to 755\n  changing mode of /opt/miniconda3/envs/testbed/bin/volint to 755\n  changing mode of /opt/miniconda3/envs/testbed/bin/wcslint to 755\nSuccessfully installed astropy-5.3.dev133+ga5917978be.d20220101\n\u001b[1m============================= test session starts ==============================\u001b[0m\nplatform linux -- Python 3.9.20, pytest-7.4.0, pluggy-1.3.0\n\nRunning tests with Astropy version 5.3.dev133+ga5917978be.d20220101.\nRunning tests in astropy/io/ascii/tests/test_rst.py.\n\nDate: 2024-10-08T04:05:05\n\nPlatform: Linux-4.4.0-x86_64-with-glibc2.35\n\nExecutable: /opt/miniconda3/envs/testbed/bin/python\n\nFull Python Version: \n3.9.20 (main, Oct  3 2024, 07:27:41) \n[GCC 11.2.0]\n\nencodings: sys: utf-8, locale: UTF-8, filesystem: utf-8\nbyteorder: little\nfloat info: dig: 15, mant_dig: 15\n\nPackage versions: \nNumpy: 1.25.2\nScipy: not available\nMatplotlib: not available\nh5py: not available\nPandas: not available\nPyERFA: 2.0.0.3\nCython: not available\nScikit-image: not available\nasdf: not available\npyarrow: not available\n\nUsing Astropy options: remote_data: none.\n\nCI: undefined\nARCH_ON_CI: undefined\nIS_CRON: undefined\n\nrootdir: /testbed\nconfigfile: setup.cfg\nplugins: hypothesis-6.82.6, xdist-3.3.1, remotedata-0.4.0, openfiles-0.5.0, mock-3.11.1, filter-subpackage-0.1.2, doctestplus-1.0.0, cov-4.1.0, astropy-header-0.2.2, arraydiff-0.5.0, astropy-0.10.0, metadata-3.1.1, json-report-1.5.0\ncollected 10 items\n\nastropy/io/ascii/tests/test_rst.py \u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m.\u001b[0m\u001b[32m                            [100%]\u001b[0m\n\n==================================== PASSES ====================================\n--------------------------------- JSON report ----------------------------------\nreport saved to: /testbed/report.json\n\u001b[36m\u001b[1m=========================== short test summary info ============================\u001b[0m\n\u001b[32mPASSED\u001b[0m astropy/io/ascii/tests/test_rst.py::\u001b[1mtest_read_normal\u001b[0m\n\u001b[32mPASSED\u001b[0m astropy/io/ascii/tests/test_rst.py::\u001b[1mtest_read_normal_names\u001b[0m\n\u001b[32mPASSED\u001b[0m astropy/io/ascii/tests/test_rst.py::\u001b[1mtest_read_normal_names_include\u001b[0m\n\u001b[32mPASSED\u001b[0m astropy/io/ascii/tests/test_rst.py::\u001b[1mtest_read_normal_exclude\u001b[0m\n\u001b[32mPASSED\u001b[0m astropy/io/ascii/tests/test_rst.py::\u001b[1mtest_read_unbounded_right_column\u001b[0m\n\u001b[32mPASSED\u001b[0m astropy/io/ascii/tests/test_rst.py::\u001b[1mtest_read_unbounded_right_column_header\u001b[0m\n\u001b[32mPASSED\u001b[0m astropy/io/ascii/tests/test_rst.py::\u001b[1mtest_read_right_indented_table\u001b[0m\n\u001b[32mPASSED\u001b[0m astropy/io/ascii/tests/test_rst.py::\u001b[1mtest_trailing_spaces_in_row_definition\u001b[0m\n\u001b[32mPASSED\u001b[0m astropy/io/ascii/tests/test_rst.py::\u001b[1mtest_write_normal\u001b[0m\n\u001b[32mPASSED\u001b[0m astropy/io/ascii/tests/test_rst.py::\u001b[1mtest_rst_with_header_rows\u001b[0m\n\u001b[32m============================== \u001b[32m\u001b[1m10 passed\u001b[0m\u001b[32m in 0.05s\u001b[0m\u001b[32m ==============================\u001b[0m\n", {"astropy/io/ascii/tests/test_rst.py::test_read_normal": "PASSED", "astropy/io/ascii/tests/test_rst.py::test_read_normal_names": "PASSED", "astropy/io/ascii/tests/test_rst.py::test_read_normal_names_include": "PASSED", "astropy/io/ascii/tests/test_rst.py::test_read_normal_exclude": "PASSED", "astropy/io/ascii/tests/test_rst.py::test_read_unbounded_right_column": "PASSED", "astropy/io/ascii/tests/test_rst.py::test_read_unbounded_right_column_header": "PASSED", "astropy/io/ascii/tests/test_rst.py::test_read_right_indented_table": "PASSED", "astropy/io/ascii/tests/test_rst.py::test_trailing_spaces_in_row_definition": "PASSED", "astropy/io/ascii/tests/test_rst.py::test_write_normal": "PASSED", "astropy/io/ascii/tests/test_rst.py::test_rst_with_header_rows": "PASSED"}]