[{"repo": "django/django", "instance_id": "django__django-11039", "base_commit": "d5276398046ce4a102776a1e67dcac2884d80dfe", "patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -55,8 +55,9 @@ def handle(self, *args, **options):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output for atomic migrations, if the database\n+        # supports transactional DDL.\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n", "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -536,7 +536,13 @@ def test_sqlmigrate_forwards(self):\n         index_op_desc_unique_together = output.find('-- alter unique_together')\n         index_tx_end = output.find(connection.ops.end_transaction_sql().lower())\n \n-        self.assertGreater(index_tx_start, -1, \"Transaction start not found\")\n+        if connection.features.can_rollback_ddl:\n+            self.assertGreater(index_tx_start, -1, \"Transaction start not found\")\n+            self.assertGreater(\n+                index_tx_end, index_op_desc_unique_together,\n+                \"Transaction end not found or found before operation description (unique_together)\"\n+            )\n+\n         self.assertGreater(\n             index_op_desc_author, index_tx_start,\n             \"Operation description (author) not found or found before transaction start\"\n@@ -553,10 +559,6 @@ def test_sqlmigrate_forwards(self):\n             index_op_desc_unique_together, index_op_desc_tribble,\n             \"Operation description (unique_together) not found or found before operation description (tribble)\"\n         )\n-        self.assertGreater(\n-            index_tx_end, index_op_desc_unique_together,\n-            \"Transaction end not found or found before operation description (unique_together)\"\n-        )\n \n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n     def test_sqlmigrate_backwards(self):\n@@ -577,7 +579,12 @@ def test_sqlmigrate_backwards(self):\n         index_drop_table = output.rfind('drop table')\n         index_tx_end = output.find(connection.ops.end_transaction_sql().lower())\n \n-        self.assertGreater(index_tx_start, -1, \"Transaction start not found\")\n+        if connection.features.can_rollback_ddl:\n+            self.assertGreater(index_tx_start, -1, \"Transaction start not found\")\n+            self.assertGreater(\n+                index_tx_end, index_op_desc_unique_together,\n+                \"Transaction end not found or found before DROP TABLE\"\n+            )\n         self.assertGreater(\n             index_op_desc_unique_together, index_tx_start,\n             \"Operation description (unique_together) not found or found before transaction start\"\n@@ -595,10 +602,6 @@ def test_sqlmigrate_backwards(self):\n             index_drop_table, index_op_desc_author,\n             \"DROP TABLE not found or found before operation description (author)\"\n         )\n-        self.assertGreater(\n-            index_tx_end, index_op_desc_unique_together,\n-            \"Transaction end not found or found before DROP TABLE\"\n-        )\n \n         # Cleanup by unmigrating everything\n         call_command(\"migrate\", \"migrations\", \"zero\", verbosity=0)\n@@ -616,6 +619,22 @@ def test_sqlmigrate_for_non_atomic_migration(self):\n             self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n         self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"migrations.migrations_test_apps.migrated_app\",\n", "problem_statement": "sqlmigrate wraps it's outpout in BEGIN/COMMIT even if the database doesn't support transactional DDL\nDescription\n\t \n\t\t(last modified by Simon Charette)\n\t \nThe migration executor only adds the outer BEGIN/COMMIT \u200bif the migration is atomic and \u200bthe schema editor can rollback DDL but the current sqlmigrate logic only takes migration.atomic into consideration.\nThe issue can be addressed by\nChanging sqlmigrate \u200bassignment of self.output_transaction to consider connection.features.can_rollback_ddl as well.\nAdding a test in tests/migrations/test_commands.py based on \u200ban existing test for non-atomic migrations that mocks connection.features.can_rollback_ddl to False instead of overdidding MIGRATION_MODULES to point to a non-atomic migration.\nI marked the ticket as easy picking because I included the above guidelines but feel free to uncheck it if you deem it inappropriate.\n", "hints_text": "I marked the ticket as easy picking because I included the above guidelines but feel free to uncheck it if you deem it inappropriate. Super. We don't have enough Easy Pickings tickets for the demand, so this kind of thing is great. (IMO \ud83d\ude42)\nHey, I'm working on this ticket, I would like you to know as this is my first ticket it may take little longer to complete :). Here is a \u200b| link to the working branch You may feel free to post references or elaborate more on the topic.\nHi Parth. No problem. If you need help please reach out to e.g. \u200bdjango-core-mentorship citing this issue, and where you've got to/got stuck. Welcome aboard, and have fun! \u2728", "created_at": "2019-03-01T10:24:38Z", "version": "3.0", "FAIL_TO_PASS": "[\"test_sqlmigrate_for_non_transactional_databases (migrations.test_commands.MigrateTests)\"]", "PASS_TO_PASS": "[\"test_makemigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_makemigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_migrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_showmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_sqlmigrate_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_app_name_specified_as_label (migrations.test_commands.AppLabelErrorTests)\", \"test_squashmigrations_nonexistent_app_label (migrations.test_commands.AppLabelErrorTests)\", \"--squashed-name specifies the new migration's name.\", \"--squashed-name also works if a start migration is omitted.\", \"test_squashmigrations_initial_attribute (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_invalid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_optimizes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_squashes (migrations.test_commands.SquashMigrationsTests)\", \"test_squashmigrations_valid_start (migrations.test_commands.SquashMigrationsTests)\", \"test_ticket_23799_squashmigrations_no_optimize (migrations.test_commands.SquashMigrationsTests)\", \"test_failing_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_files_content (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigration_merge_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_auto_now_add_interactive (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_check (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_conflict_exit (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_consistency_checks_respect_routers (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_default_merge_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_disabled_migrations_for_app (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_dry_run_verbosity_3 (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_connections (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_migration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_empty_no_app_specified (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_handle_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_inconsistent_history (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_accept (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_by_default (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_interactive_reject (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_dont_output_dependency_operations (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_merge_no_conflict (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migration_path_output_valueerror (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_announce (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_nonexistent_toplevel_package (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_migrations_modules_path_not_exist (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_apps_initial (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_changes_no_apps (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_no_common_ancestor (migrations.test_commands.MakeMigrationsTests)\", \"Migration directories without an __init__.py file are allowed.\", \"test_makemigrations_non_interactive_no_field_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_no_model_rename (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_addition (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_non_interactive_not_null_alteration (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_order (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_unspecified_app_with_conflict_no_merge (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_makemigrations_with_invalid_custom_name (migrations.test_commands.MakeMigrationsTests)\", \"test_ambigious_prefix (migrations.test_commands.MigrateTests)\", \"test_app_without_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate (migrations.test_commands.MigrateTests)\", \"test_migrate_conflict_exit (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_fake_split_initial (migrations.test_commands.MigrateTests)\", \"test_migrate_inconsistent_history (migrations.test_commands.MigrateTests)\", \"test_migrate_initial_false (migrations.test_commands.MigrateTests)\", \"Tests migrate --plan output.\", \"test_migrate_record_replaced (migrations.test_commands.MigrateTests)\", \"test_migrate_record_squashed (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_label (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_app_with_migrations (migrations.test_commands.MigrateTests)\", \"test_migrate_syncdb_deferred_sql_executed_with_schemaeditor (migrations.test_commands.MigrateTests)\", \"test_migrate_with_system_checks (migrations.test_commands.MigrateTests)\", \"test_regression_22823_unmigrated_fk_to_migrated_model (migrations.test_commands.MigrateTests)\", \"test_showmigrations_list (migrations.test_commands.MigrateTests)\", \"test_showmigrations_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_app_label_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_multiple_app_labels (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_no_migrations (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_single_app_label (migrations.test_commands.MigrateTests)\", \"test_showmigrations_plan_squashed (migrations.test_commands.MigrateTests)\", \"test_showmigrations_unmigrated_app (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_backwards (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_for_non_atomic_migration (migrations.test_commands.MigrateTests)\", \"test_sqlmigrate_forwards (migrations.test_commands.MigrateTests)\", \"test_unknown_prefix (migrations.test_commands.MigrateTests)\"]", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27"}, "Generating locales (this might take a while)...\n  en_US.UTF-8... done\nGeneration complete.\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/core/management/commands/sqlmigrate.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit d5276398046ce4a102776a1e67dcac2884d80dfe\nAuthor: ahbk <alexander.holmback@gmail.com>\nDate:   Thu Mar 7 16:02:18 2019 +0100\n\n    Fixed #29754 -- Added is_dst parameter to Trunc database functions.\n\ndiff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 177715ecfa..7a582aa404 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -170,8 +170,9 @@ class TruncBase(TimezoneMixin, Transform):\n     kind = None\n     tzinfo = None\n \n-    def __init__(self, expression, output_field=None, tzinfo=None, **extra):\n+    def __init__(self, expression, output_field=None, tzinfo=None, is_dst=None, **extra):\n         self.tzinfo = tzinfo\n+        self.is_dst = is_dst\n         super().__init__(expression, output_field=output_field, **extra)\n \n     def as_sql(self, compiler, connection):\n@@ -222,7 +223,7 @@ class TruncBase(TimezoneMixin, Transform):\n                 pass\n             elif value is not None:\n                 value = value.replace(tzinfo=None)\n-                value = timezone.make_aware(value, self.tzinfo)\n+                value = timezone.make_aware(value, self.tzinfo, is_dst=self.is_dst)\n             elif not connection.features.has_zoneinfo_database:\n                 raise ValueError(\n                     'Database returned an invalid datetime value. Are time '\n@@ -240,9 +241,12 @@ class TruncBase(TimezoneMixin, Transform):\n \n class Trunc(TruncBase):\n \n-    def __init__(self, expression, kind, output_field=None, tzinfo=None, **extra):\n+    def __init__(self, expression, kind, output_field=None, tzinfo=None, is_dst=None, **extra):\n         self.kind = kind\n-        super().__init__(expression, output_field=output_field, tzinfo=tzinfo, **extra)\n+        super().__init__(\n+            expression, output_field=output_field, tzinfo=tzinfo,\n+            is_dst=is_dst, **extra\n+        )\n \n \n class TruncYear(TruncBase):\ndiff --git a/docs/ref/models/database-functions.txt b/docs/ref/models/database-functions.txt\nindex c6203f92c4..46b41251a0 100644\n--- a/docs/ref/models/database-functions.txt\n+++ b/docs/ref/models/database-functions.txt\n@@ -442,7 +442,7 @@ Usage example::\n ``Trunc``\n ---------\n \n-.. class:: Trunc(expression, kind, output_field=None, tzinfo=None, **extra)\n+.. class:: Trunc(expression, kind, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n Truncates a date up to a significant component.\n \n@@ -460,6 +460,14 @@ value. If ``output_field`` is omitted, it will default to the ``output_field``\n of ``expression``. A ``tzinfo`` subclass, usually provided by ``pytz``, can be\n passed to truncate a value in a specific timezone.\n \n+The ``is_dst`` parameter indicates whether or not ``pytz`` should interpret\n+nonexistent and ambiguous datetimes in daylight saving time. By default (when\n+``is_dst=None``), ``pytz`` raises an exception for such datetimes.\n+\n+.. versionadded:: 3.0\n+\n+    The ``is_dst`` parameter was added.\n+\n Given the datetime ``2015-06-15 14:30:50.000321+00:00``, the built-in ``kind``\\s\n return:\n \n@@ -525,21 +533,21 @@ Usage example::\n ``DateField`` truncation\n ~~~~~~~~~~~~~~~~~~~~~~~~\n \n-.. class:: TruncYear(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncYear(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     .. attribute:: kind = 'year'\n \n-.. class:: TruncMonth(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncMonth(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     .. attribute:: kind = 'month'\n \n-.. class:: TruncWeek(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncWeek(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     Truncates to midnight on the Monday of the week.\n \n     .. attribute:: kind = 'week'\n \n-.. class:: TruncQuarter(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncQuarter(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     .. attribute:: kind = 'quarter'\n \n@@ -603,19 +611,19 @@ truncate function. It's also registered as a transform on  ``DateTimeField`` as\n truncate function. It's also registered as a transform on ``DateTimeField`` as\n ``__time``.\n \n-.. class:: TruncDay(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncDay(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     .. attribute:: kind = 'day'\n \n-.. class:: TruncHour(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncHour(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     .. attribute:: kind = 'hour'\n \n-.. class:: TruncMinute(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncMinute(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     .. attribute:: kind = 'minute'\n \n-.. class:: TruncSecond(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncSecond(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     .. attribute:: kind = 'second'\n \n@@ -653,15 +661,15 @@ Usage example::\n ``TimeField`` truncation\n ~~~~~~~~~~~~~~~~~~~~~~~~\n \n-.. class:: TruncHour(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncHour(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     .. attribute:: kind = 'hour'\n \n-.. class:: TruncMinute(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncMinute(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     .. attribute:: kind = 'minute'\n \n-.. class:: TruncSecond(expression, output_field=None, tzinfo=None, **extra)\n+.. class:: TruncSecond(expression, output_field=None, tzinfo=None, is_dst=None, **extra)\n \n     .. attribute:: kind = 'second'\n \ndiff --git a/docs/releases/3.0.txt b/docs/releases/3.0.txt\nindex 7d09d94399..1d4df533bd 100644\n--- a/docs/releases/3.0.txt\n+++ b/docs/releases/3.0.txt\n@@ -164,6 +164,10 @@ Models\n \n * Added the :class:`~django.db.models.functions.MD5` database function.\n \n+* The new ``is_dst``  parameter of the\n+  :class:`~django.db.models.functions.Trunc` database functions determines the\n+  treatment of nonexistent and ambiguous datetimes.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 065a06f4be..2088d09d06 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1044,6 +1044,30 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n+    def test_trunc_ambiguous_and_invalid_times(self):\n+        sao = pytz.timezone('America/Sao_Paulo')\n+        utc = pytz.timezone('UTC')\n+        start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n+        end_datetime = utc.localize(datetime(2016, 2, 21, 1))\n+        self.create_model(start_datetime, end_datetime)\n+        with timezone.override(sao):\n+            with self.assertRaisesMessage(pytz.NonExistentTimeError, '2016-10-16 00:00:00'):\n+                model = DTModel.objects.annotate(truncated_start=TruncDay('start_datetime')).get()\n+            with self.assertRaisesMessage(pytz.AmbiguousTimeError, '2016-02-20 23:00:00'):\n+                model = DTModel.objects.annotate(truncated_end=TruncHour('end_datetime')).get()\n+            model = DTModel.objects.annotate(\n+                truncated_start=TruncDay('start_datetime', is_dst=False),\n+                truncated_end=TruncHour('end_datetime', is_dst=False),\n+            ).get()\n+            self.assertEqual(model.truncated_start.dst(), timedelta(0))\n+            self.assertEqual(model.truncated_end.dst(), timedelta(0))\n+            model = DTModel.objects.annotate(\n+                truncated_start=TruncDay('start_datetime', is_dst=True),\n+                truncated_end=TruncHour('end_datetime', is_dst=True),\n+            ).get()\n+            self.assertEqual(model.truncated_start.dst(), timedelta(0, 3600))\n+            self.assertEqual(model.truncated_end.dst(), timedelta(0, 3600))\n+\n     def test_trunc_func_with_timezone(self):\n         \"\"\"\n         If the truncated datetime transitions to a different offset (daylight\ndiff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex f0b663222a..ba3bd708cc 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -55,8 +55,9 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output for atomic migrations, if the database\n+        # supports transactional DDL.\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\nObtaining file:///testbed\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190307150218) (2024.2)\nRequirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190307150218) (0.4.4)\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 3.0.dev20190307150218\n    Uninstalling Django-3.0.dev20190307150218:\n      Successfully uninstalled Django-3.0.dev20190307150218\n  Running setup.py develop for Django\nSuccessfully installed Django-3.0.dev20190307150218\nTesting against Django installed in '/testbed/django'\nImporting application migrations\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, messages, migrations, sessions, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table migrations_modelwithcustombase\n    Creating table migrations_unmigratedmodel\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, messages, migrations, sessions, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table migrations_modelwithcustombase\n    Creating table migrations_unmigratedmodel\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]