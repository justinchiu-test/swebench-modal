[{"repo": "django/django", "instance_id": "django__django-15400", "base_commit": "4c76ffc2d6c77c850b4bef8d9acc197d11c47937", "patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -432,6 +432,12 @@ def __deepcopy__(self, memo):\n             return result\n         return copy.deepcopy(self._wrapped, memo)\n \n+    __add__ = new_method_proxy(operator.add)\n+\n+    @new_method_proxy\n+    def __radd__(self, other):\n+        return other + self\n+\n \n def partition(predicate, values):\n     \"\"\"\n", "test_patch": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -317,6 +317,17 @@ def test_repr(self):\n         self.assertIsInstance(obj._wrapped, int)\n         self.assertEqual(repr(obj), \"<SimpleLazyObject: 42>\")\n \n+    def test_add(self):\n+        obj1 = self.lazy_wrap(1)\n+        self.assertEqual(obj1 + 1, 2)\n+        obj2 = self.lazy_wrap(2)\n+        self.assertEqual(obj2 + obj1, 3)\n+        self.assertEqual(obj1 + obj2, 3)\n+\n+    def test_radd(self):\n+        obj1 = self.lazy_wrap(1)\n+        self.assertEqual(1 + obj1, 2)\n+\n     def test_trace(self):\n         # See ticket #19456\n         old_trace_func = sys.gettrace()\n", "problem_statement": "SimpleLazyObject doesn't implement __radd__\nDescription\n\t\nTechnically, there's a whole bunch of magic methods it doesn't implement, compared to a complete proxy implementation, like that of wrapt.ObjectProxy, but __radd__ being missing is the one that's biting me at the moment.\nAs far as I can tell, the implementation can't just be\n__radd__ = new_method_proxy(operator.radd)\nbecause that doesn't exist, which is rubbish.\n__radd__ = new_method_proxy(operator.attrgetter(\"__radd__\"))\nalso won't work because types may not have that attr, and attrgetter doesn't supress the exception (correctly)\nThe minimal implementation I've found that works for me is:\n\tdef __radd__(self, other):\n\t\tif self._wrapped is empty:\n\t\t\tself._setup()\n\t\treturn other + self._wrapped\n", "hints_text": "Could you please give some sample code with your use case?\nIn a boiled-down nutshell: def lazy_consumer(): # something more complex, obviously. return [1, 3, 5] consumer = SimpleLazyObject(lazy_consumer) # inside third party code ... def some_func(param): third_party_code = [...] # then, through parameter passing, my value is provided to be used. # param is at this point, `consumer` third_party_code_plus_mine = third_party_code + param which ultimately yields: TypeError: unsupported operand type(s) for +: 'list' and 'SimpleLazyObject'\nSeems okay, although I'm not an expert on the SimpleLazyObject class.\nReplying to kezabelle: def lazy_consumer(): # something more complex, obviously. return [1, 3, 5] consumer = SimpleLazyObject(lazy_consumer) If you know what is the resulting type or possible resulting types of your expression, I think you better use django.utils.functional.lazy which will provide all the necessary methods.\nReplying to kezabelle: As far as I can tell, the implementation can't just be __radd__ = new_method_proxy(operator.radd) because that doesn't exist, which is rubbish. __radd__ = new_method_proxy(operator.attrgetter(\"__radd__\")) also won't work because types may not have that attr, and attrgetter doesn't supress the exception (correctly) Wouldn't the following code work? __add__ = new_method_proxy(operator.add) __radd__ = new_method_proxy(lambda a, b: operator.add(b, a)) I have tested this and it seems to work as excepted.", "created_at": "2022-02-05T19:34:55Z", "version": "4.1", "FAIL_TO_PASS": "[\"test_add (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_radd (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\"]", "PASS_TO_PASS": "[\"test_bool (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_bytes (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_class (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_cmp (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_contains (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_class (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_class_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_list (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_copy_list_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_class (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_class_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_list (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_deepcopy_list_no_evaluation (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_delattr (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_delitem (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_dir (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_getattr (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_getitem (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_gt (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_hash (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_iter (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_len (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_lt (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_pickle (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_setattr (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_setattr2 (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_setitem (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_text (utils_tests.test_lazyobject.LazyObjectTestCase)\", \"test_bool (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_bytes (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_class (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_cmp (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_contains (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_class (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_class_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_list (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_copy_list_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_class (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_class_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_list (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_deepcopy_list_no_evaluation (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_delattr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_delitem (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_dict (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_dir (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_getattr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_getitem (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_gt (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_hash (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_iter (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_len (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_list_set (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_lt (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_none (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_pickle (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_repr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_setattr (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_setattr2 (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_setitem (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_text (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"test_trace (utils_tests.test_lazyobject.SimpleLazyObjectTestCase)\", \"Test in a fairly synthetic setting.\"]", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/utils/functional.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 4c76ffc2d6c77c850b4bef8d9acc197d11c47937\nAuthor: Claude Paroz <claude@2xlibre.net>\nDate:   Sat Jan 22 17:21:57 2022 +0100\n\n    Fixed #29490 -- Added support for object-based Media CSS and JS paths.\n\ndiff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 8c5122ad1d..208464b60a 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -101,7 +101,9 @@ class Media:\n \n     def render_js(self):\n         return [\n-            format_html('<script src=\"{}\"></script>', self.absolute_path(path))\n+            path.__html__()\n+            if hasattr(path, \"__html__\")\n+            else format_html('<script src=\"{}\"></script>', self.absolute_path(path))\n             for path in self._js\n         ]\n \n@@ -111,7 +113,9 @@ class Media:\n         media = sorted(self._css)\n         return chain.from_iterable(\n             [\n-                format_html(\n+                path.__html__()\n+                if hasattr(path, \"__html__\")\n+                else format_html(\n                     '<link href=\"{}\" media=\"{}\" rel=\"stylesheet\">',\n                     self.absolute_path(path),\n                     medium,\ndiff --git a/docs/releases/4.1.txt b/docs/releases/4.1.txt\nindex 02d51ed2a5..4b62cf09cf 100644\n--- a/docs/releases/4.1.txt\n+++ b/docs/releases/4.1.txt\n@@ -192,6 +192,11 @@ Forms\n * The new ``edit_only`` argument for :func:`.modelformset_factory` and\n   :func:`.inlineformset_factory` allows preventing new objects creation.\n \n+* The ``js`` and ``css`` class attributes of :doc:`Media </topics/forms/media>`\n+  now allow using hashable objects, not only path strings, as long as those\n+  objects implement the ``__html__()`` method (typically when decorated with\n+  the :func:`~django.utils.html.html_safe` decorator).\n+\n Generic Views\n ~~~~~~~~~~~~~\n \ndiff --git a/docs/topics/forms/media.txt b/docs/topics/forms/media.txt\nindex 6ca7c66fde..7e5a04e3d9 100644\n--- a/docs/topics/forms/media.txt\n+++ b/docs/topics/forms/media.txt\n@@ -206,7 +206,10 @@ return values for dynamic ``media`` properties.\n Paths in asset definitions\n ==========================\n \n-Paths used to specify assets can be either relative or absolute. If a\n+Paths as strings\n+----------------\n+\n+String paths used to specify assets can be either relative or absolute. If a\n path starts with ``/``, ``http://`` or ``https://``, it will be\n interpreted as an absolute path, and left as-is. All other paths will\n be prepended with the value of the appropriate prefix. If the\n@@ -254,6 +257,28 @@ Or if :mod:`~django.contrib.staticfiles` is configured using the\n     <script src=\"https://static.example.com/animations.27e20196a850.js\"></script>\n     <script src=\"http://othersite.com/actions.js\"></script>\n \n+Paths as objects\n+----------------\n+\n+.. versionadded:: 4.1\n+\n+Asset paths may also be given as hashable objects implementing an\n+``__html__()`` method. The ``__html__()`` method is typically added using the\n+:func:`~django.utils.html.html_safe` decorator. The object is responsible for\n+outputting the complete HTML ``<script>`` or ``<link>`` tag content::\n+\n+    >>> from django import forms\n+    >>> from django.utils.html import html_safe\n+    >>>\n+    >>> @html_safe\n+    >>> class JSPath:\n+    ...     def __str__(self):\n+    ...         return '<script src=\"https://example.org/asset.js\" rel=\"stylesheet\">'\n+\n+    >>> class SomeWidget(forms.TextInput):\n+    ...     class Media:\n+    ...         js = (JSPath(),)\n+\n ``Media`` objects\n =================\n \ndiff --git a/tests/forms_tests/tests/test_media.py b/tests/forms_tests/tests/test_media.py\nindex 4338321af8..171b70e508 100644\n--- a/tests/forms_tests/tests/test_media.py\n+++ b/tests/forms_tests/tests/test_media.py\n@@ -1,6 +1,8 @@\n from django.forms import CharField, Form, Media, MultiWidget, TextInput\n from django.template import Context, Template\n+from django.templatetags.static import static\n from django.test import SimpleTestCase, override_settings\n+from django.utils.html import format_html, html_safe\n \n \n @override_settings(\n@@ -710,3 +712,160 @@ class FormsMediaTestCase(SimpleTestCase):\n         merged = media + empty_media\n         self.assertEqual(merged._css_lists, [{\"screen\": [\"a.css\"]}])\n         self.assertEqual(merged._js_lists, [[\"a\"]])\n+\n+\n+@html_safe\n+class Asset:\n+    def __init__(self, path):\n+        self.path = path\n+\n+    def __eq__(self, other):\n+        return (self.__class__ == other.__class__ and self.path == other.path) or (\n+            other.__class__ == str and self.path == other\n+        )\n+\n+    def __hash__(self):\n+        return hash(self.path)\n+\n+    def __str__(self):\n+        return self.absolute_path(self.path)\n+\n+    def absolute_path(self, path):\n+        \"\"\"\n+        Given a relative or absolute path to a static asset, return an absolute\n+        path. An absolute path will be returned unchanged while a relative path\n+        will be passed to django.templatetags.static.static().\n+        \"\"\"\n+        if path.startswith((\"http://\", \"https://\", \"/\")):\n+            return path\n+        return static(path)\n+\n+    def __repr__(self):\n+        return f\"{self.path!r}\"\n+\n+\n+class CSS(Asset):\n+    def __init__(self, path, medium):\n+        super().__init__(path)\n+        self.medium = medium\n+\n+    def __str__(self):\n+        path = super().__str__()\n+        return format_html(\n+            '<link href=\"{}\" media=\"{}\" rel=\"stylesheet\">',\n+            self.absolute_path(path),\n+            self.medium,\n+        )\n+\n+\n+class JS(Asset):\n+    def __init__(self, path, integrity=None):\n+        super().__init__(path)\n+        self.integrity = integrity or \"\"\n+\n+    def __str__(self, integrity=None):\n+        path = super().__str__()\n+        template = '<script src=\"{}\"%s></script>' % (\n+            ' integrity=\"{}\"' if self.integrity else \"{}\"\n+        )\n+        return format_html(template, self.absolute_path(path), self.integrity)\n+\n+\n+@override_settings(\n+    STATIC_URL=\"http://media.example.com/static/\",\n+)\n+class FormsMediaObjectTestCase(SimpleTestCase):\n+    \"\"\"Media handling when media are objects instead of raw strings.\"\"\"\n+\n+    def test_construction(self):\n+        m = Media(\n+            css={\"all\": (CSS(\"path/to/css1\", \"all\"), CSS(\"/path/to/css2\", \"all\"))},\n+            js=(\n+                JS(\"/path/to/js1\"),\n+                JS(\"http://media.other.com/path/to/js2\"),\n+                JS(\n+                    \"https://secure.other.com/path/to/js3\",\n+                    integrity=\"9d947b87fdeb25030d56d01f7aa75800\",\n+                ),\n+            ),\n+        )\n+        self.assertEqual(\n+            str(m),\n+            '<link href=\"http://media.example.com/static/path/to/css1\" media=\"all\" '\n+            'rel=\"stylesheet\">\\n'\n+            '<link href=\"/path/to/css2\" media=\"all\" rel=\"stylesheet\">\\n'\n+            '<script src=\"/path/to/js1\"></script>\\n'\n+            '<script src=\"http://media.other.com/path/to/js2\"></script>\\n'\n+            '<script src=\"https://secure.other.com/path/to/js3\" '\n+            'integrity=\"9d947b87fdeb25030d56d01f7aa75800\"></script>',\n+        )\n+        self.assertEqual(\n+            repr(m),\n+            \"Media(css={'all': ['path/to/css1', '/path/to/css2']}, \"\n+            \"js=['/path/to/js1', 'http://media.other.com/path/to/js2', \"\n+            \"'https://secure.other.com/path/to/js3'])\",\n+        )\n+\n+    def test_simplest_class(self):\n+        @html_safe\n+        class SimpleJS:\n+            \"\"\"The simplest possible asset class.\"\"\"\n+\n+            def __str__(self):\n+                return '<script src=\"https://example.org/asset.js\" rel=\"stylesheet\">'\n+\n+        m = Media(js=(SimpleJS(),))\n+        self.assertEqual(\n+            str(m),\n+            '<script src=\"https://example.org/asset.js\" rel=\"stylesheet\">',\n+        )\n+\n+    def test_combine_media(self):\n+        class MyWidget1(TextInput):\n+            class Media:\n+                css = {\"all\": (CSS(\"path/to/css1\", \"all\"), \"/path/to/css2\")}\n+                js = (\n+                    \"/path/to/js1\",\n+                    \"http://media.other.com/path/to/js2\",\n+                    \"https://secure.other.com/path/to/js3\",\n+                    JS(\"/path/to/js4\", integrity=\"9d947b87fdeb25030d56d01f7aa75800\"),\n+                )\n+\n+        class MyWidget2(TextInput):\n+            class Media:\n+                css = {\"all\": (CSS(\"/path/to/css2\", \"all\"), \"/path/to/css3\")}\n+                js = (JS(\"/path/to/js1\"), \"/path/to/js4\")\n+\n+        w1 = MyWidget1()\n+        w2 = MyWidget2()\n+        self.assertEqual(\n+            str(w1.media + w2.media),\n+            '<link href=\"http://media.example.com/static/path/to/css1\" media=\"all\" '\n+            'rel=\"stylesheet\">\\n'\n+            '<link href=\"/path/to/css2\" media=\"all\" rel=\"stylesheet\">\\n'\n+            '<link href=\"/path/to/css3\" media=\"all\" rel=\"stylesheet\">\\n'\n+            '<script src=\"/path/to/js1\"></script>\\n'\n+            '<script src=\"http://media.other.com/path/to/js2\"></script>\\n'\n+            '<script src=\"https://secure.other.com/path/to/js3\"></script>\\n'\n+            '<script src=\"/path/to/js4\" integrity=\"9d947b87fdeb25030d56d01f7aa75800\">'\n+            \"</script>\",\n+        )\n+\n+    def test_media_deduplication(self):\n+        # The deduplication doesn't only happen at the point of merging two or\n+        # more media objects.\n+        media = Media(\n+            css={\n+                \"all\": (\n+                    CSS(\"/path/to/css1\", \"all\"),\n+                    CSS(\"/path/to/css1\", \"all\"),\n+                    \"/path/to/css1\",\n+                )\n+            },\n+            js=(JS(\"/path/to/js1\"), JS(\"/path/to/js1\"), \"/path/to/js1\"),\n+        )\n+        self.assertEqual(\n+            str(media),\n+            '<link href=\"/path/to/css1\" media=\"all\" rel=\"stylesheet\">\\n'\n+            '<script src=\"/path/to/js1\"></script>',\n+        )\ndiff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 9e1be0fe0f..2696dd49c5 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -432,6 +432,12 @@ class SimpleLazyObject(LazyObject):\n             return result\n         return copy.deepcopy(self._wrapped, memo)\n \n+    __add__ = new_method_proxy(operator.add)\n+\n+    @new_method_proxy\n+    def __radd__(self, other):\n+        return other + self\n+\n \n def partition(predicate, values):\n     \"\"\"\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220210074827) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220210074827) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220210074827) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.1.dev20220210074827-0.editable-py3-none-any.whl size=26911 sha256=9df9c753a9ec2f033f3584a18446dd5af774cb6f4c2c1004557ec63d31d47868\n  Stored in directory: /tmp/pip-ephem-wheel-cache-y6xw06s6/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.1.dev20220210074827\n    Uninstalling Django-4.1.dev20220210074827:\n      Successfully uninstalled Django-4.1.dev20220210074827\nSuccessfully installed Django-4.1.dev20220210074827\nTesting against Django installed in '/testbed/django'\nImporting application utils_tests\nFound 65 test(s).\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n", {}]