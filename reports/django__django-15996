[{"repo": "django/django", "instance_id": "django__django-15996", "base_commit": "b30c0081d4d8a31ab7dc7f72a4c7099af606ef29", "patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -16,7 +16,7 @@\n from django.db.migrations.operations.base import Operation\n from django.db.migrations.utils import COMPILED_REGEX_TYPE, RegexObject\n from django.utils.functional import LazyObject, Promise\n-from django.utils.version import get_docs_version\n+from django.utils.version import PY311, get_docs_version\n \n \n class BaseSerializer:\n@@ -125,8 +125,21 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        if issubclass(enum_class, enum.Flag):\n+            if PY311:\n+                members = list(self.value)\n+            else:\n+                members, _ = enum._decompose(enum_class, self.value)\n+                members = reversed(members)\n+        else:\n+            members = (self.value,)\n         return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+            \" | \".join(\n+                [\n+                    f\"{module}.{enum_class.__qualname__}[{item.name!r}]\"\n+                    for item in members\n+                ]\n+            ),\n             {\"import %s\" % module},\n         )\n \n", "test_patch": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -413,6 +413,14 @@ def test_serialize_enum_flags(self):\n             \"(2, migrations.test_writer.IntFlagEnum['B'])], \"\n             \"default=migrations.test_writer.IntFlagEnum['A'])\",\n         )\n+        self.assertSerializedResultEqual(\n+            IntFlagEnum.A | IntFlagEnum.B,\n+            (\n+                \"migrations.test_writer.IntFlagEnum['A'] | \"\n+                \"migrations.test_writer.IntFlagEnum['B']\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n", "problem_statement": "Support for serialization of combination of Enum flags.\nDescription\n\t \n\t\t(last modified by Willem Van Onsem)\n\t \nIf we work with a field:\nregex_flags = models.IntegerField(default=re.UNICODE | re.IGNORECASE)\nThis is turned into a migration with:\ndefault=re.RegexFlag[None]\nThis is due to the fact that the EnumSerializer aims to work with the .name of the item, but if there is no single item for the given value, then there is no such name.\nIn that case, we can use enum._decompose to obtain a list of names, and create an expression to create the enum value by \"ORing\" the items together.\n", "hints_text": "patch of the EnumSerializer", "created_at": "2022-08-25T04:49:14Z", "version": "4.2", "FAIL_TO_PASS": "[\"test_serialize_enum_flags (migrations.test_writer.WriterTests)\"]", "PASS_TO_PASS": "[\"test_args_kwargs_signature (migrations.test_writer.OperationWriterTests)\", \"test_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_empty_signature (migrations.test_writer.OperationWriterTests)\", \"test_expand_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_kwargs_signature (migrations.test_writer.OperationWriterTests)\", \"test_multiline_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_nested_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_nested_operation_expand_args_signature (migrations.test_writer.OperationWriterTests)\", \"test_custom_operation (migrations.test_writer.WriterTests)\", \"test_deconstruct_class_arguments (migrations.test_writer.WriterTests)\", \"Test comments at top of file.\", \"test_migration_path (migrations.test_writer.WriterTests)\", \"django.db.models shouldn't be imported if unused.\", \"test_register_non_serializer (migrations.test_writer.WriterTests)\", \"test_register_serializer (migrations.test_writer.WriterTests)\", \"test_serialize_builtin_types (migrations.test_writer.WriterTests)\", \"test_serialize_builtins (migrations.test_writer.WriterTests)\", \"test_serialize_choices (migrations.test_writer.WriterTests)\", \"Ticket #22943: Test serialization of class-based validators, including\", \"test_serialize_collections (migrations.test_writer.WriterTests)\", \"Make sure compiled regex can be serialized.\", \"test_serialize_complex_func_index (migrations.test_writer.WriterTests)\", \"test_serialize_constants (migrations.test_writer.WriterTests)\", \"test_serialize_datetime (migrations.test_writer.WriterTests)\", \"Ticket #22679: makemigrations generates invalid code for (an empty\", \"test_serialize_enums (migrations.test_writer.WriterTests)\", \"test_serialize_fields (migrations.test_writer.WriterTests)\", \"test_serialize_frozensets (migrations.test_writer.WriterTests)\", \"test_serialize_functions (migrations.test_writer.WriterTests)\", \"test_serialize_functools_partial (migrations.test_writer.WriterTests)\", \"test_serialize_functools_partialmethod (migrations.test_writer.WriterTests)\", \"test_serialize_iterators (migrations.test_writer.WriterTests)\", \"test_serialize_lazy_objects (migrations.test_writer.WriterTests)\", \"A reference in a local scope can't be serialized.\", \"test_serialize_managers (migrations.test_writer.WriterTests)\", \"test_serialize_multiline_strings (migrations.test_writer.WriterTests)\", \"test_serialize_nested_class (migrations.test_writer.WriterTests)\", \"test_serialize_numbers (migrations.test_writer.WriterTests)\", \"test_serialize_path_like (migrations.test_writer.WriterTests)\", \"test_serialize_pathlib (migrations.test_writer.WriterTests)\", \"test_serialize_range (migrations.test_writer.WriterTests)\", \"test_serialize_set (migrations.test_writer.WriterTests)\", \"test_serialize_settings (migrations.test_writer.WriterTests)\", \"test_serialize_strings (migrations.test_writer.WriterTests)\", \"test_serialize_timedelta (migrations.test_writer.WriterTests)\", \"test_serialize_type_model (migrations.test_writer.WriterTests)\", \"test_serialize_type_none (migrations.test_writer.WriterTests)\", \"An unbound method used within a class body can be serialized.\", \"test_serialize_uuid (migrations.test_writer.WriterTests)\", \"Tests serializing a simple migration.\", \"#24155 - Tests ordering of imports.\"]", "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/db/migrations/serializer.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit b30c0081d4d8a31ab7dc7f72a4c7099af606ef29\nAuthor: Simon Charette <charette.s@gmail.com>\nDate:   Tue Aug 23 23:06:04 2022 -0400\n\n    Refs #27412 -- Confirmed support for executing Coalesce(subquery).\n    \n    This has been supported for subqueries wrapped in Subquery since the expression\n    was introduced and for Queryset directly since Subquery resolves to sql.Query.\n    \n    Piggy-backed on the existing tests covering Coalesce handling of EmptyResultSet\n    as it seemed like a proper location to combine testing.\n\ndiff --git a/tests/db_functions/comparison/test_coalesce.py b/tests/db_functions/comparison/test_coalesce.py\nindex 9125923847..d5f6a7a6a2 100644\n--- a/tests/db_functions/comparison/test_coalesce.py\n+++ b/tests/db_functions/comparison/test_coalesce.py\n@@ -64,11 +64,14 @@ class CoalesceTests(TestCase):\n \n     def test_empty_queryset(self):\n         Author.objects.create(name=\"John Smith\")\n+        queryset = Author.objects.values(\"id\")\n         tests = [\n-            Author.objects.none(),\n-            Subquery(Author.objects.none()),\n+            (queryset.none(), \"QuerySet.none()\"),\n+            (queryset.filter(id=0), \"QuerySet.filter(id=0)\"),\n+            (Subquery(queryset.none()), \"Subquery(QuerySet.none())\"),\n+            (Subquery(queryset.filter(id=0)), \"Subquery(Queryset.filter(id=0)\"),\n         ]\n-        for empty_query in tests:\n-            with self.subTest(empty_query.__class__.__name__):\n+        for empty_query, description in tests:\n+            with self.subTest(description), self.assertNumQueries(1):\n                 qs = Author.objects.annotate(annotation=Coalesce(empty_query, 42))\n                 self.assertEqual(qs.first().annotation, 42)\ndiff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..7ebc966f40 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -16,7 +16,7 @@ from django.db import models\n from django.db.migrations.operations.base import Operation\n from django.db.migrations.utils import COMPILED_REGEX_TYPE, RegexObject\n from django.utils.functional import LazyObject, Promise\n-from django.utils.version import get_docs_version\n+from django.utils.version import PY311, get_docs_version\n \n \n class BaseSerializer:\n@@ -125,8 +125,21 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        if issubclass(enum_class, enum.Flag):\n+            if PY311:\n+                members = list(self.value)\n+            else:\n+                members, _ = enum._decompose(enum_class, self.value)\n+                members = reversed(members)\n+        else:\n+            members = (self.value,)\n         return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+            \" | \".join(\n+                [\n+                    f\"{module}.{enum_class.__qualname__}[{item.name!r}]\"\n+                    for item in members\n+                ]\n+            ),\n             {\"import %s\" % module},\n         )\n \nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.5.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220824103047) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220824103047) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.5.2->Django==4.2.dev20220824103047) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.2.dev20220824103047-0.editable-py3-none-any.whl size=27151 sha256=d3fff0c4b23634fc8f23738054362b57161fbbbc20a157ca9a7a882c3a153ef6\n  Stored in directory: /tmp/pip-ephem-wheel-cache-vr9i9twr/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.2.dev20220824103047\n    Uninstalling Django-4.2.dev20220824103047:\n      Successfully uninstalled Django-4.2.dev20220824103047\nSuccessfully installed Django-4.2.dev20220824103047\nTesting against Django installed in '/testbed/django'\nImporting application migrations\nFound 52 test(s).\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n", {}]