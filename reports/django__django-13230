[{"repo": "django/django", "instance_id": "django__django-13230", "base_commit": "184a6eebb0ef56d5f1b1315a8e666830e37f3f81", "patch": "diff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py\n--- a/django/contrib/syndication/views.py\n+++ b/django/contrib/syndication/views.py\n@@ -212,6 +212,7 @@ def get_feed(self, obj, request):\n                 author_name=author_name,\n                 author_email=author_email,\n                 author_link=author_link,\n+                comments=self._get_dynamic_attr('item_comments', item),\n                 categories=self._get_dynamic_attr('item_categories', item),\n                 item_copyright=self._get_dynamic_attr('item_copyright', item),\n                 **self.item_extra_kwargs(item)\n", "test_patch": "diff --git a/tests/syndication_tests/feeds.py b/tests/syndication_tests/feeds.py\n--- a/tests/syndication_tests/feeds.py\n+++ b/tests/syndication_tests/feeds.py\n@@ -29,6 +29,9 @@ def item_pubdate(self, item):\n     def item_updateddate(self, item):\n         return item.updated\n \n+    def item_comments(self, item):\n+        return \"%scomments\" % item.get_absolute_url()\n+\n     item_author_name = 'Sally Smith'\n     item_author_email = 'test@example.com'\n     item_author_link = 'http://www.example.com/'\ndiff --git a/tests/syndication_tests/tests.py b/tests/syndication_tests/tests.py\n--- a/tests/syndication_tests/tests.py\n+++ b/tests/syndication_tests/tests.py\n@@ -136,10 +136,20 @@ def test_rss2_feed(self):\n             'guid': 'http://example.com/blog/1/',\n             'pubDate': pub_date,\n             'author': 'test@example.com (Sally Smith)',\n+            'comments': '/blog/1/comments',\n         })\n         self.assertCategories(items[0], ['python', 'testing'])\n         for item in items:\n-            self.assertChildNodes(item, ['title', 'link', 'description', 'guid', 'category', 'pubDate', 'author'])\n+            self.assertChildNodes(item, [\n+                'title',\n+                'link',\n+                'description',\n+                'guid',\n+                'category',\n+                'pubDate',\n+                'author',\n+                'comments',\n+            ])\n             # Assert that <guid> does not have any 'isPermaLink' attribute\n             self.assertIsNone(item.getElementsByTagName(\n                 'guid')[0].attributes.get('isPermaLink'))\n", "problem_statement": "Add support for item_comments to syndication framework\nDescription\n\t\nAdd comments argument to feed.add_item() in syndication.views so that item_comments can be defined directly without having to take the detour via item_extra_kwargs .\nAdditionally, comments is already explicitly mentioned in the feedparser, but not implemented in the view.\n", "hints_text": "", "created_at": "2020-07-23T14:59:50Z", "version": "3.2", "FAIL_TO_PASS": "[\"test_rss2_feed (syndication_tests.tests.SyndicationFeedTest)\"]", "PASS_TO_PASS": "[\"test_add_domain (syndication_tests.tests.SyndicationFeedTest)\", \"test_atom_feed (syndication_tests.tests.SyndicationFeedTest)\", \"test_atom_feed_published_and_updated_elements (syndication_tests.tests.SyndicationFeedTest)\", \"test_atom_multiple_enclosures (syndication_tests.tests.SyndicationFeedTest)\", \"test_atom_single_enclosure (syndication_tests.tests.SyndicationFeedTest)\", \"test_aware_datetime_conversion (syndication_tests.tests.SyndicationFeedTest)\", \"test_custom_feed_generator (syndication_tests.tests.SyndicationFeedTest)\", \"test_feed_generator_language_attribute (syndication_tests.tests.SyndicationFeedTest)\", \"test_feed_last_modified_time (syndication_tests.tests.SyndicationFeedTest)\", \"test_feed_last_modified_time_naive_date (syndication_tests.tests.SyndicationFeedTest)\", \"test_feed_url (syndication_tests.tests.SyndicationFeedTest)\", \"test_item_link_error (syndication_tests.tests.SyndicationFeedTest)\", \"test_latest_post_date (syndication_tests.tests.SyndicationFeedTest)\", \"test_naive_datetime_conversion (syndication_tests.tests.SyndicationFeedTest)\", \"test_rss091_feed (syndication_tests.tests.SyndicationFeedTest)\", \"test_rss2_feed_guid_permalink_false (syndication_tests.tests.SyndicationFeedTest)\", \"test_rss2_feed_guid_permalink_true (syndication_tests.tests.SyndicationFeedTest)\", \"test_rss2_multiple_enclosures (syndication_tests.tests.SyndicationFeedTest)\", \"test_rss2_single_enclosure (syndication_tests.tests.SyndicationFeedTest)\", \"test_secure_urls (syndication_tests.tests.SyndicationFeedTest)\", \"test_template_context_feed (syndication_tests.tests.SyndicationFeedTest)\", \"test_template_feed (syndication_tests.tests.SyndicationFeedTest)\", \"test_title_escaping (syndication_tests.tests.SyndicationFeedTest)\"]", "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d"}, "Generating locales (this might take a while)...\n  en_US.UTF-8... done\nGeneration complete.\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/contrib/syndication/views.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 184a6eebb0ef56d5f1b1315a8e666830e37f3f81\nAuthor: Tim Graham <timograham@gmail.com>\nDate:   Thu Jul 30 00:38:02 2020 -0400\n\n    Refs #31829 -- Added DatabaseFeatures.json_key_contains_list_matching_requires_list.\n    \n    CockroachDB's behavior matches PostgreSQL.\n\ndiff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py\nindex 6847a6fe84..4639f1bb2e 100644\n--- a/django/db/backends/base/features.py\n+++ b/django/db/backends/base/features.py\n@@ -298,6 +298,9 @@ class BaseDatabaseFeatures:\n     # Does the backend support __contains and __contained_by lookups for\n     # a JSONField?\n     supports_json_field_contains = True\n+    # Does value__d__contains={'f': 'g'} (without a list around the dict) match\n+    # {'d': [{'f': 'g'}]}?\n+    json_key_contains_list_matching_requires_list = False\n \n     def __init__(self, connection):\n         self.connection = connection\ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\nindex 864bcf3919..df16691444 100644\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -57,6 +57,7 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     validates_explain_options = False  # A query will error on invalid options.\n     supports_deferrable_unique_constraints = True\n     has_json_operators = True\n+    json_key_contains_list_matching_requires_list = True\n \n     @cached_property\n     def introspected_field_types(self):\ndiff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex 11e82c5998..a7648711ac 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -714,8 +714,9 @@ class TestQuerying(TestCase):\n                 )),\n             ),\n         ]\n-        # PostgreSQL requires a layer of nesting.\n-        if connection.vendor != 'postgresql':\n+        # For databases where {'f': 'g'} (without surrounding []) matches\n+        # [{'f': 'g'}].\n+        if not connection.features.json_key_contains_list_matching_requires_list:\n             tests.append(('value__d__contains', {'f': 'g'}))\n         for lookup, value in tests:\n             with self.subTest(lookup=lookup, value=value):\ndiff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py\nindex 68ffb0bfe0..df97103318 100644\n--- a/django/contrib/syndication/views.py\n+++ b/django/contrib/syndication/views.py\n@@ -212,6 +212,7 @@ class Feed:\n                 author_name=author_name,\n                 author_email=author_email,\n                 author_link=author_link,\n+                comments=self._get_dynamic_attr('item_comments', item),\n                 categories=self._get_dynamic_attr('item_categories', item),\n                 item_copyright=self._get_dynamic_attr('item_copyright', item),\n                 **self.item_extra_kwargs(item)\nObtaining file:///testbed\nRequirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.2)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)\nRequirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 3.2\n    Uninstalling Django-3.2:\n      Successfully uninstalled Django-3.2\n  Running setup.py develop for Django\nSuccessfully installed Django-3.2\nTesting against Django installed in '/testbed/django'\nImporting application syndication_tests\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles, syndication_tests\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table syndication_tests_entry\n    Creating table syndication_tests_article\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]