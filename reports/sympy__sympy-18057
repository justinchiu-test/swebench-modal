[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-18057", "base_commit": "62000f37b8821573ba00280524ffb4ac4a380875", "patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -121,7 +121,7 @@ def _hashable_content(self):\n \n     def __eq__(self, other):\n         try:\n-            other = sympify(other)\n+            other = _sympify(other)\n             if not isinstance(other, Expr):\n                 return False\n         except (SympifyError, SyntaxError):\n", "test_patch": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1903,3 +1903,24 @@ def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n     assert eb.build() == x**2\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\ndiff --git a/sympy/core/tests/test_var.py b/sympy/core/tests/test_var.py\n--- a/sympy/core/tests/test_var.py\n+++ b/sympy/core/tests/test_var.py\n@@ -19,7 +19,8 @@ def test_var():\n     assert ns['fg'] == Symbol('fg')\n \n # check return value\n-    assert v == ['d', 'e', 'fg']\n+    assert v != ['d', 'e', 'fg']\n+    assert v == [Symbol('d'), Symbol('e'), Symbol('fg')]\n \n \n def test_var_return():\n", "problem_statement": "Sympy incorrectly attempts to eval reprs in its __eq__ method\nPassing strings produced by unknown objects into eval is **very bad**. It is especially surprising for an equality check to trigger that kind of behavior. This should be fixed ASAP.\r\n\r\nRepro code:\r\n\r\n```\r\nimport sympy\r\nclass C:\r\n    def __repr__(self):\r\n        return 'x.y'\r\n_ = sympy.Symbol('x') == C()\r\n```\r\n\r\nResults in:\r\n\r\n```\r\nE   AttributeError: 'Symbol' object has no attribute 'y'\r\n```\r\n\r\nOn the line:\r\n\r\n```\r\n    expr = eval(\r\n        code, global_dict, local_dict)  # take local objects in preference\r\n```\r\n\r\nWhere code is:\r\n\r\n```\r\nSymbol ('x' ).y\r\n```\r\n\r\nFull trace:\r\n\r\n```\r\nFAILED                   [100%]\r\n        class C:\r\n            def __repr__(self):\r\n                return 'x.y'\r\n    \r\n>       _ = sympy.Symbol('x') == C()\r\n\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nsympy/core/expr.py:124: in __eq__\r\n    other = sympify(other)\r\nsympy/core/sympify.py:385: in sympify\r\n    expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\r\nsympy/parsing/sympy_parser.py:1011: in parse_expr\r\n    return eval_expr(code, local_dict, global_dict)\r\nsympy/parsing/sympy_parser.py:906: in eval_expr\r\n    code, global_dict, local_dict)  # take local objects in preference\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   ???\r\nE   AttributeError: 'Symbol' object has no attribute 'y'\r\n\r\n<string>:1: AttributeError\r\n```\r\n\r\nRelated issue: an unknown object whose repr is `x` will incorrectly compare as equal to a sympy symbol x:\r\n\r\n```\r\n    class C:\r\n        def __repr__(self):\r\n            return 'x'\r\n\r\n    assert sympy.Symbol('x') != C()  # fails\r\n```\n", "hints_text": "See also #12524\nSafe flag or no, == should call _sympify since an expression shouldn't equal a string. \r\n\r\nI also think we should deprecate the string fallback in sympify. It has led to serious performance issues in the past and clearly has security issues as well. \nActually, it looks like we also have\r\n\r\n```\r\n>>> x == 'x'\r\nTrue\r\n```\r\n\r\nwhich is a major regression since 1.4. \r\n\r\nI bisected it to 73caef3991ca5c4c6a0a2c16cc8853cf212db531. \r\n\r\nThe bug in the issue doesn't exist in 1.4 either. So we could consider doing a 1.5.1 release fixing this. \nThe thing is, I could have swore this behavior was tested. But I don't see anything in the test changes from https://github.com/sympy/sympy/pull/16924 about string comparisons. ", "created_at": "2019-12-17T03:57:50Z", "version": "1.6", "FAIL_TO_PASS": "[\"test_var\"]", "PASS_TO_PASS": "[\"test_basic\", \"test_ibasic\", \"test_relational\", \"test_relational_assumptions\", \"test_basic_nostr\", \"test_series_expansion_for_uniform_order\", \"test_leadterm\", \"test_as_leading_term\", \"test_leadterm2\", \"test_leadterm3\", \"test_as_leading_term2\", \"test_as_leading_term3\", \"test_as_leading_term4\", \"test_as_leading_term_stub\", \"test_as_leading_term_deriv_integral\", \"test_atoms\", \"test_is_polynomial\", \"test_is_rational_function\", \"test_is_algebraic_expr\", \"test_SAGE1\", \"test_SAGE2\", \"test_SAGE3\", \"test_len\", \"test_doit\", \"test_attribute_error\", \"test_args\", \"test_noncommutative_expand_issue_3757\", \"test_as_numer_denom\", \"test_trunc\", \"test_as_independent\", \"test_replace\", \"test_find\", \"test_count\", \"test_has_basics\", \"test_has_multiple\", \"test_has_piecewise\", \"test_has_iterative\", \"test_has_integrals\", \"test_has_tuple\", \"test_has_units\", \"test_has_polys\", \"test_has_physics\", \"test_as_poly_as_expr\", \"test_nonzero\", \"test_is_number\", \"test_as_coeff_add\", \"test_as_coeff_mul\", \"test_as_coeff_exponent\", \"test_extractions\", \"test_nan_extractions\", \"test_coeff\", \"test_coeff2\", \"test_coeff2_0\", \"test_coeff_expand\", \"test_integrate\", \"test_as_base_exp\", \"test_issue_4963\", \"test_action_verbs\", \"test_as_powers_dict\", \"test_as_coefficients_dict\", \"test_args_cnc\", \"test_new_rawargs\", \"test_issue_5226\", \"test_free_symbols\", \"test_issue_5300\", \"test_floordiv\", \"test_as_coeff_Mul\", \"test_as_coeff_Add\", \"test_expr_sorting\", \"test_as_ordered_factors\", \"test_as_ordered_terms\", \"test_sort_key_atomic_expr\", \"test_eval_interval\", \"test_eval_interval_zoo\", \"test_primitive\", \"test_issue_5843\", \"test_is_constant\", \"test_equals\", \"test_random\", \"test_round\", \"test_held_expression_UnevaluatedExpr\", \"test_round_exception_nostr\", \"test_extract_branch_factor\", \"test_identity_removal\", \"test_float_0\", \"test_issue_6325\", \"test_issue_7426\", \"test_issue_11122\", \"test_issue_10651\", \"test_issue_10161\", \"test_issue_10755\", \"test_issue_11877\", \"test_normal\", \"test_expr\", \"test_ExprBuilder\", \"test_var_return\", \"test_var_accepts_comma\", \"test_var_keywords\"]", "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   sympy/core/expr.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 62000f37b8821573ba00280524ffb4ac4a380875\nMerge: 5bcb7c644f 0058fd7aaf\nAuthor: Oscar Benjamin <oscar.j.benjamin@gmail.com>\nDate:   Mon Dec 16 21:35:07 2019 +0000\n\n    Merge pull request #17991 from oscarbenjamin/flake8_more\n    \n    Fix flake8 in simplify, sets, printing, plotting\n\ndiff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 24d89897f7..b1e85ead5f 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -121,7 +121,7 @@ def _hashable_content(self):\n \n     def __eq__(self, other):\n         try:\n-            other = sympify(other)\n+            other = _sympify(other)\n             if not isinstance(other, Expr):\n                 return False\n         except (SympifyError, SyntaxError):\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.6.dev0) (1.3.0)\nInstalling collected packages: sympy\n  Attempting uninstall: sympy\n    Found existing installation: sympy 1.6.dev0\n    Uninstalling sympy-1.6.dev0:\n      Successfully uninstalled sympy-1.6.dev0\n  Running setup.py develop for sympy\nSuccessfully installed sympy\n============================= test process starts ==============================\nexecutable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]\narchitecture:       64-bit\ncache:              no\nground types:       python \nnumpy:              None\nrandom seed:        76522203\nhash randomization: off\n\nsympy/core/tests/test_expr.py[98] \ntest_basic ok\ntest_ibasic ok\ntest_relational ok\ntest_relational_assumptions ok\ntest_basic_nostr ok\ntest_series_expansion_for_uniform_order ok\ntest_leadterm ok\ntest_as_leading_term ok\ntest_leadterm2 ok\ntest_leadterm3 ok\ntest_as_leading_term2 ok\ntest_as_leading_term3 ok\ntest_as_leading_term4 ok\ntest_as_leading_term_stub ok\ntest_as_leading_term_deriv_integral ok\ntest_atoms ok\ntest_is_polynomial ok\ntest_is_rational_function ok\ntest_is_algebraic_expr ok\ntest_SAGE1 ok\ntest_SAGE2 ok\ntest_SAGE3 ok\ntest_len ok\ntest_doit ok\ntest_attribute_error ok\ntest_args ok\ntest_noncommutative_expand_issue_3757 ok\ntest_as_numer_denom ok\ntest_trunc ok\ntest_as_independent ok\ntest_call_2 f\ntest_replace ok\ntest_find ok\ntest_count ok\ntest_has_basics ok\ntest_has_multiple ok\ntest_has_piecewise ok\ntest_has_iterative ok\ntest_has_integrals ok\ntest_has_tuple ok\ntest_has_units ok\ntest_has_polys ok\ntest_has_physics ok\ntest_as_poly_as_expr ok\ntest_nonzero ok\ntest_is_number ok\ntest_as_coeff_add ok\ntest_as_coeff_mul ok\ntest_as_coeff_exponent ok\ntest_extractions ok\ntest_nan_extractions ok\ntest_coeff ok\ntest_coeff2 ok\ntest_coeff2_0 ok\ntest_coeff_expand ok\ntest_integrate ok\ntest_as_base_exp ok\ntest_issue_4963 ok\ntest_action_verbs ok\ntest_as_powers_dict ok\ntest_as_coefficients_dict ok\ntest_args_cnc ok\ntest_new_rawargs ok\ntest_issue_5226 ok\ntest_free_symbols ok\ntest_issue_5300 ok\ntest_floordiv ok\ntest_as_coeff_Mul ok\ntest_as_coeff_Add ok\ntest_expr_sorting ok\ntest_as_ordered_factors ok\ntest_as_ordered_terms ok\ntest_sort_key_atomic_expr ok\ntest_eval_interval ok\ntest_eval_interval_zoo ok\ntest_primitive ok\ntest_issue_5843 ok\ntest_is_constant ok\ntest_equals ok\ntest_random ok\ntest_round ok\ntest_held_expression_UnevaluatedExpr ok\ntest_round_exception_nostr ok\ntest_extract_branch_factor ok\ntest_identity_removal ok\ntest_float_0 ok\ntest_float_0_fail f\ntest_issue_6325 ok\ntest_issue_7426 ok\ntest_issue_11122 ok\ntest_issue_10651 ok\ntest_issue_10161 ok\ntest_issue_10755 ok\ntest_issue_11877 ok\ntest_normal ok\ntest_expr ok\ntest_ExprBuilder ok\ntest_non_string_equality ok                                                 [OK]\n\nsympy/core/tests/test_var.py[5] \ntest_var ok\ntest_var_return ok\ntest_var_accepts_comma ok\ntest_var_keywords ok\ntest_var_cls ok                                                             [OK]\n\n\n________________________________ slowest tests _________________________________\ntest_equals - Took 112.260 seconds\n====== tests finished: 101 passed, 2 expected to fail, in 138.39 seconds =======\n", {"test_basic": "PASSED", "test_ibasic": "PASSED", "test_relational": "PASSED", "test_relational_assumptions": "PASSED", "test_basic_nostr": "PASSED", "test_series_expansion_for_uniform_order": "PASSED", "test_leadterm": "PASSED", "test_as_leading_term": "PASSED", "test_leadterm2": "PASSED", "test_leadterm3": "PASSED", "test_as_leading_term2": "PASSED", "test_as_leading_term3": "PASSED", "test_as_leading_term4": "PASSED", "test_as_leading_term_stub": "PASSED", "test_as_leading_term_deriv_integral": "PASSED", "test_atoms": "PASSED", "test_is_polynomial": "PASSED", "test_is_rational_function": "PASSED", "test_is_algebraic_expr": "PASSED", "test_SAGE1": "PASSED", "test_SAGE2": "PASSED", "test_SAGE3": "PASSED", "test_len": "PASSED", "test_doit": "PASSED", "test_attribute_error": "PASSED", "test_args": "PASSED", "test_noncommutative_expand_issue_3757": "PASSED", "test_as_numer_denom": "PASSED", "test_trunc": "PASSED", "test_as_independent": "PASSED", "test_replace": "PASSED", "test_find": "PASSED", "test_count": "PASSED", "test_has_basics": "PASSED", "test_has_multiple": "PASSED", "test_has_piecewise": "PASSED", "test_has_iterative": "PASSED", "test_has_integrals": "PASSED", "test_has_tuple": "PASSED", "test_has_units": "PASSED", "test_has_polys": "PASSED", "test_has_physics": "PASSED", "test_as_poly_as_expr": "PASSED", "test_nonzero": "PASSED", "test_is_number": "PASSED", "test_as_coeff_add": "PASSED", "test_as_coeff_mul": "PASSED", "test_as_coeff_exponent": "PASSED", "test_extractions": "PASSED", "test_nan_extractions": "PASSED", "test_coeff": "PASSED", "test_coeff2": "PASSED", "test_coeff2_0": "PASSED", "test_coeff_expand": "PASSED", "test_integrate": "PASSED", "test_as_base_exp": "PASSED", "test_issue_4963": "PASSED", "test_action_verbs": "PASSED", "test_as_powers_dict": "PASSED", "test_as_coefficients_dict": "PASSED", "test_args_cnc": "PASSED", "test_new_rawargs": "PASSED", "test_issue_5226": "PASSED", "test_free_symbols": "PASSED", "test_issue_5300": "PASSED", "test_floordiv": "PASSED", "test_as_coeff_Mul": "PASSED", "test_as_coeff_Add": "PASSED", "test_expr_sorting": "PASSED", "test_as_ordered_factors": "PASSED", "test_as_ordered_terms": "PASSED", "test_sort_key_atomic_expr": "PASSED", "test_eval_interval": "PASSED", "test_eval_interval_zoo": "PASSED", "test_primitive": "PASSED", "test_issue_5843": "PASSED", "test_is_constant": "PASSED", "test_equals": "PASSED", "test_random": "PASSED", "test_round": "PASSED", "test_held_expression_UnevaluatedExpr": "PASSED", "test_round_exception_nostr": "PASSED", "test_extract_branch_factor": "PASSED", "test_identity_removal": "PASSED", "test_float_0": "PASSED", "test_issue_6325": "PASSED", "test_issue_7426": "PASSED", "test_issue_11122": "PASSED", "test_issue_10651": "PASSED", "test_issue_10161": "PASSED", "test_issue_10755": "PASSED", "test_issue_11877": "PASSED", "test_normal": "PASSED", "test_expr": "PASSED", "test_ExprBuilder": "PASSED", "test_var": "PASSED", "test_var_return": "PASSED", "test_var_accepts_comma": "PASSED", "test_var_keywords": "PASSED"}]