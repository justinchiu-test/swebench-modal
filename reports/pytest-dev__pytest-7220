[{"repo": "pytest-dev/pytest", "instance_id": "pytest-dev__pytest-7220", "base_commit": "56bf819c2f4eaf8b36bd8c42c06bb59d5a3bfc0f", "patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -29,6 +29,7 @@\n from _pytest.mark.structures import MarkDecorator\n from _pytest.mark.structures import NodeKeywords\n from _pytest.outcomes import fail\n+from _pytest.pathlib import Path\n from _pytest.store import Store\n \n if TYPE_CHECKING:\n@@ -361,9 +362,14 @@ def _repr_failure_py(\n         else:\n             truncate_locals = True\n \n+        # excinfo.getrepr() formats paths relative to the CWD if `abspath` is False.\n+        # It is possible for a fixture/test to change the CWD while this code runs, which\n+        # would then result in the user seeing confusing paths in the failure message.\n+        # To fix this, if the CWD changed, always display the full absolute path.\n+        # It will be better to just always display paths relative to invocation_dir, but\n+        # this requires a lot of plumbing (#6428).\n         try:\n-            os.getcwd()\n-            abspath = False\n+            abspath = Path(os.getcwd()) != Path(self.config.invocation_dir)\n         except OSError:\n             abspath = True\n \n", "test_patch": "diff --git a/testing/test_nodes.py b/testing/test_nodes.py\n--- a/testing/test_nodes.py\n+++ b/testing/test_nodes.py\n@@ -58,3 +58,30 @@ class FakeSession:\n \n     outside = py.path.local(\"/outside\")\n     assert nodes._check_initialpaths_for_relpath(FakeSession, outside) is None\n+\n+\n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n", "problem_statement": "Wrong path to test file when directory changed in fixture\nFiles are shown as relative to new directory when working directory is changed in a fixture. This makes it impossible to jump to the error as the editor is unaware of the directory change. The displayed directory should stay relative to the original directory.\r\n\r\ntest_path_error.py:\r\n```python\r\nimport os\r\nimport errno\r\nimport shutil\r\n\r\nimport pytest\r\n\r\n\r\n@pytest.fixture\r\ndef private_dir():  # or (monkeypatch)\r\n    out_dir = 'ddd'\r\n\r\n    try:\r\n        shutil.rmtree(out_dir)\r\n    except OSError as ex:\r\n        if ex.errno != errno.ENOENT:\r\n            raise\r\n    os.mkdir(out_dir)\r\n\r\n    old_dir = os.getcwd()\r\n    os.chdir(out_dir)\r\n    yield out_dir\r\n    os.chdir(old_dir)\r\n\r\n    # Same issue if using:\r\n    # monkeypatch.chdir(out_dir)\r\n\r\n\r\ndef test_show_wrong_path(private_dir):\r\n    assert False\r\n```\r\n\r\n```diff\r\n+ Expected: test_path_error.py:29: AssertionError\r\n- Displayed: ../test_path_error.py:29: AssertionError\r\n```\r\n\r\nThe full output is:\r\n```\r\n-*- mode: compilation; default-directory: \"~/src/pytest_path_error/\" -*-\r\nCompilation started at Fri Jan 10 00:05:52\r\n\r\nnox\r\nnox > Running session test\r\nnox > Creating virtual environment (virtualenv) using python3.7 in .nox/test\r\nnox > pip install pytest>=5.3\r\nnox > pip freeze\r\nattrs==19.3.0\r\nimportlib-metadata==1.3.0\r\nmore-itertools==8.0.2\r\npackaging==20.0\r\npluggy==0.13.1\r\npy==1.8.1\r\npyparsing==2.4.6\r\npytest==5.3.2\r\nsix==1.13.0\r\nwcwidth==0.1.8\r\nzipp==0.6.0\r\nnox > pytest \r\n================================= test session starts =================================\r\nplatform linux -- Python 3.7.5, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\nrootdir: /home/lhn/src/pytest_path_error\r\ncollected 1 item                                                                      \r\n\r\ntest_path_error.py F                                                            [100%]\r\n\r\n====================================== FAILURES =======================================\r\n________________________________ test_show_wrong_path _________________________________\r\n\r\nprivate_dir = 'ddd'\r\n\r\n    def test_show_wrong_path(private_dir):\r\n>       assert False\r\nE       assert False\r\n\r\n../test_path_error.py:29: AssertionError\r\n================================== 1 failed in 0.03s ==================================\r\nnox > Command pytest  failed with exit code 1\r\nnox > Session test failed.\r\n\r\nCompilation exited abnormally with code 1 at Fri Jan 10 00:06:01\r\n```\r\n\r\nnoxfile.py:\r\n```python\r\nimport nox\r\n\r\n@nox.session(python='3.7')\r\ndef test(session):\r\n    session.install('pytest>=5.3')\r\n    session.run('pip', 'freeze')\r\n    session.run('pytest')\r\n```\n", "hints_text": "", "created_at": "2020-05-16T14:57:17Z", "version": "5.4", "FAIL_TO_PASS": "[\"testing/test_nodes.py::test_failure_with_changed_cwd\"]", "PASS_TO_PASS": "[\"testing/test_nodes.py::test_ischildnode[--True]\", \"testing/test_nodes.py::test_ischildnode[-foo-True]\", \"testing/test_nodes.py::test_ischildnode[-foo/bar-True]\", \"testing/test_nodes.py::test_ischildnode[-foo/bar::TestBaz-True]\", \"testing/test_nodes.py::test_ischildnode[foo-food-False]\", \"testing/test_nodes.py::test_ischildnode[foo/bar::TestBaz-foo/bar-False]\", \"testing/test_nodes.py::test_ischildnode[foo/bar::TestBaz-foo/bar::TestBop-False]\", \"testing/test_nodes.py::test_ischildnode[foo/bar-foo/bar::TestBop-True]\", \"testing/test_nodes.py::test_node_from_parent_disallowed_arguments\", \"testing/test_nodes.py::test__check_initialpaths_for_relpath\", \"testing/test_nodes.py::test_std_warn_not_pytestwarning\"]", "environment_setup_commit": "678c1a0745f1cf175c442c719906a1f13e496910"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   src/_pytest/nodes.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 56bf819c2f4eaf8b36bd8c42c06bb59d5a3bfc0f\nAuthor: Bruno Oliveira <nicoddemus@gmail.com>\nDate:   Sat May 30 14:33:22 2020 -0300\n\n    Do not call TestCase.tearDown for skipped tests (#7236)\n    \n    Fix #7215\n\ndiff --git a/changelog/7215.bugfix.rst b/changelog/7215.bugfix.rst\nnew file mode 100644\nindex 000000000..815149132\n--- /dev/null\n+++ b/changelog/7215.bugfix.rst\n@@ -0,0 +1,2 @@\n+Fix regression where running with ``--pdb`` would call the ``tearDown`` methods of ``unittest.TestCase``\n+subclasses for skipped tests.\ndiff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 773f545af..0d9133f60 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -41,7 +41,7 @@ class UnitTestCase(Class):\n         if not getattr(cls, \"__test__\", True):\n             return\n \n-        skipped = getattr(cls, \"__unittest_skip__\", False)\n+        skipped = _is_skipped(cls)\n         if not skipped:\n             self._inject_setup_teardown_fixtures(cls)\n             self._inject_setup_class_fixture()\n@@ -89,7 +89,7 @@ def _make_xunit_fixture(obj, setup_name, teardown_name, scope, pass_self):\n \n     @pytest.fixture(scope=scope, autouse=True)\n     def fixture(self, request):\n-        if getattr(self, \"__unittest_skip__\", None):\n+        if _is_skipped(self):\n             reason = self.__unittest_skip_why__\n             pytest.skip(reason)\n         if setup is not None:\n@@ -220,7 +220,7 @@ class TestCaseFunction(Function):\n             # arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed\n-            if self.config.getoption(\"usepdb\"):\n+            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n@@ -301,3 +301,8 @@ def check_testcase_implements_trial_reporter(done=[]):\n \n     classImplements(TestCaseFunction, IReporter)\n     done.append(1)\n+\n+\n+def _is_skipped(obj) -> bool:\n+    \"\"\"Return True if the given object has been marked with @unittest.skip\"\"\"\n+    return bool(getattr(obj, \"__unittest_skip__\", False))\ndiff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 83f1b6b2a..74a36c41b 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1193,6 +1193,40 @@ def test_pdb_teardown_called(testdir, monkeypatch):\n     ]\n \n \n+@pytest.mark.parametrize(\"mark\", [\"@unittest.skip\", \"@pytest.mark.skip\"])\n+def test_pdb_teardown_skipped(testdir, monkeypatch, mark):\n+    \"\"\"\n+    With --pdb, setUp and tearDown should not be called for skipped tests.\n+    \"\"\"\n+    tracked = []\n+    monkeypatch.setattr(pytest, \"test_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.test_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.test_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            {mark}(\"skipped for reasons\")\n+            def test_1(self):\n+                pass\n+\n+    \"\"\".format(\n+            mark=mark\n+        )\n+    )\n+    result = testdir.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n+\n def test_async_support(testdir):\n     pytest.importorskip(\"unittest.async_case\")\n \ndiff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 4a79bc861..7a8c28cd4 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -29,6 +29,7 @@ from _pytest.mark.structures import Mark\n from _pytest.mark.structures import MarkDecorator\n from _pytest.mark.structures import NodeKeywords\n from _pytest.outcomes import fail\n+from _pytest.pathlib import Path\n from _pytest.store import Store\n \n if TYPE_CHECKING:\n@@ -361,9 +362,14 @@ class Node(metaclass=NodeMeta):\n         else:\n             truncate_locals = True\n \n+        # excinfo.getrepr() formats paths relative to the CWD if `abspath` is False.\n+        # It is possible for a fixture/test to change the CWD while this code runs, which\n+        # would then result in the user seeing confusing paths in the failure message.\n+        # To fix this, if the CWD changed, always display the full absolute path.\n+        # It will be better to just always display paths relative to invocation_dir, but\n+        # this requires a lot of plumbing (#6428).\n         try:\n-            os.getcwd()\n-            abspath = False\n+            abspath = Path(os.getcwd()) != Path(self.config.invocation_dir)\n         except OSError:\n             abspath = True\n \nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: py>=1.5.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev380+g56bf819c2.d20220101) (1.11.0)\nRequirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev380+g56bf819c2.d20220101) (23.1)\nRequirement already satisfied: attrs>=17.4.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev380+g56bf819c2.d20220101) (23.1.0)\nRequirement already satisfied: more-itertools>=4.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev380+g56bf819c2.d20220101) (10.1.0)\nRequirement already satisfied: pluggy<1.0,>=0.12 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev380+g56bf819c2.d20220101) (0.13.1)\nRequirement already satisfied: wcwidth in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.4.1.dev380+g56bf819c2.d20220101) (0.2.13)\nBuilding wheels for collected packages: pytest\n  Building editable for pytest (pyproject.toml): started\n  Building editable for pytest (pyproject.toml): finished with status 'done'\n  Created wheel for pytest: filename=pytest-5.4.1.dev380+g56bf819c2.d20220101-0.editable-py3-none-any.whl size=8137 sha256=12874e2f27a7f17161f8e3f0d94962d6b1a1386ee3f1110cb4e13b535b5dc7f3\n  Stored in directory: /tmp/pip-ephem-wheel-cache-jwr9gnch/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built pytest\nInstalling collected packages: pytest\n  Attempting uninstall: pytest\n    Found existing installation: pytest 5.4.1.dev380+g56bf819c2\n    Uninstalling pytest-5.4.1.dev380+g56bf819c2:\n      Successfully uninstalled pytest-5.4.1.dev380+g56bf819c2\nSuccessfully installed pytest-5.4.1.dev380+g56bf819c2.d20220101\n============================= test session starts ==============================\nplatform linux -- Python 3.9.20, pytest-5.4.1.dev380+g56bf819c2.d20220101, py-1.11.0, pluggy-0.13.1\nrootdir: /testbed, inifile: tox.ini\ncollected 12 items\n\ntesting/test_nodes.py ............                                       [100%]\n\n==================================== PASSES ====================================\n_______________________ test_std_warn_not_pytestwarning ________________________\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.20, pytest-5.4.1.dev380+g56bf819c2.d20220101, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-1/test_std_warn_not_pytestwarning0\ncollected 0 items\n\n============================ no tests ran in 0.00s =============================\n________________________ test_failure_with_changed_cwd _________________________\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.20, pytest-5.4.1.dev380+g56bf819c2.d20220101, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-1/test_failure_with_changed_cwd0\ncollected 1 item\n\ntest_failure_with_changed_cwd.py F                                       [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_show_wrong_path _____________________________\n\nprivate_dir = 'ddd'\n\n    def test_show_wrong_path(private_dir):\n>       assert False\nE       assert False\n\n/tmp/pytest-of-root/pytest-1/test_failure_with_changed_cwd0/test_failure_with_changed_cwd.py:14: AssertionError\n=========================== short test summary info ============================\nFAILED test_failure_with_changed_cwd.py::test_show_wrong_path - assert False\n============================== 1 failed in 0.02s ===============================\n=========================== short test summary info ============================\nPASSED testing/test_nodes.py::test_ischildnode[--True]\nPASSED testing/test_nodes.py::test_ischildnode[-foo-True]\nPASSED testing/test_nodes.py::test_ischildnode[-foo/bar-True]\nPASSED testing/test_nodes.py::test_ischildnode[-foo/bar::TestBaz-True]\nPASSED testing/test_nodes.py::test_ischildnode[foo-food-False]\nPASSED testing/test_nodes.py::test_ischildnode[foo/bar::TestBaz-foo/bar-False]\nPASSED testing/test_nodes.py::test_ischildnode[foo/bar::TestBaz-foo/bar::TestBop-False]\nPASSED testing/test_nodes.py::test_ischildnode[foo/bar-foo/bar::TestBop-True]\nPASSED testing/test_nodes.py::test_node_from_parent_disallowed_arguments\nPASSED testing/test_nodes.py::test__check_initialpaths_for_relpath\nPASSED testing/test_nodes.py::test_std_warn_not_pytestwarning\nPASSED testing/test_nodes.py::test_failure_with_changed_cwd\n============================== 12 passed in 0.07s ==============================\n", {"test_failure_with_changed_cwd.py::test_show_wrong_path": "FAILED", "testing/test_nodes.py::test_ischildnode[--True]": "PASSED", "testing/test_nodes.py::test_ischildnode[-foo-True]": "PASSED", "testing/test_nodes.py::test_ischildnode[-foo/bar-True]": "PASSED", "testing/test_nodes.py::test_ischildnode[-foo/bar::TestBaz-True]": "PASSED", "testing/test_nodes.py::test_ischildnode[foo-food-False]": "PASSED", "testing/test_nodes.py::test_ischildnode[foo/bar::TestBaz-foo/bar-False]": "PASSED", "testing/test_nodes.py::test_ischildnode[foo/bar::TestBaz-foo/bar::TestBop-False]": "PASSED", "testing/test_nodes.py::test_ischildnode[foo/bar-foo/bar::TestBop-True]": "PASSED", "testing/test_nodes.py::test_node_from_parent_disallowed_arguments": "PASSED", "testing/test_nodes.py::test__check_initialpaths_for_relpath": "PASSED", "testing/test_nodes.py::test_std_warn_not_pytestwarning": "PASSED", "testing/test_nodes.py::test_failure_with_changed_cwd": "PASSED"}]