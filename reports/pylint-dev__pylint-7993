[{"repo": "pylint-dev/pylint", "instance_id": "pylint-dev__pylint-7993", "base_commit": "e90702074e68e20dc8e5df5013ee3ecf22139c3e", "patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,7 +175,7 @@ def on_set_current_module(self, module: str, filepath: str | None) -> None:\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{(\\w+?)(:.*)?\\}\", template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n", "test_patch": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -14,6 +14,7 @@\n from typing import TYPE_CHECKING\n \n import pytest\n+from _pytest.recwarn import WarningsRecorder\n \n from pylint import checkers\n from pylint.interfaces import HIGH\n@@ -88,16 +89,12 @@ def test_template_option_non_existing(linter) -> None:\n     \"\"\"\n     output = StringIO()\n     linter.reporter.out = output\n-    linter.config.msg_template = (\n-        \"{path}:{line}:{a_new_option}:({a_second_new_option:03d})\"\n-    )\n+    linter.config.msg_template = \"{path}:{line}:{categ}:({a_second_new_option:03d})\"\n     linter.open()\n     with pytest.warns(UserWarning) as records:\n         linter.set_current_module(\"my_mod\")\n         assert len(records) == 2\n-        assert (\n-            \"Don't recognize the argument 'a_new_option'\" in records[0].message.args[0]\n-        )\n+        assert \"Don't recognize the argument 'categ'\" in records[0].message.args[0]\n     assert (\n         \"Don't recognize the argument 'a_second_new_option'\"\n         in records[1].message.args[0]\n@@ -113,7 +110,24 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n-def test_deprecation_set_output(recwarn):\n+def test_template_option_with_header(linter: PyLinter) -> None:\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\n+        \"line-too-long\", line=2, end_lineno=2, end_col_offset=4, args=(3, 4)\n+    )\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"convention\" }'\n+\n+\n+def test_deprecation_set_output(recwarn: WarningsRecorder) -> None:\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n", "problem_statement": "Using custom braces in message template does not work\n### Bug description\n\nHave any list of errors:\r\n\r\nOn pylint 1.7 w/ python3.6 - I am able to use this as my message template\r\n```\r\n$ pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\r\nNo config file found, using default configuration\r\n************* Module [redacted].test\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"error\" }\r\n{ \"Category\": \"error\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"convention\" }\r\n{ \"Category\": \"error\" }\r\n```\r\n\r\nHowever, on Python3.9 with Pylint 2.12.2, I get the following:\r\n```\r\n$ pylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\r\n[redacted]/site-packages/pylint/reporters/text.py:206: UserWarning: Don't recognize the argument '{ \"Category\"' in the --msg-template. Are you sure it is supported on the current version of pylint?\r\n  warnings.warn(\r\n************* Module [redacted].test\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n```\r\n\r\nIs this intentional or a bug?\n\n### Configuration\n\n_No response_\n\n### Command used\n\n```shell\npylint test.py --msg-template='{{ \"Category\": \"{category}\" }}'\n```\n\n\n### Pylint output\n\n```shell\n[redacted]/site-packages/pylint/reporters/text.py:206: UserWarning: Don't recognize the argument '{ \"Category\"' in the --msg-template. Are you sure it is supported on the current version of pylint?\r\n  warnings.warn(\r\n************* Module [redacted].test\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\r\n\" }\n```\n\n\n### Expected behavior\n\nExpect the dictionary to print out with `\"Category\"` as the key.\n\n### Pylint version\n\n```shell\nAffected Version:\r\npylint 2.12.2\r\nastroid 2.9.2\r\nPython 3.9.9+ (heads/3.9-dirty:a2295a4, Dec 21 2021, 22:32:52) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]\r\n\r\n\r\nPreviously working version:\r\nNo config file found, using default configuration\r\npylint 1.7.4, \r\nastroid 1.6.6\r\nPython 3.6.8 (default, Nov 16 2020, 16:55:22) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]\n```\n\n\n### OS / Environment\n\n_No response_\n\n### Additional dependencies\n\n_No response_\n", "hints_text": "Subsequently, there is also this behavior with the quotes\r\n```\r\n$ pylint test.py --msg-template='\"Category\": \"{category}\"'\r\n************* Module test\r\nCategory\": \"convention\r\nCategory\": \"error\r\nCategory\": \"error\r\nCategory\": \"convention\r\nCategory\": \"convention\r\nCategory\": \"error\r\n\r\n$ pylint test.py --msg-template='\"\"Category\": \"{category}\"\"'\r\n************* Module test\r\n\"Category\": \"convention\"\r\n\"Category\": \"error\"\r\n\"Category\": \"error\"\r\n\"Category\": \"convention\"\r\n\"Category\": \"convention\"\r\n\"Category\": \"error\"\r\n```\nCommit that changed the behavior was probably this one: https://github.com/PyCQA/pylint/commit/7c3533ca48e69394391945de1563ef7f639cd27d#diff-76025f0bc82e83cb406321006fbca12c61a10821834a3164620fc17c978f9b7e\r\n\r\nAnd I tested on 2.11.1 that it is working as intended on that version.\nThanks for digging into this !", "created_at": "2022-12-27T18:20:50Z", "version": "2.15", "FAIL_TO_PASS": "[\"tests/reporters/unittest_reporting.py::test_template_option_with_header\"]", "PASS_TO_PASS": "[\"tests/reporters/unittest_reporting.py::test_template_option\", \"tests/reporters/unittest_reporting.py::test_template_option_default\", \"tests/reporters/unittest_reporting.py::test_template_option_end_line\", \"tests/reporters/unittest_reporting.py::test_template_option_non_existing\", \"tests/reporters/unittest_reporting.py::test_deprecation_set_output\", \"tests/reporters/unittest_reporting.py::test_parseable_output_deprecated\", \"tests/reporters/unittest_reporting.py::test_parseable_output_regression\", \"tests/reporters/unittest_reporting.py::test_multi_format_output\", \"tests/reporters/unittest_reporting.py::test_multi_reporter_independant_messages\", \"tests/reporters/unittest_reporting.py::test_display_results_is_renamed\"]", "environment_setup_commit": "e90702074e68e20dc8e5df5013ee3ecf22139c3e"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   pylint/reporters/text.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit e90702074e68e20dc8e5df5013ee3ecf22139c3e\nAuthor: Jacob Walls <jacobtylerwalls@gmail.com>\nDate:   Mon Dec 26 13:16:46 2022 -0500\n\n    Fix `use-sequence-for-iteration` when unpacking a set with `*` (#7975) (#7988)\n    \n    Co-authored-by: Dani Alcala <112832187+clavedeluna@users.noreply.github.com>\n\ndiff --git a/doc/whatsnew/fragments/5788.false_positive b/doc/whatsnew/fragments/5788.false_positive\nnew file mode 100644\nindex 000000000..65fc29fe4\n--- /dev/null\n+++ b/doc/whatsnew/fragments/5788.false_positive\n@@ -0,0 +1,3 @@\n+Fix ``use-sequence-for-iteration`` when unpacking a set with ``*``.\n+\n+Closes #5788\ndiff --git a/pylint/checkers/refactoring/recommendation_checker.py b/pylint/checkers/refactoring/recommendation_checker.py\nindex 7873dc25e..e1634fd8c 100644\n--- a/pylint/checkers/refactoring/recommendation_checker.py\n+++ b/pylint/checkers/refactoring/recommendation_checker.py\n@@ -9,6 +9,7 @@ from astroid import nodes\n \n from pylint import checkers\n from pylint.checkers import utils\n+from pylint.interfaces import HIGH\n \n \n class RecommendationChecker(checkers.BaseChecker):\n@@ -326,9 +327,16 @@ class RecommendationChecker(checkers.BaseChecker):\n     def _check_use_sequence_for_iteration(\n         self, node: nodes.For | nodes.Comprehension\n     ) -> None:\n-        \"\"\"Check if code iterates over an in-place defined set.\"\"\"\n-        if isinstance(node.iter, nodes.Set):\n-            self.add_message(\"use-sequence-for-iteration\", node=node.iter)\n+        \"\"\"Check if code iterates over an in-place defined set.\n+\n+        Sets using `*` are not considered in-place.\n+        \"\"\"\n+        if isinstance(node.iter, nodes.Set) and not any(\n+            utils.has_starred_node_recursive(node)\n+        ):\n+            self.add_message(\n+                \"use-sequence-for-iteration\", node=node.iter, confidence=HIGH\n+            )\n \n     @utils.only_required_for_messages(\"consider-using-f-string\")\n     def visit_const(self, node: nodes.Const) -> None:\ndiff --git a/pylint/checkers/utils.py b/pylint/checkers/utils.py\nindex 90339ad50..da7667f46 100644\n--- a/pylint/checkers/utils.py\n+++ b/pylint/checkers/utils.py\n@@ -1961,6 +1961,20 @@ def find_assigned_names_recursive(\n             yield from find_assigned_names_recursive(elt)\n \n \n+def has_starred_node_recursive(\n+    node: nodes.For | nodes.Comprehension | nodes.Set,\n+) -> Iterator[bool]:\n+    \"\"\"Yield ``True`` if a Starred node is found recursively.\"\"\"\n+    if isinstance(node, nodes.Starred):\n+        yield True\n+    elif isinstance(node, nodes.Set):\n+        for elt in node.elts:\n+            yield from has_starred_node_recursive(elt)\n+    elif isinstance(node, (nodes.For, nodes.Comprehension)):\n+        for elt in node.iter.elts:\n+            yield from has_starred_node_recursive(elt)\n+\n+\n def is_hashable(node: nodes.NodeNG) -> bool:\n     \"\"\"Return whether any inferred value of `node` is hashable.\n \ndiff --git a/tests/functional/ext/code_style/cs_consider_using_tuple.py b/tests/functional/ext/code_style/cs_consider_using_tuple.py\nindex d24396079..57178c34e 100644\n--- a/tests/functional/ext/code_style/cs_consider_using_tuple.py\n+++ b/tests/functional/ext/code_style/cs_consider_using_tuple.py\n@@ -28,4 +28,4 @@ for x in [2, *var]:  # [consider-using-tuple]\n \n # Don't emit warning for sets as this is handled by builtin checker\n (x for x in {1, 2, 3})  # [use-sequence-for-iteration]\n-[x for x in {*var, 2}]  # [use-sequence-for-iteration]\n+[x for x in {*var, 2}]\ndiff --git a/tests/functional/ext/code_style/cs_consider_using_tuple.txt b/tests/functional/ext/code_style/cs_consider_using_tuple.txt\nindex cd8ffb1e7..565f5f778 100644\n--- a/tests/functional/ext/code_style/cs_consider_using_tuple.txt\n+++ b/tests/functional/ext/code_style/cs_consider_using_tuple.txt\n@@ -4,5 +4,4 @@ consider-using-tuple:18:12:18:21::Consider using an in-place tuple instead of li\n consider-using-tuple:21:9:21:15::Consider using an in-place tuple instead of list:UNDEFINED\n consider-using-tuple:23:9:23:18::Consider using an in-place tuple instead of list:UNDEFINED\n consider-using-tuple:26:12:26:21::Consider using an in-place tuple instead of list:UNDEFINED\n-use-sequence-for-iteration:30:12:30:21::Use a sequence type when iterating over values:UNDEFINED\n-use-sequence-for-iteration:31:12:31:21::Use a sequence type when iterating over values:UNDEFINED\n+use-sequence-for-iteration:30:12:30:21::Use a sequence type when iterating over values:HIGH\ndiff --git a/tests/functional/u/use/use_sequence_for_iteration.py b/tests/functional/u/use/use_sequence_for_iteration.py\nindex 2dd1feb18..264e6e7b9 100644\n--- a/tests/functional/u/use/use_sequence_for_iteration.py\n+++ b/tests/functional/u/use/use_sequence_for_iteration.py\n@@ -13,4 +13,16 @@ for x in {1, 2, 3}:  # [use-sequence-for-iteration]\n [x for x in var]\n [x for x in {1, 2, 3}]  # [use-sequence-for-iteration]\n \n-[x for x in {*var, 4}]  # [use-sequence-for-iteration]\n+[x for x in {*var, 4}]\n+\n+def deduplicate(list_in):\n+    for thing in {*list_in}:\n+        print(thing)\n+\n+def deduplicate_two_lists(input1, input2):\n+    for thing in {*input1, *input2}:\n+        print(thing)\n+\n+def deduplicate_nested_sets(input1, input2, input3, input4):\n+    for thing in {{*input1, *input2}, {*input3, *input4}}:\n+        print(thing)\ndiff --git a/tests/functional/u/use/use_sequence_for_iteration.txt b/tests/functional/u/use/use_sequence_for_iteration.txt\nindex beb23a4df..3787b7a0e 100644\n--- a/tests/functional/u/use/use_sequence_for_iteration.txt\n+++ b/tests/functional/u/use/use_sequence_for_iteration.txt\n@@ -1,4 +1,3 @@\n-use-sequence-for-iteration:7:9:7:18::Use a sequence type when iterating over values:UNDEFINED\n-use-sequence-for-iteration:11:12:11:21::Use a sequence type when iterating over values:UNDEFINED\n-use-sequence-for-iteration:14:12:14:21::Use a sequence type when iterating over values:UNDEFINED\n-use-sequence-for-iteration:16:12:16:21::Use a sequence type when iterating over values:UNDEFINED\n+use-sequence-for-iteration:7:9:7:18::Use a sequence type when iterating over values:HIGH\n+use-sequence-for-iteration:11:12:11:21::Use a sequence type when iterating over values:HIGH\n+use-sequence-for-iteration:14:12:14:21::Use a sequence type when iterating over values:HIGH\ndiff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..e8584e3b3 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,7 +175,7 @@ class TextReporter(BaseReporter):\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{(\\w+?)(:.*)?\\}\", template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build wheel: started\n  Getting requirements to build wheel: finished with status 'done'\n  Preparing metadata (pyproject.toml): started\n  Preparing metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: platformdirs>=2.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.9) (4.3.6)\nRequirement already satisfied: astroid<=2.14.0-dev0,>=2.12.13 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.9) (2.12.13)\nRequirement already satisfied: isort<6,>=4.2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.9) (5.10.1)\nRequirement already satisfied: mccabe<0.8,>=0.6 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.9) (0.7.0)\nRequirement already satisfied: tomlkit>=0.10.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.9) (0.13.2)\nRequirement already satisfied: typing-extensions>=3.10.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.9) (4.12.2)\nRequirement already satisfied: dill>=0.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.9) (0.3.9)\nRequirement already satisfied: tomli>=1.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.15.9) (2.0.2)\nRequirement already satisfied: lazy-object-proxy>=1.4.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astroid<=2.14.0-dev0,>=2.12.13->pylint==2.15.9) (1.10.0)\nRequirement already satisfied: wrapt<2,>=1.11 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astroid<=2.14.0-dev0,>=2.12.13->pylint==2.15.9) (1.16.0)\nInstalling collected packages: pylint\n  Attempting uninstall: pylint\n    Found existing installation: pylint 2.15.9\n    Uninstalling pylint-2.15.9:\n      Successfully uninstalled pylint-2.15.9\n  Running setup.py develop for pylint\nSuccessfully installed pylint\n============================= test session starts ==============================\nplatform linux -- Python 3.9.20, pytest-7.4.4, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /testbed\nconfigfile: setup.cfg\nplugins: timeout-2.3.1, profiling-1.7.0, forked-1.6.0, cov-3.0.0, benchmark-4.0.0, xdist-2.5.0\ncollected 11 items\n\ntests/reporters/unittest_reporting.py ...........                        [100%]\n\n==================================== PASSES ====================================\n=========================== short test summary info ============================\nPASSED tests/reporters/unittest_reporting.py::test_template_option\nPASSED tests/reporters/unittest_reporting.py::test_template_option_default\nPASSED tests/reporters/unittest_reporting.py::test_template_option_end_line\nPASSED tests/reporters/unittest_reporting.py::test_template_option_non_existing\nPASSED tests/reporters/unittest_reporting.py::test_template_option_with_header\nPASSED tests/reporters/unittest_reporting.py::test_deprecation_set_output\nPASSED tests/reporters/unittest_reporting.py::test_parseable_output_deprecated\nPASSED tests/reporters/unittest_reporting.py::test_parseable_output_regression\nPASSED tests/reporters/unittest_reporting.py::test_multi_format_output\nPASSED tests/reporters/unittest_reporting.py::test_multi_reporter_independant_messages\nPASSED tests/reporters/unittest_reporting.py::test_display_results_is_renamed\n============================== 11 passed in 0.19s ==============================\n", {"tests/reporters/unittest_reporting.py::test_template_option": "PASSED", "tests/reporters/unittest_reporting.py::test_template_option_default": "PASSED", "tests/reporters/unittest_reporting.py::test_template_option_end_line": "PASSED", "tests/reporters/unittest_reporting.py::test_template_option_non_existing": "PASSED", "tests/reporters/unittest_reporting.py::test_template_option_with_header": "PASSED", "tests/reporters/unittest_reporting.py::test_deprecation_set_output": "PASSED", "tests/reporters/unittest_reporting.py::test_parseable_output_deprecated": "PASSED", "tests/reporters/unittest_reporting.py::test_parseable_output_regression": "PASSED", "tests/reporters/unittest_reporting.py::test_multi_format_output": "PASSED", "tests/reporters/unittest_reporting.py::test_multi_reporter_independant_messages": "PASSED", "tests/reporters/unittest_reporting.py::test_display_results_is_renamed": "PASSED"}]