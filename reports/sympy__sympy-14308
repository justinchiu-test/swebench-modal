[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-14308", "base_commit": "fb536869fb7aa28b2695ad7a3b70949926b291c4", "patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -931,26 +931,49 @@ def _print_BasisDependent(self, expr):\n         #Fixing the newlines\n         lengths = []\n         strs = ['']\n+        flag = []\n         for i, partstr in enumerate(o1):\n+            flag.append(0)\n             # XXX: What is this hack?\n             if '\\n' in partstr:\n                 tempstr = partstr\n                 tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n-                                          + ' ' + vectstrs[i])\n+                if u'\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction\n+                    for paren in range(len(tempstr)):\n+                        flag[i] = 1\n+                        if tempstr[paren] == u'\\N{right parenthesis extension}':\n+                            tempstr = tempstr[:paren] + u'\\N{right parenthesis extension}'\\\n+                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]\n+                            break\n+                elif u'\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:\n+                    flag[i] = 1\n+                    tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS LOWER HOOK}',\n+                                        u'\\N{RIGHT PARENTHESIS LOWER HOOK}'\n+                                        + ' ' + vectstrs[i])\n+                else:\n+                    tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n+                                        u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n+                                        + ' ' + vectstrs[i])\n                 o1[i] = tempstr\n+\n         o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n+        n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form\n+\n+        if 1 in flag:                           # If there was a fractional scalar\n+            for i, parts in enumerate(o1):\n+                if len(parts) == 1:             # If part has no newline\n+                    parts.insert(0, ' ' * (len(parts[0])))\n+                    flag[i] = 1\n+\n+        for i, parts in enumerate(o1):\n+            lengths.append(len(parts[flag[i]]))\n             for j in range(n_newlines):\n                 if j+1 <= len(parts):\n                     if j >= len(strs):\n                         strs.append(' ' * (sum(lengths[:-1]) +\n                                            3*(len(lengths)-1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n+                    if j == flag[i]:\n+                        strs[flag[i]] += parts[flag[i]] + ' + '\n                     else:\n                         strs[j] += parts[j] + ' '*(lengths[-1] -\n                                                    len(parts[j])+\n", "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6089,6 +6089,28 @@ def test_MatrixElement_printing():\n     assert upretty(F) == ucode_str1\n \n \n+def test_issue_12675():\n+    from sympy.vector import CoordSys3D\n+    x, y, t, j = symbols('x y t j')\n+    e = CoordSys3D('e')\n+\n+    ucode_str = \\\n+u(\"\"\"\\\n+\u239b   t\u239e    \\n\\\n+\u239c\u239bx\u239e \u239f e_j\\n\\\n+\u239c\u239c\u2500\u239f \u239f    \\n\\\n+\u239d\u239dy\u23a0 \u23a0    \\\n+\"\"\")\n+    assert upretty((x/y)**t*e.j) == ucode_str\n+    ucode_str = \\\n+u(\"\"\"\\\n+\u239b1\u239e    \\n\\\n+\u239c\u2500\u239f e_j\\n\\\n+\u239dy\u23a0    \\\n+\"\"\")\n+    assert upretty((1/y)*e.j) == ucode_str\n+\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\ndiff --git a/sympy/vector/tests/test_printing.py b/sympy/vector/tests/test_printing.py\n--- a/sympy/vector/tests/test_printing.py\n+++ b/sympy/vector/tests/test_printing.py\n@@ -37,8 +37,8 @@ def upretty(expr):\n v.append(N.j - (Integral(f(b)) - C.x**2)*N.k)\n upretty_v_8 = u(\n \"\"\"\\\n-N_j + \u239b   2   \u2320        \u239e N_k\\n\\\n-      \u239cC_x  - \u23ae f(b) db\u239f    \\n\\\n+      \u239b   2   \u2320        \u239e    \\n\\\n+N_j + \u239cC_x  - \u23ae f(b) db\u239f N_k\\n\\\n       \u239d       \u2321        \u23a0    \\\n \"\"\")\n pretty_v_8 = u(\n@@ -55,9 +55,9 @@ def upretty(expr):\n v.append((a**2 + b)*N.i + (Integral(f(b)))*N.k)\n upretty_v_11 = u(\n \"\"\"\\\n-\u239b 2    \u239e N_i + \u239b\u2320        \u239e N_k\\n\\\n-\u239da  + b\u23a0       \u239c\u23ae f(b) db\u239f    \\n\\\n-               \u239d\u2321        \u23a0    \\\n+\u239b 2    \u239e        \u239b\u2320        \u239e    \\n\\\n+\u239da  + b\u23a0 N_i  + \u239c\u23ae f(b) db\u239f N_k\\n\\\n+                \u239d\u2321        \u23a0    \\\n \"\"\")\n pretty_v_11 = u(\n \"\"\"\\\n@@ -85,8 +85,8 @@ def upretty(expr):\n # This is the pretty form for ((a**2 + b)*N.i + 3*(C.y - c)*N.k) | N.k\n upretty_d_7 = u(\n \"\"\"\\\n-\u239b 2    \u239e (N_i|N_k) + (3\u22c5C_y - 3\u22c5c) (N_k|N_k)\\n\\\n-\u239da  + b\u23a0                                    \\\n+\u239b 2    \u239e                                     \\n\\\n+\u239da  + b\u23a0 (N_i|N_k)  + (3\u22c5C_y - 3\u22c5c) (N_k|N_k)\\\n \"\"\")\n pretty_d_7 = u(\n \"\"\"\\\n", "problem_statement": "vectors break pretty printing\n```py\r\nIn [1]: from sympy.vector import *\r\n\r\nIn [2]: e = CoordSysCartesian('e')\r\n\r\nIn [3]: (x/y)**t*e.j\r\nOut[3]:\r\n\u239b   t\u239e e_j\r\n\u239c\u239bx\u239e e_j \u239f\r\n\u239c\u239c\u2500\u239f \u239f\r\n\u239d\u239dy\u23a0 \u23a0\r\n```\r\n\r\nAlso, when it does print correctly, the baseline is wrong (it should be centered). \n", "hints_text": "Hi @asmeurer . I would like to work on this issue . Could you help me with the same ? ", "created_at": "2018-02-22T16:54:06Z", "version": "1.1", "FAIL_TO_PASS": "[\"test_issue_12675\", \"test_pretty_print_unicode\"]", "PASS_TO_PASS": "[\"test_pretty_ascii_str\", \"test_pretty_unicode_str\", \"test_upretty_greek\", \"test_upretty_multiindex\", \"test_upretty_sub_super\", \"test_upretty_subs_missing_in_24\", \"test_upretty_modifiers\", \"test_pretty_Cycle\", \"test_pretty_basic\", \"test_negative_fractions\", \"test_issue_5524\", \"test_pretty_ordering\", \"test_EulerGamma\", \"test_GoldenRatio\", \"test_pretty_relational\", \"test_Assignment\", \"test_AugmentedAssignment\", \"test_issue_7117\", \"test_pretty_rational\", \"test_pretty_functions\", \"test_pretty_sqrt\", \"test_pretty_sqrt_char_knob\", \"test_pretty_sqrt_longsymbol_no_sqrt_char\", \"test_pretty_KroneckerDelta\", \"test_pretty_product\", \"test_pretty_lambda\", \"test_pretty_order\", \"test_pretty_derivatives\", \"test_pretty_integrals\", \"test_pretty_matrix\", \"test_pretty_ndim_arrays\", \"test_tensor_TensorProduct\", \"test_diffgeom_print_WedgeProduct\", \"test_Adjoint\", \"test_pretty_Trace_issue_9044\", \"test_MatrixExpressions\", \"test_pretty_dotproduct\", \"test_pretty_piecewise\", \"test_pretty_ITE\", \"test_pretty_seq\", \"test_any_object_in_sequence\", \"test_print_builtin_set\", \"test_pretty_sets\", \"test_pretty_SetExpr\", \"test_pretty_ImageSet\", \"test_pretty_ConditionSet\", \"test_pretty_ComplexRegion\", \"test_pretty_Union_issue_10414\", \"test_pretty_Intersection_issue_10414\", \"test_ProductSet_paranthesis\", \"test_ProductSet_prod_char_issue_10413\", \"test_pretty_sequences\", \"test_pretty_FourierSeries\", \"test_pretty_FormalPowerSeries\", \"test_pretty_limits\", \"test_pretty_ComplexRootOf\", \"test_pretty_RootSum\", \"test_GroebnerBasis\", \"test_pretty_Boolean\", \"test_pretty_Domain\", \"test_pretty_prec\", \"test_pprint\", \"test_pretty_class\", \"test_pretty_no_wrap_line\", \"test_settings\", \"test_pretty_sum\", \"test_units\", \"test_pretty_Subs\", \"test_gammas\", \"test_beta\", \"test_function_subclass_different_name\", \"test_SingularityFunction\", \"test_deltas\", \"test_hyper\", \"test_meijerg\", \"test_noncommutative\", \"test_pretty_special_functions\", \"test_expint\", \"test_elliptic_functions\", \"test_RandomDomain\", \"test_PrettyPoly\", \"test_issue_6285\", \"test_issue_6359\", \"test_issue_6739\", \"test_complicated_symbol_unchanged\", \"test_categories\", \"test_PrettyModules\", \"test_QuotientRing\", \"test_Homomorphism\", \"test_Tr\", \"test_pretty_Add\", \"test_issue_7179\", \"test_issue_7180\", \"test_pretty_Complement\", \"test_pretty_SymmetricDifference\", \"test_pretty_Contains\", \"test_issue_4335\", \"test_issue_6324\", \"test_issue_7927\", \"test_issue_6134\", \"test_issue_9877\", \"test_issue_13651\", \"test_pretty_primenu\", \"test_pretty_primeomega\", \"test_pretty_Mod\", \"test_issue_11801\", \"test_pretty_UnevaluatedExpr\", \"test_issue_10472\", \"test_MatrixElement_printing\", \"test_MatrixSymbol_printing\", \"test_degree_printing\", \"test_str_printing\", \"test_latex_printing\"]", "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   sympy/printing/pretty/pretty.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit fb536869fb7aa28b2695ad7a3b70949926b291c4\nMerge: bdae8a86f8 61251e932b\nAuthor: Leonid Kovalev <leonidvkovalev@gmail.com>\nDate:   Thu Feb 22 18:00:59 2018 -0500\n\n    Merge pull request #14278 from sidhantnagpal/base-complex-power\n    \n    Abs of base raised to exponent for complex non-symbol bases\n\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 09e2b00735..9b8cd4a872 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -931,26 +931,49 @@ def _print_BasisDependent(self, expr):\n         #Fixing the newlines\n         lengths = []\n         strs = ['']\n+        flag = []\n         for i, partstr in enumerate(o1):\n+            flag.append(0)\n             # XXX: What is this hack?\n             if '\\n' in partstr:\n                 tempstr = partstr\n                 tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n-                                          + ' ' + vectstrs[i])\n+                if u'\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction\n+                    for paren in range(len(tempstr)):\n+                        flag[i] = 1\n+                        if tempstr[paren] == u'\\N{right parenthesis extension}':\n+                            tempstr = tempstr[:paren] + u'\\N{right parenthesis extension}'\\\n+                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]\n+                            break\n+                elif u'\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:\n+                    flag[i] = 1\n+                    tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS LOWER HOOK}',\n+                                        u'\\N{RIGHT PARENTHESIS LOWER HOOK}'\n+                                        + ' ' + vectstrs[i])\n+                else:\n+                    tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n+                                        u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n+                                        + ' ' + vectstrs[i])\n                 o1[i] = tempstr\n+\n         o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n+        n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form\n+\n+        if 1 in flag:                           # If there was a fractional scalar\n+            for i, parts in enumerate(o1):\n+                if len(parts) == 1:             # If part has no newline\n+                    parts.insert(0, ' ' * (len(parts[0])))\n+                    flag[i] = 1\n+\n+        for i, parts in enumerate(o1):\n+            lengths.append(len(parts[flag[i]]))\n             for j in range(n_newlines):\n                 if j+1 <= len(parts):\n                     if j >= len(strs):\n                         strs.append(' ' * (sum(lengths[:-1]) +\n                                            3*(len(lengths)-1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n+                    if j == flag[i]:\n+                        strs[flag[i]] += parts[flag[i]] + ' + '\n                     else:\n                         strs[j] += parts[j] + ' '*(lengths[-1] -\n                                                    len(parts[j])+\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)\nInstalling collected packages: sympy\n  Attempting uninstall: sympy\n    Found existing installation: sympy 1.1.2.dev0\n    Uninstalling sympy-1.1.2.dev0:\n      Successfully uninstalled sympy-1.1.2.dev0\n  Running setup.py develop for sympy\nSuccessfully installed sympy\n============================= test process starts ==============================\nexecutable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]\narchitecture:       64-bit\ncache:              no\nground types:       python \nnumpy:              None\nrandom seed:        22166976\nhash randomization: off\n\nsympy/printing/pretty/tests/test_pretty.py[117] \ntest_pretty_ascii_str ok\ntest_pretty_unicode_str ok\ntest_upretty_greek ok\ntest_upretty_multiindex ok\ntest_upretty_sub_super ok\ntest_upretty_subs_missing_in_24 ok\ntest_missing_in_2X_issue_9047 X\ntest_upretty_modifiers ok\ntest_pretty_Cycle ok\ntest_pretty_basic ok\ntest_negative_fractions ok\ntest_issue_5524 ok\ntest_pretty_ordering ok\ntest_EulerGamma ok\ntest_GoldenRatio ok\ntest_pretty_relational ok\ntest_Assignment ok\ntest_AugmentedAssignment ok\ntest_issue_7117 ok\ntest_pretty_rational ok\ntest_pretty_functions ok\ntest_pretty_sqrt ok\ntest_pretty_sqrt_char_knob ok\ntest_pretty_sqrt_longsymbol_no_sqrt_char ok\ntest_pretty_KroneckerDelta ok\ntest_pretty_product ok\ntest_pretty_lambda ok\ntest_pretty_order ok\ntest_pretty_derivatives ok\ntest_pretty_integrals ok\ntest_pretty_matrix ok\ntest_pretty_ndim_arrays ok\ntest_tensor_TensorProduct ok\ntest_diffgeom_print_WedgeProduct ok\ntest_Adjoint ok\ntest_pretty_Trace_issue_9044 ok\ntest_MatrixExpressions ok\ntest_pretty_dotproduct ok\ntest_pretty_piecewise ok\ntest_pretty_ITE ok\ntest_pretty_seq ok\ntest_any_object_in_sequence ok\ntest_print_builtin_set ok\ntest_pretty_sets ok\ntest_pretty_SetExpr ok\ntest_pretty_ImageSet ok\ntest_pretty_ConditionSet ok\ntest_pretty_ComplexRegion ok\ntest_pretty_Union_issue_10414 ok\ntest_pretty_Intersection_issue_10414 ok\ntest_ProductSet_paranthesis ok\ntest_ProductSet_prod_char_issue_10413 ok\ntest_pretty_sequences ok\ntest_pretty_FourierSeries ok\ntest_pretty_FormalPowerSeries ok\ntest_pretty_limits ok\ntest_pretty_ComplexRootOf ok\ntest_pretty_RootSum ok\ntest_GroebnerBasis ok\ntest_pretty_Boolean ok\ntest_pretty_Domain ok\ntest_pretty_prec ok\ntest_pprint ok\ntest_pretty_class ok\ntest_pretty_no_wrap_line ok\ntest_settings ok\ntest_pretty_sum ok\ntest_units ok\ntest_pretty_Subs ok\ntest_gammas ok\ntest_beta ok\ntest_function_subclass_different_name ok\ntest_SingularityFunction ok\ntest_deltas ok\ntest_hyper ok\ntest_meijerg ok\ntest_noncommutative ok\ntest_pretty_special_functions ok\ntest_pretty_geometry E\ntest_expint ok\ntest_elliptic_functions ok\ntest_RandomDomain ok\ntest_PrettyPoly ok\ntest_issue_6285 ok\ntest_issue_6359 ok\ntest_issue_6739 ok\ntest_complicated_symbol_unchanged ok\ntest_categories ok\ntest_PrettyModules ok\ntest_QuotientRing ok\ntest_Homomorphism ok\ntest_Tr ok\ntest_pretty_Add ok\ntest_issue_7179 ok\ntest_issue_7180 ok\ntest_pretty_Complement ok\ntest_pretty_SymmetricDifference ok\ntest_pretty_Contains ok\ntest_issue_8292 E\ntest_issue_4335 ok\ntest_issue_8344 E\ntest_issue_6324 ok\ntest_issue_7927 ok\ntest_issue_6134 ok\ntest_issue_9877 ok\ntest_issue_13651 ok\ntest_pretty_primenu ok\ntest_pretty_primeomega ok\ntest_pretty_Mod ok\ntest_issue_11801 ok\ntest_pretty_UnevaluatedExpr ok\ntest_issue_10472 ok\ntest_MatrixElement_printing ok\ntest_issue_12675 ok\ntest_MatrixSymbol_printing ok\ntest_degree_printing ok\ntest_vector_expr_pretty_printing ok                                       [FAIL]\n\nsympy/vector/tests/test_printing.py[5] \ntest_str_printing ok\ntest_pretty_printing_ascii f\ntest_pretty_print_unicode ok\ntest_latex_printing ok\ntest_custom_names ok                                                        [OK]\n\n\n________________________________ xpassed tests _________________________________\nsympy/printing/pretty/tests/test_pretty.py: test_missing_in_2X_issue_9047\n\n________________________________________________________________________________\n_______ sympy/printing/pretty/tests/test_pretty.py:test_pretty_geometry ________\n  File \"/testbed/sympy/printing/pretty/tests/test_pretty.py\", line 5285, in test_pretty_geometry\n    e = Ray((1, 1), angle=4.02*pi)\n  File \"/testbed/sympy/geometry/line.py\", line 1275, in __new__\n    return Ray2D(p1, p2, **kwargs)\n  File \"/testbed/sympy/geometry/line.py\", line 2108, in __new__\n    p2 = p1 + Point(x, y)\n  File \"/testbed/sympy/geometry/point.py\", line 224, in __add__\n    coords = [simplify(a + b) for a, b in zip(s, o)]\n  File \"/testbed/sympy/geometry/point.py\", line 224, in <listcomp>\n    coords = [simplify(a + b) for a, b in zip(s, o)]\n  File \"/testbed/sympy/simplify/simplify.py\", line 600, in simplify\n    short = exptrigsimp(short)\n  File \"/testbed/sympy/simplify/trigsimp.py\", line 542, in exptrigsimp\n    newexpr = bottom_up(expr, exp_trig)\n  File \"/testbed/sympy/simplify/simplify.py\", line 1044, in bottom_up\n    args = tuple([bottom_up(a, F, atoms, nonbasic)\n  File \"/testbed/sympy/simplify/simplify.py\", line 1044, in <listcomp>\n    args = tuple([bottom_up(a, F, atoms, nonbasic)\n  File \"/testbed/sympy/simplify/simplify.py\", line 1048, in bottom_up\n    rv = F(rv)\n  File \"/testbed/sympy/simplify/trigsimp.py\", line 539, in exp_trig\n    choices.append(e.rewrite(exp))\n  File \"/testbed/sympy/core/basic.py\", line 1670, in rewrite\n    return self._eval_rewrite(None, rule, **hints)\n  File \"/testbed/sympy/core/basic.py\", line 1578, in _eval_rewrite\n    rewritten = getattr(self, rule)(*args)\n  File \"/testbed/sympy/functions/elementary/trigonometric.py\", line 1138, in _eval_rewrite_as_exp\n    neg_exp, pos_exp = exp(-arg*I), exp(arg*I)\n  File \"/testbed/sympy/core/function.py\", line 441, in __new__\n    result = super(Function, cls).__new__(cls, *args, **options)\n  File \"/testbed/sympy/core/function.py\", line 250, in __new__\n    evaluated = cls.eval(*args)\n  File \"/testbed/sympy/functions/elementary/exponential.py\", line 254, in eval\n    if ask(Q.integer(2*coeff)):\n  File \"/testbed/sympy/assumptions/ask.py\", line 1247, in ask\n    from sympy.assumptions.satask import satask\n  File \"/testbed/sympy/assumptions/satask.py\", line 9, in <module>\n    from sympy.assumptions.sathandlers import fact_registry\n  File \"/testbed/sympy/assumptions/sathandlers.py\", line 3, in <module>\n    from collections import MutableMapping, defaultdict\n  File \"<frozen importlib._bootstrap>\", line 1055, in _handle_fromlist\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n__________ sympy/printing/pretty/tests/test_pretty.py:test_issue_8292 __________\n  File \"/testbed/sympy/printing/pretty/tests/test_pretty.py\", line 5835, in test_issue_8292\n    e = sympify('((x+x**4)/(x-1))-(2*(x-1)**4/(x-1)**4)', evaluate=False)\n  File \"/testbed/sympy/core/sympify.py\", line 368, in sympify\n    expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n  File \"/testbed/sympy/parsing/sympy_parser.py\", line 948, in parse_expr\n    code = compile(evaluateFalse(code), '<string>', 'eval')\nValueError: Name node can't be used with 'False' constant\n________________________________________________________________________________\n__________ sympy/printing/pretty/tests/test_pretty.py:test_issue_8344 __________\n  File \"/testbed/sympy/printing/pretty/tests/test_pretty.py\", line 5876, in test_issue_8344\n    e = sympify('2*x*y**2/1**2 + 1', evaluate=False)\n  File \"/testbed/sympy/core/sympify.py\", line 368, in sympify\n    expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n  File \"/testbed/sympy/parsing/sympy_parser.py\", line 948, in parse_expr\n    code = compile(evaluateFalse(code), '<string>', 'eval')\nValueError: Name node can't be used with 'False' constant\n\n tests finished: 117 passed, 1 expected to fail, 1 expected to fail but passed, \n3 exceptions, in 9.26 seconds \nDO *NOT* COMMIT!\n", {"sympy/printing/pretty/tests/test_pretty.py:test_pretty_geometry": "FAILED", "sympy/printing/pretty/tests/test_pretty.py:test_issue_8292": "FAILED", "sympy/printing/pretty/tests/test_pretty.py:test_issue_8344": "FAILED", "test_pretty_ascii_str": "PASSED", "test_pretty_unicode_str": "PASSED", "test_upretty_greek": "PASSED", "test_upretty_multiindex": "PASSED", "test_upretty_sub_super": "PASSED", "test_upretty_subs_missing_in_24": "PASSED", "test_upretty_modifiers": "PASSED", "test_pretty_Cycle": "PASSED", "test_pretty_basic": "PASSED", "test_negative_fractions": "PASSED", "test_issue_5524": "PASSED", "test_pretty_ordering": "PASSED", "test_EulerGamma": "PASSED", "test_GoldenRatio": "PASSED", "test_pretty_relational": "PASSED", "test_Assignment": "PASSED", "test_AugmentedAssignment": "PASSED", "test_issue_7117": "PASSED", "test_pretty_rational": "PASSED", "test_pretty_functions": "PASSED", "test_pretty_sqrt": "PASSED", "test_pretty_sqrt_char_knob": "PASSED", "test_pretty_sqrt_longsymbol_no_sqrt_char": "PASSED", "test_pretty_KroneckerDelta": "PASSED", "test_pretty_product": "PASSED", "test_pretty_lambda": "PASSED", "test_pretty_order": "PASSED", "test_pretty_derivatives": "PASSED", "test_pretty_integrals": "PASSED", "test_pretty_matrix": "PASSED", "test_pretty_ndim_arrays": "PASSED", "test_tensor_TensorProduct": "PASSED", "test_diffgeom_print_WedgeProduct": "PASSED", "test_Adjoint": "PASSED", "test_pretty_Trace_issue_9044": "PASSED", "test_MatrixExpressions": "PASSED", "test_pretty_dotproduct": "PASSED", "test_pretty_piecewise": "PASSED", "test_pretty_ITE": "PASSED", "test_pretty_seq": "PASSED", "test_any_object_in_sequence": "PASSED", "test_print_builtin_set": "PASSED", "test_pretty_sets": "PASSED", "test_pretty_SetExpr": "PASSED", "test_pretty_ImageSet": "PASSED", "test_pretty_ConditionSet": "PASSED", "test_pretty_ComplexRegion": "PASSED", "test_pretty_Union_issue_10414": "PASSED", "test_pretty_Intersection_issue_10414": "PASSED", "test_ProductSet_paranthesis": "PASSED", "test_ProductSet_prod_char_issue_10413": "PASSED", "test_pretty_sequences": "PASSED", "test_pretty_FourierSeries": "PASSED", "test_pretty_FormalPowerSeries": "PASSED", "test_pretty_limits": "PASSED", "test_pretty_ComplexRootOf": "PASSED", "test_pretty_RootSum": "PASSED", "test_GroebnerBasis": "PASSED", "test_pretty_Boolean": "PASSED", "test_pretty_Domain": "PASSED", "test_pretty_prec": "PASSED", "test_pprint": "PASSED", "test_pretty_class": "PASSED", "test_pretty_no_wrap_line": "PASSED", "test_settings": "PASSED", "test_pretty_sum": "PASSED", "test_units": "PASSED", "test_pretty_Subs": "PASSED", "test_gammas": "PASSED", "test_beta": "PASSED", "test_function_subclass_different_name": "PASSED", "test_SingularityFunction": "PASSED", "test_deltas": "PASSED", "test_hyper": "PASSED", "test_meijerg": "PASSED", "test_noncommutative": "PASSED", "test_pretty_special_functions": "PASSED", "test_pretty_geometry": "ERROR", "test_expint": "PASSED", "test_elliptic_functions": "PASSED", "test_RandomDomain": "PASSED", "test_PrettyPoly": "PASSED", "test_issue_6285": "PASSED", "test_issue_6359": "PASSED", "test_issue_6739": "PASSED", "test_complicated_symbol_unchanged": "PASSED", "test_categories": "PASSED", "test_PrettyModules": "PASSED", "test_QuotientRing": "PASSED", "test_Homomorphism": "PASSED", "test_Tr": "PASSED", "test_pretty_Add": "PASSED", "test_issue_7179": "PASSED", "test_issue_7180": "PASSED", "test_pretty_Complement": "PASSED", "test_pretty_SymmetricDifference": "PASSED", "test_pretty_Contains": "PASSED", "test_issue_8292": "ERROR", "test_issue_4335": "PASSED", "test_issue_8344": "ERROR", "test_issue_6324": "PASSED", "test_issue_7927": "PASSED", "test_issue_6134": "PASSED", "test_issue_9877": "PASSED", "test_issue_13651": "PASSED", "test_pretty_primenu": "PASSED", "test_pretty_primeomega": "PASSED", "test_pretty_Mod": "PASSED", "test_issue_11801": "PASSED", "test_pretty_UnevaluatedExpr": "PASSED", "test_issue_10472": "PASSED", "test_MatrixElement_printing": "PASSED", "test_issue_12675": "PASSED", "test_MatrixSymbol_printing": "PASSED", "test_degree_printing": "PASSED", "test_str_printing": "PASSED", "test_pretty_print_unicode": "PASSED", "test_latex_printing": "PASSED"}]