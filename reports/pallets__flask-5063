[{"repo": "pallets/flask", "instance_id": "pallets__flask-5063", "base_commit": "182ce3dd15dfa3537391c3efaf9c3ff407d134d4", "patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -9,7 +9,7 @@\n import traceback\n import typing as t\n from functools import update_wrapper\n-from operator import attrgetter\n+from operator import itemgetter\n \n import click\n from click.core import ParameterSource\n@@ -989,49 +989,62 @@ def shell_command() -> None:\n @click.option(\n     \"--sort\",\n     \"-s\",\n-    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\")),\n+    type=click.Choice((\"endpoint\", \"methods\", \"domain\", \"rule\", \"match\")),\n     default=\"endpoint\",\n     help=(\n-        'Method to sort routes by. \"match\" is the order that Flask will match '\n-        \"routes when dispatching a request.\"\n+        \"Method to sort routes by. 'match' is the order that Flask will match routes\"\n+        \" when dispatching a request.\"\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n @with_appcontext\n def routes_command(sort: str, all_methods: bool) -> None:\n     \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n-\n     rules = list(current_app.url_map.iter_rules())\n+\n     if not rules:\n         click.echo(\"No routes were registered.\")\n         return\n \n-    ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))\n+    ignored_methods = set() if all_methods else {\"HEAD\", \"OPTIONS\"}\n+    host_matching = current_app.url_map.host_matching\n+    has_domain = any(rule.host if host_matching else rule.subdomain for rule in rules)\n+    rows = []\n \n-    if sort in (\"endpoint\", \"rule\"):\n-        rules = sorted(rules, key=attrgetter(sort))\n-    elif sort == \"methods\":\n-        rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n+    for rule in rules:\n+        row = [\n+            rule.endpoint,\n+            \", \".join(sorted((rule.methods or set()) - ignored_methods)),\n+        ]\n \n-    rule_methods = [\n-        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n-        for rule in rules\n-    ]\n+        if has_domain:\n+            row.append((rule.host if host_matching else rule.subdomain) or \"\")\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n-    widths = (\n-        max(len(rule.endpoint) for rule in rules),\n-        max(len(methods) for methods in rule_methods),\n-        max(len(rule.rule) for rule in rules),\n-    )\n-    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+        row.append(rule.rule)\n+        rows.append(row)\n+\n+    headers = [\"Endpoint\", \"Methods\"]\n+    sorts = [\"endpoint\", \"methods\"]\n+\n+    if has_domain:\n+        headers.append(\"Host\" if host_matching else \"Subdomain\")\n+        sorts.append(\"domain\")\n+\n+    headers.append(\"Rule\")\n+    sorts.append(\"rule\")\n+\n+    try:\n+        rows.sort(key=itemgetter(sorts.index(sort)))\n+    except ValueError:\n+        pass\n \n-    click.echo(row.format(*headers).strip())\n-    click.echo(row.format(*(\"-\" * width for width in widths)))\n+    rows.insert(0, headers)\n+    widths = [max(len(row[i]) for row in rows) for i in range(len(headers))]\n+    rows.insert(1, [\"-\" * w for w in widths])\n+    template = \"  \".join(f\"{{{i}:<{w}}}\" for i, w in enumerate(widths))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for row in rows:\n+        click.echo(template.format(*row))\n \n \n cli = FlaskGroup(\n", "test_patch": "diff --git a/tests/test_cli.py b/tests/test_cli.py\n--- a/tests/test_cli.py\n+++ b/tests/test_cli.py\n@@ -433,16 +433,12 @@ class TestRoutes:\n     @pytest.fixture\n     def app(self):\n         app = Flask(__name__)\n-        app.testing = True\n-\n-        @app.route(\"/get_post/<int:x>/<int:y>\", methods=[\"GET\", \"POST\"])\n-        def yyy_get_post(x, y):\n-            pass\n-\n-        @app.route(\"/zzz_post\", methods=[\"POST\"])\n-        def aaa_post():\n-            pass\n-\n+        app.add_url_rule(\n+            \"/get_post/<int:x>/<int:y>\",\n+            methods=[\"GET\", \"POST\"],\n+            endpoint=\"yyy_get_post\",\n+        )\n+        app.add_url_rule(\"/zzz_post\", methods=[\"POST\"], endpoint=\"aaa_post\")\n         return app\n \n     @pytest.fixture\n@@ -450,17 +446,6 @@ def invoke(self, app, runner):\n         cli = FlaskGroup(create_app=lambda: app)\n         return partial(runner.invoke, cli)\n \n-    @pytest.fixture\n-    def invoke_no_routes(self, runner):\n-        def create_app():\n-            app = Flask(__name__, static_folder=None)\n-            app.testing = True\n-\n-            return app\n-\n-        cli = FlaskGroup(create_app=create_app)\n-        return partial(runner.invoke, cli)\n-\n     def expect_order(self, order, output):\n         # skip the header and match the start of each row\n         for expect, line in zip(order, output.splitlines()[2:]):\n@@ -493,11 +478,31 @@ def test_all_methods(self, invoke):\n         output = invoke([\"routes\", \"--all-methods\"]).output\n         assert \"GET, HEAD, OPTIONS, POST\" in output\n \n-    def test_no_routes(self, invoke_no_routes):\n-        result = invoke_no_routes([\"routes\"])\n+    def test_no_routes(self, runner):\n+        app = Flask(__name__, static_folder=None)\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n         assert result.exit_code == 0\n         assert \"No routes were registered.\" in result.output\n \n+    def test_subdomain(self, runner):\n+        app = Flask(__name__, static_folder=None)\n+        app.add_url_rule(\"/a\", subdomain=\"a\", endpoint=\"a\")\n+        app.add_url_rule(\"/b\", subdomain=\"b\", endpoint=\"b\")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n+        assert result.exit_code == 0\n+        assert \"Subdomain\" in result.output\n+\n+    def test_host(self, runner):\n+        app = Flask(__name__, static_folder=None, host_matching=True)\n+        app.add_url_rule(\"/a\", host=\"a\", endpoint=\"a\")\n+        app.add_url_rule(\"/b\", host=\"b\", endpoint=\"b\")\n+        cli = FlaskGroup(create_app=lambda: app)\n+        result = runner.invoke(cli, [\"routes\"])\n+        assert result.exit_code == 0\n+        assert \"Host\" in result.output\n+\n \n def dotenv_not_available():\n     try:\n", "problem_statement": "Flask routes to return domain/sub-domains information\nCurrently when checking **flask routes** it provides all routes but **it is no way to see which routes are assigned to which subdomain**.\r\n\r\n**Default server name:**\r\nSERVER_NAME: 'test.local'\r\n\r\n**Domains (sub-domains):**\r\ntest.test.local\r\nadmin.test.local\r\ntest.local\r\n\r\n**Adding blueprints:**\r\napp.register_blueprint(admin_blueprint,url_prefix='',subdomain='admin')\r\napp.register_blueprint(test_subdomain_blueprint,url_prefix='',subdomain='test')\r\n\r\n\r\n```\r\n$ flask routes\r\n * Tip: There are .env or .flaskenv files present. Do \"pip install python-dotenv\" to use them.\r\nEndpoint                                                 Methods    Rule\r\n-------------------------------------------------------  ---------  ------------------------------------------------\r\nadmin_blueprint.home                                      GET        /home\r\ntest_subdomain_blueprint.home                             GET        /home\r\nstatic                                                    GET        /static/<path:filename>\r\n...\r\n```\r\n\r\n\r\n**Feature request**\r\nIt will be good to see something like below (that will make more clear which route for which subdomain, because now need to go and check configuration).\r\n**If it is not possible to fix routes**, can you add or tell which method(s) should be used to get below information from flask? \r\n\r\n```\r\n$ flask routes\r\n * Tip: There are .env or .flaskenv files present. Do \"pip install python-dotenv\" to use them.\r\nDomain                Endpoint                                             Methods    Rule\r\n-----------------   ----------------------------------------------------  ----------  ------------------------------------------------\r\nadmin.test.local     admin_blueprint.home                                  GET        /home\r\ntest.test.local      test_subdomain_blueprint.home                         GET        /home\r\ntest.local           static                                                GET        /static/<path:filename>\r\n...\r\n```\r\n\n", "hints_text": "", "created_at": "2023-04-14T16:36:54Z", "version": "2.3", "FAIL_TO_PASS": "[\"tests/test_cli.py::TestRoutes::test_subdomain\", \"tests/test_cli.py::TestRoutes::test_host\"]", "PASS_TO_PASS": "[\"tests/test_cli.py::test_cli_name\", \"tests/test_cli.py::test_find_best_app\", \"tests/test_cli.py::test_prepare_import[test-path0-test]\", \"tests/test_cli.py::test_prepare_import[test.py-path1-test]\", \"tests/test_cli.py::test_prepare_import[a/test-path2-test]\", \"tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]\", \"tests/test_cli.py::test_prepare_import[test/__init__-path4-test]\", \"tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]\", \"tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]\", \"tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]\", \"tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]\", \"tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]\", \"tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]\", \"tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-None-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]\", \"tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\\\"foo\\\",\", \"tests/test_cli.py::test_locate_app[cliapp.factory-\", \"tests/test_cli.py::test_locate_app_raises[notanapp.py-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp/app-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\\\"foo\\\")]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]\", \"tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]\", \"tests/test_cli.py::test_locate_app_suppress_raise\", \"tests/test_cli.py::test_get_version\", \"tests/test_cli.py::test_scriptinfo\", \"tests/test_cli.py::test_app_cli_has_app_context\", \"tests/test_cli.py::test_with_appcontext\", \"tests/test_cli.py::test_appgroup_app_context\", \"tests/test_cli.py::test_flaskgroup_app_context\", \"tests/test_cli.py::test_flaskgroup_debug[True]\", \"tests/test_cli.py::test_flaskgroup_debug[False]\", \"tests/test_cli.py::test_flaskgroup_nested\", \"tests/test_cli.py::test_no_command_echo_loading_error\", \"tests/test_cli.py::test_help_echo_loading_error\", \"tests/test_cli.py::test_help_echo_exception\", \"tests/test_cli.py::TestRoutes::test_simple\", \"tests/test_cli.py::TestRoutes::test_sort\", \"tests/test_cli.py::TestRoutes::test_all_methods\", \"tests/test_cli.py::TestRoutes::test_no_routes\", \"tests/test_cli.py::test_load_dotenv\", \"tests/test_cli.py::test_dotenv_path\", \"tests/test_cli.py::test_dotenv_optional\", \"tests/test_cli.py::test_disable_dotenv_from_env\", \"tests/test_cli.py::test_run_cert_path\", \"tests/test_cli.py::test_run_cert_adhoc\", \"tests/test_cli.py::test_run_cert_import\", \"tests/test_cli.py::test_run_cert_no_ssl\", \"tests/test_cli.py::test_cli_blueprints\", \"tests/test_cli.py::test_cli_empty\"]", "environment_setup_commit": "182ce3dd15dfa3537391c3efaf9c3ff407d134d4"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   src/flask/cli.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 182ce3dd15dfa3537391c3efaf9c3ff407d134d4\nAuthor: emisargent <55098699+emisargent@users.noreply.github.com>\nDate:   Thu Apr 13 10:03:49 2023 -0700\n\n    Add a devcontainer configuration (#4969)\n\ndiff --git a/.devcontainer/devcontainer.json b/.devcontainer/devcontainer.json\nnew file mode 100644\nindex 00000000..45198266\n--- /dev/null\n+++ b/.devcontainer/devcontainer.json\n@@ -0,0 +1,17 @@\n+{\n+  \"name\": \"pallets/flask\",\n+  \"image\": \"mcr.microsoft.com/devcontainers/python:3\",\n+  \"customizations\": {\n+    \"vscode\": {\n+      \"settings\": {\n+        \"python.defaultInterpreterPath\": \"${workspaceFolder}/.venv\",\n+        \"python.terminal.activateEnvInCurrentTerminal\": true,\n+        \"python.terminal.launchArgs\": [\n+          \"-X\",\n+          \"dev\"\n+        ]\n+      }\n+    }\n+  },\n+  \"onCreateCommand\": \".devcontainer/on-create-command.sh\"\n+}\ndiff --git a/.devcontainer/on-create-command.sh b/.devcontainer/on-create-command.sh\nnew file mode 100755\nindex 00000000..deffa37b\n--- /dev/null\n+++ b/.devcontainer/on-create-command.sh\n@@ -0,0 +1,9 @@\n+#!/bin/bash\n+set -e\n+\n+python3 -m venv .venv\n+. .venv/bin/activate\n+pip install -U pip setuptools wheel\n+pip install -r requirements/dev.txt\n+pip install -e .\n+pre-commit install --install-hooks\ndiff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst\nindex 8962490f..5c122345 100644\n--- a/CONTRIBUTING.rst\n+++ b/CONTRIBUTING.rst\n@@ -67,9 +67,29 @@ Include the following in your patch:\n .. _pre-commit: https://pre-commit.com\n \n \n-First time setup\n-~~~~~~~~~~~~~~~~\n+First time setup using GitHub Codespaces\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n+`GitHub Codespaces`_ creates a development environment that is already set up for the\n+project. By default it opens in Visual Studio Code for the Web, but this can\n+be changed in your GitHub profile settings to use Visual Studio Code or JetBrains\n+PyCharm on your local computer.\n+\n+-   Make sure you have a `GitHub account`_.\n+-   From the project's repository page, click the green \"Code\" button and then \"Create\n+    codespace on main\".\n+-   The codespace will be set up, then Visual Studio Code will open. However, you'll\n+    need to wait a bit longer for the Python extension to be installed. You'll know it's\n+    ready when the terminal at the bottom shows that the virtualenv was activated.\n+-   Check out a branch and `start coding`_.\n+\n+.. _GitHub Codespaces: https://docs.github.com/en/codespaces\n+.. _devcontainer: https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/introduction-to-dev-containers\n+\n+First time setup in your local environment\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+-   Make sure you have a `GitHub account`_.\n -   Download and install the `latest version of git`_.\n -   Configure git with your `username`_ and `email`_.\n \n@@ -78,25 +98,16 @@ First time setup\n         $ git config --global user.name 'your name'\n         $ git config --global user.email 'your email'\n \n--   Make sure you have a `GitHub account`_.\n -   Fork Flask to your GitHub account by clicking the `Fork`_ button.\n--   `Clone`_ the main repository locally.\n+-   `Clone`_ your fork locally, replacing ``your-username`` in the command below with\n+    your actual username.\n \n     .. code-block:: text\n \n-        $ git clone https://github.com/pallets/flask\n+        $ git clone https://github.com/your-username/flask\n         $ cd flask\n \n--   Add your fork as a remote to push your work to. Replace\n-    ``{username}`` with your username. This names the remote \"fork\", the\n-    default Pallets remote is \"origin\".\n-\n-    .. code-block:: text\n-\n-        $ git remote add fork https://github.com/{username}/flask\n-\n--   Create a virtualenv.\n-\n+-   Create a virtualenv. Use the latest version of Python.\n \n     - Linux/macOS\n \n@@ -112,68 +123,65 @@ First time setup\n          > py -3 -m venv .venv\n          > env\\Scripts\\activate\n \n--   Upgrade pip and setuptools.\n-\n-    .. code-block:: text\n-\n-        $ python -m pip install --upgrade pip setuptools\n-\n--   Install the development dependencies, then install Flask in editable\n-    mode.\n+-   Install the development dependencies, then install Flask in editable mode.\n \n     .. code-block:: text\n \n+        $ python -m pip install -U pip setuptools wheel\n         $ pip install -r requirements/dev.txt && pip install -e .\n \n -   Install the pre-commit hooks.\n \n     .. code-block:: text\n \n-        $ pre-commit install\n+        $ pre-commit install --install-hooks\n \n+.. _GitHub account: https://github.com/join\n .. _latest version of git: https://git-scm.com/downloads\n .. _username: https://docs.github.com/en/github/using-git/setting-your-username-in-git\n .. _email: https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address\n-.. _GitHub account: https://github.com/join\n .. _Fork: https://github.com/pallets/flask/fork\n .. _Clone: https://docs.github.com/en/github/getting-started-with-github/fork-a-repo#step-2-create-a-local-clone-of-your-fork\n \n+.. _start coding:\n \n Start coding\n ~~~~~~~~~~~~\n \n--   Create a branch to identify the issue you would like to work on. If\n-    you're submitting a bug or documentation fix, branch off of the\n-    latest \".x\" branch.\n+-   Create a branch to identify the issue you would like to work on. If you're\n+    submitting a bug or documentation fix, branch off of the latest \".x\" branch.\n \n     .. code-block:: text\n \n         $ git fetch origin\n         $ git checkout -b your-branch-name origin/2.0.x\n \n-    If you're submitting a feature addition or change, branch off of the\n-    \"main\" branch.\n+    If you're submitting a feature addition or change, branch off of the \"main\" branch.\n \n     .. code-block:: text\n \n         $ git fetch origin\n         $ git checkout -b your-branch-name origin/main\n \n--   Using your favorite editor, make your changes,\n-    `committing as you go`_.\n--   Include tests that cover any code changes you make. Make sure the\n-    test fails without your patch. Run the tests as described below.\n--   Push your commits to your fork on GitHub and\n-    `create a pull request`_. Link to the issue being addressed with\n-    ``fixes #123`` in the pull request.\n+-   Using your favorite editor, make your changes, `committing as you go`_.\n+\n+    -   If you are in a codespace, you will be prompted to `create a fork`_ the first\n+        time you make a commit. Enter ``Y`` to continue.\n+\n+-   Include tests that cover any code changes you make. Make sure the test fails without\n+    your patch. Run the tests as described below.\n+-   Push your commits to your fork on GitHub and `create a pull request`_. Link to the\n+    issue being addressed with ``fixes #123`` in the pull request description.\n \n     .. code-block:: text\n \n-        $ git push --set-upstream fork your-branch-name\n+        $ git push --set-upstream origin your-branch-name\n \n .. _committing as you go: https://afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html#commit-your-changes\n+.. _create a fork: https://docs.github.com/en/codespaces/developing-in-codespaces/using-source-control-in-your-codespace#about-automatic-forking\n .. _create a pull request: https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request\n \n+.. _Running the tests:\n \n Running the tests\n ~~~~~~~~~~~~~~~~~\n@@ -201,6 +209,9 @@ Generating a report of lines that do not have test coverage can indicate\n where to start contributing. Run ``pytest`` using ``coverage`` and\n generate a report.\n \n+If you are using GitHub Codespaces, ``coverage`` is already installed\n+so you can skip the installation command.\n+\n .. code-block:: text\n \n     $ pip install coverage\ndiff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..6cc36219 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -9,7 +9,7 @@ import sys\n import traceback\n import typing as t\n from functools import update_wrapper\n-from operator import attrgetter\n+from operator import itemgetter\n \n import click\n from click.core import ParameterSource\n@@ -989,49 +989,62 @@ def shell_command() -> None:\n @click.option(\n     \"--sort\",\n     \"-s\",\n-    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\")),\n+    type=click.Choice((\"endpoint\", \"methods\", \"domain\", \"rule\", \"match\")),\n     default=\"endpoint\",\n     help=(\n-        'Method to sort routes by. \"match\" is the order that Flask will match '\n-        \"routes when dispatching a request.\"\n+        \"Method to sort routes by. 'match' is the order that Flask will match routes\"\n+        \" when dispatching a request.\"\n     ),\n )\n @click.option(\"--all-methods\", is_flag=True, help=\"Show HEAD and OPTIONS methods.\")\n @with_appcontext\n def routes_command(sort: str, all_methods: bool) -> None:\n     \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n-\n     rules = list(current_app.url_map.iter_rules())\n+\n     if not rules:\n         click.echo(\"No routes were registered.\")\n         return\n \n-    ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))\n+    ignored_methods = set() if all_methods else {\"HEAD\", \"OPTIONS\"}\n+    host_matching = current_app.url_map.host_matching\n+    has_domain = any(rule.host if host_matching else rule.subdomain for rule in rules)\n+    rows = []\n \n-    if sort in (\"endpoint\", \"rule\"):\n-        rules = sorted(rules, key=attrgetter(sort))\n-    elif sort == \"methods\":\n-        rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n+    for rule in rules:\n+        row = [\n+            rule.endpoint,\n+            \", \".join(sorted((rule.methods or set()) - ignored_methods)),\n+        ]\n \n-    rule_methods = [\n-        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n-        for rule in rules\n-    ]\n+        if has_domain:\n+            row.append((rule.host if host_matching else rule.subdomain) or \"\")\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n-    widths = (\n-        max(len(rule.endpoint) for rule in rules),\n-        max(len(methods) for methods in rule_methods),\n-        max(len(rule.rule) for rule in rules),\n-    )\n-    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+        row.append(rule.rule)\n+        rows.append(row)\n+\n+    headers = [\"Endpoint\", \"Methods\"]\n+    sorts = [\"endpoint\", \"methods\"]\n+\n+    if has_domain:\n+        headers.append(\"Host\" if host_matching else \"Subdomain\")\n+        sorts.append(\"domain\")\n+\n+    headers.append(\"Rule\")\n+    sorts.append(\"rule\")\n+\n+    try:\n+        rows.sort(key=itemgetter(sorts.index(sort)))\n+    except ValueError:\n+        pass\n \n-    click.echo(row.format(*headers).strip())\n-    click.echo(row.format(*(\"-\" * width for width in widths)))\n+    rows.insert(0, headers)\n+    widths = [max(len(row[i]) for row in rows) for i in range(len(headers))]\n+    rows.insert(1, [\"-\" * w for w in widths])\n+    template = \"  \".join(f\"{{{i}:<{w}}}\" for i, w in enumerate(widths))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for row in rows:\n+        click.echo(template.format(*row))\n \n \n cli = FlaskGroup(\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: Werkzeug>=2.2.2 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Flask==2.3.0.dev0) (2.3.7)\nRequirement already satisfied: Jinja2>=3.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Flask==2.3.0.dev0) (3.1.2)\nRequirement already satisfied: itsdangerous>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Flask==2.3.0.dev0) (2.1.2)\nRequirement already satisfied: click>=8.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Flask==2.3.0.dev0) (8.1.3)\nRequirement already satisfied: blinker>=1.6.2 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Flask==2.3.0.dev0) (1.8.2)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Jinja2>=3.0->Flask==2.3.0.dev0) (2.1.1)\nBuilding wheels for collected packages: Flask\n  Building editable for Flask (pyproject.toml): started\n  Building editable for Flask (pyproject.toml): finished with status 'done'\n  Created wheel for Flask: filename=Flask-2.3.0.dev0-0.editable-py3-none-any.whl size=3944 sha256=b71b2430250af159976e33b43ee1f8841942bcf7de02ff6f17560f5fcdbfb5c0\n  Stored in directory: /tmp/pip-ephem-wheel-cache-ljd0c3sn/wheels/49/5f/4f/01b7d31ea6ddac9643da788242d33e5fd3467d95d17b032c6b\nSuccessfully built Flask\nInstalling collected packages: Flask\n  Attempting uninstall: Flask\n    Found existing installation: Flask 2.3.0.dev0\n    Uninstalling Flask-2.3.0.dev0:\n      Successfully uninstalled Flask-2.3.0.dev0\nSuccessfully installed Flask-2.3.0.dev0\n============================= test session starts ==============================\nplatform linux -- Python 3.11.10, pytest-7.3.0, pluggy-1.0.0\nrootdir: /testbed\nconfigfile: pyproject.toml\ncollected 57 items\n\ntests/test_cli.py ...................................................... [ 94%]\n...                                                                      [100%]\n\n==================================== PASSES ====================================\n_____________________________ test_dotenv_optional _____________________________\n----------------------------- Captured stderr call -----------------------------\n * Tip: There are .env or .flaskenv files present. Do \"pip install python-dotenv\" to use them.\n=========================== short test summary info ============================\nPASSED tests/test_cli.py::test_cli_name\nPASSED tests/test_cli.py::test_find_best_app\nPASSED tests/test_cli.py::test_prepare_import[test-path0-test]\nPASSED tests/test_cli.py::test_prepare_import[test.py-path1-test]\nPASSED tests/test_cli.py::test_prepare_import[a/test-path2-test]\nPASSED tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]\nPASSED tests/test_cli.py::test_prepare_import[test/__init__-path4-test]\nPASSED tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]\nPASSED tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]\nPASSED tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]\nPASSED tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]\nPASSED tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]\nPASSED tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]\nPASSED tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]\nPASSED tests/test_cli.py::test_locate_app[cliapp.factory-None-app]\nPASSED tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]\nPASSED tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]\nPASSED tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\"foo\", \"bar\")-app2_foo_bar]\nPASSED tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\"foo\", \"bar\", )-app2_foo_bar]\nPASSED tests/test_cli.py::test_locate_app[cliapp.factory- create_app () -app]\nPASSED tests/test_cli.py::test_locate_app_raises[notanapp.py-None]\nPASSED tests/test_cli.py::test_locate_app_raises[cliapp/app-None]\nPASSED tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]\nPASSED tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\"foo\")]\nPASSED tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]\nPASSED tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]\nPASSED tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]\nPASSED tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]\nPASSED tests/test_cli.py::test_locate_app_suppress_raise\nPASSED tests/test_cli.py::test_get_version\nPASSED tests/test_cli.py::test_scriptinfo\nPASSED tests/test_cli.py::test_app_cli_has_app_context\nPASSED tests/test_cli.py::test_with_appcontext\nPASSED tests/test_cli.py::test_appgroup_app_context\nPASSED tests/test_cli.py::test_flaskgroup_app_context\nPASSED tests/test_cli.py::test_flaskgroup_debug[True]\nPASSED tests/test_cli.py::test_flaskgroup_debug[False]\nPASSED tests/test_cli.py::test_flaskgroup_nested\nPASSED tests/test_cli.py::test_no_command_echo_loading_error\nPASSED tests/test_cli.py::test_help_echo_loading_error\nPASSED tests/test_cli.py::test_help_echo_exception\nPASSED tests/test_cli.py::TestRoutes::test_simple\nPASSED tests/test_cli.py::TestRoutes::test_sort\nPASSED tests/test_cli.py::TestRoutes::test_all_methods\nPASSED tests/test_cli.py::TestRoutes::test_no_routes\nPASSED tests/test_cli.py::TestRoutes::test_subdomain\nPASSED tests/test_cli.py::TestRoutes::test_host\nPASSED tests/test_cli.py::test_load_dotenv\nPASSED tests/test_cli.py::test_dotenv_path\nPASSED tests/test_cli.py::test_dotenv_optional\nPASSED tests/test_cli.py::test_disable_dotenv_from_env\nPASSED tests/test_cli.py::test_run_cert_path\nPASSED tests/test_cli.py::test_run_cert_adhoc\nPASSED tests/test_cli.py::test_run_cert_import\nPASSED tests/test_cli.py::test_run_cert_no_ssl\nPASSED tests/test_cli.py::test_cli_blueprints\nPASSED tests/test_cli.py::test_cli_empty\n============================== 57 passed in 0.21s ==============================\n", {"tests/test_cli.py::test_cli_name": "PASSED", "tests/test_cli.py::test_find_best_app": "PASSED", "tests/test_cli.py::test_prepare_import[test-path0-test]": "PASSED", "tests/test_cli.py::test_prepare_import[test.py-path1-test]": "PASSED", "tests/test_cli.py::test_prepare_import[a/test-path2-test]": "PASSED", "tests/test_cli.py::test_prepare_import[test/__init__.py-path3-test]": "PASSED", "tests/test_cli.py::test_prepare_import[test/__init__-path4-test]": "PASSED", "tests/test_cli.py::test_prepare_import[value5-path5-cliapp.inner1]": "PASSED", "tests/test_cli.py::test_prepare_import[value6-path6-cliapp.inner1.inner2]": "PASSED", "tests/test_cli.py::test_prepare_import[test.a.b-path7-test.a.b]": "PASSED", "tests/test_cli.py::test_prepare_import[value8-path8-cliapp.app]": "PASSED", "tests/test_cli.py::test_prepare_import[value9-path9-cliapp.message.txt]": "PASSED", "tests/test_cli.py::test_locate_app[cliapp.app-None-testapp]": "PASSED", "tests/test_cli.py::test_locate_app[cliapp.app-testapp-testapp]": "PASSED", "tests/test_cli.py::test_locate_app[cliapp.factory-None-app]": "PASSED", "tests/test_cli.py::test_locate_app[cliapp.factory-create_app-app]": "PASSED", "tests/test_cli.py::test_locate_app[cliapp.factory-create_app()-app]": "PASSED", "tests/test_cli.py::test_locate_app[cliapp.factory-create_app2(\"foo\",": "PASSED", "tests/test_cli.py::test_locate_app[cliapp.factory-": "PASSED", "tests/test_cli.py::test_locate_app_raises[notanapp.py-None]": "PASSED", "tests/test_cli.py::test_locate_app_raises[cliapp/app-None]": "PASSED", "tests/test_cli.py::test_locate_app_raises[cliapp.app-notanapp]": "PASSED", "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app2(\"foo\")]": "PASSED", "tests/test_cli.py::test_locate_app_raises[cliapp.factory-create_app(]": "PASSED", "tests/test_cli.py::test_locate_app_raises[cliapp.factory-no_app]": "PASSED", "tests/test_cli.py::test_locate_app_raises[cliapp.importerrorapp-None]": "PASSED", "tests/test_cli.py::test_locate_app_raises[cliapp.message.txt-None]": "PASSED", "tests/test_cli.py::test_locate_app_suppress_raise": "PASSED", "tests/test_cli.py::test_get_version": "PASSED", "tests/test_cli.py::test_scriptinfo": "PASSED", "tests/test_cli.py::test_app_cli_has_app_context": "PASSED", "tests/test_cli.py::test_with_appcontext": "PASSED", "tests/test_cli.py::test_appgroup_app_context": "PASSED", "tests/test_cli.py::test_flaskgroup_app_context": "PASSED", "tests/test_cli.py::test_flaskgroup_debug[True]": "PASSED", "tests/test_cli.py::test_flaskgroup_debug[False]": "PASSED", "tests/test_cli.py::test_flaskgroup_nested": "PASSED", "tests/test_cli.py::test_no_command_echo_loading_error": "PASSED", "tests/test_cli.py::test_help_echo_loading_error": "PASSED", "tests/test_cli.py::test_help_echo_exception": "PASSED", "tests/test_cli.py::TestRoutes::test_simple": "PASSED", "tests/test_cli.py::TestRoutes::test_sort": "PASSED", "tests/test_cli.py::TestRoutes::test_all_methods": "PASSED", "tests/test_cli.py::TestRoutes::test_no_routes": "PASSED", "tests/test_cli.py::TestRoutes::test_subdomain": "PASSED", "tests/test_cli.py::TestRoutes::test_host": "PASSED", "tests/test_cli.py::test_load_dotenv": "PASSED", "tests/test_cli.py::test_dotenv_path": "PASSED", "tests/test_cli.py::test_dotenv_optional": "PASSED", "tests/test_cli.py::test_disable_dotenv_from_env": "PASSED", "tests/test_cli.py::test_run_cert_path": "PASSED", "tests/test_cli.py::test_run_cert_adhoc": "PASSED", "tests/test_cli.py::test_run_cert_import": "PASSED", "tests/test_cli.py::test_run_cert_no_ssl": "PASSED", "tests/test_cli.py::test_cli_blueprints": "PASSED", "tests/test_cli.py::test_cli_empty": "PASSED"}]