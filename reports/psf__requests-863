[{"repo": "psf/requests", "instance_id": "psf__requests-863", "base_commit": "a0df2cbb10419037d11d04352b3175405ab52941", "patch": "diff --git a/requests/models.py b/requests/models.py\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -462,8 +462,10 @@ def path_url(self):\n \n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        if isinstance(hook, (list, tuple, set)):\n+            self.hooks[event].extend(hook)\n+        else:\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n", "test_patch": "diff --git a/tests/test_requests.py b/tests/test_requests.py\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -744,6 +744,40 @@ def add_bar_header(args):\n             assert 'foo' in response.text\n             assert 'bar' in response.text\n \n+    def test_allow_list_of_hooks_to_register_hook(self):\n+        \"\"\"Issue 785: https://github.com/kennethreitz/requests/issues/785\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+\n+            return args\n+\n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Bar': 'bar'\n+            })\n+\n+            return args\n+\n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h) is True\n+\n+        hooks = [add_foo_header, add_bar_header]\n+        r = requests.models.Request()\n+        r.register_hook('args', hooks)\n+        assert_hooks_are_callable(r.hooks)\n+\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert_hooks_are_callable(r.hooks)\n+\n     def test_session_persistent_cookies(self):\n \n         s = requests.session()\n", "problem_statement": "Allow lists in the dict values of the hooks argument\nCurrently the Request class has a .register_hook() method but it parses the dictionary it expects from it's hooks argument weirdly: the argument can only specify one hook function per hook.  If you pass in a list of hook functions per hook the code in Request.**init**() will wrap the list in a list which then fails when the hooks are consumed (since a list is not callable).  This is especially annoying since you can not use multiple hooks from a session.  The only way to get multiple hooks now is to create the request object without sending it, then call .register_hook() multiple times and then finally call .send().\n\nThis would all be much easier if Request.**init**() parsed the hooks parameter in a way that it accepts lists as it's values.\n\n", "hints_text": "If anyone OKs this feature request, I'd be happy to dig into it.\n\n@sigmavirus24 :+1:\n\nJust need to make sure that the current workflow also continues to work with this change.\n\nOnce @kennethreitz has time to review #833, I'll start working on this. I have a feeling opening a branch for this would cause a merge conflict if I were to have two Pull Requests that are ignorant of each other for the same file. Could be wrong though. Also, I'm in no rush since I'm fairly busy and I know @kennethreitz is more busy than I am with conferences and whatnot. Just wanted to keep @flub updated.\n\nI'm going to start work on this Friday at the earliest.\n", "created_at": "2012-09-20T15:48:00Z", "version": "0.14", "FAIL_TO_PASS": "[\"tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_HEADERS\", \"tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_postdata\", \"tests/test_requests.py::RequestsTestSuite::test_prefetch_redirect_bug\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_data\"]", "PASS_TO_PASS": "[\"tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_HTTP_200_OK_GET\", \"tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_TUPLE_HTTP_200_OK_GET\", \"tests/test_requests.py::RequestsTestSuite::test_GET_no_redirect\", \"tests/test_requests.py::RequestsTestSuite::test_HEAD_no_redirect\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_PARAMS\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_HEAD\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_PUT\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_302_ALLOW_REDIRECT_GET\", \"tests/test_requests.py::RequestsTestSuite::test_HTTP_302_GET\", \"tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES\", \"tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_PARAMS\", \"tests/test_requests.py::RequestsTestSuite::test_accept_objects_with_string_representations_as_urls\", \"tests/test_requests.py::RequestsTestSuite::test_bytes_files\", \"tests/test_requests.py::RequestsTestSuite::test_cached_response\", \"tests/test_requests.py::RequestsTestSuite::test_can_have_none_in_header_values\", \"tests/test_requests.py::RequestsTestSuite::test_connection_error\", \"tests/test_requests.py::RequestsTestSuite::test_connection_error_with_safe_mode\", \"tests/test_requests.py::RequestsTestSuite::test_connection_keepalive_and_close\", \"tests/test_requests.py::RequestsTestSuite::test_danger_mode_redirects\", \"tests/test_requests.py::RequestsTestSuite::test_decompress_gzip\", \"tests/test_requests.py::RequestsTestSuite::test_default_status_raising\", \"tests/test_requests.py::RequestsTestSuite::test_empty_response\", \"tests/test_requests.py::RequestsTestSuite::test_entry_points\", \"tests/test_requests.py::RequestsTestSuite::test_file_post_data\", \"tests/test_requests.py::RequestsTestSuite::test_head_content\", \"tests/test_requests.py::RequestsTestSuite::test_httpauth_recursion\", \"tests/test_requests.py::RequestsTestSuite::test_invalid_url\", \"tests/test_requests.py::RequestsTestSuite::test_invalid_urls_throw_requests_exception\", \"tests/test_requests.py::RequestsTestSuite::test_iter_lines\", \"tests/test_requests.py::RequestsTestSuite::test_max_redirects\", \"tests/test_requests.py::RequestsTestSuite::test_multiple_hooks\", \"tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_post_data\", \"tests/test_requests.py::RequestsTestSuite::test_nonzero_evaluation\", \"tests/test_requests.py::RequestsTestSuite::test_params_accepts_kv_list\", \"tests/test_requests.py::RequestsTestSuite::test_params_are_added_before_fragment\", \"tests/test_requests.py::RequestsTestSuite::test_path_is_not_double_encoded\", \"tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files\", \"tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files_as_tuples\", \"tests/test_requests.py::RequestsTestSuite::test_prefetch_return_response_interaction\", \"tests/test_requests.py::RequestsTestSuite::test_redirect_history\", \"tests/test_requests.py::RequestsTestSuite::test_relative_redirect_history\", \"tests/test_requests.py::RequestsTestSuite::test_request_ok_set\", \"tests/test_requests.py::RequestsTestSuite::test_response_has_unicode_url\", \"tests/test_requests.py::RequestsTestSuite::test_response_sent\", \"tests/test_requests.py::RequestsTestSuite::test_session_HTTP_200_OK_GET\", \"tests/test_requests.py::RequestsTestSuite::test_session_persistent_headers\", \"tests/test_requests.py::RequestsTestSuite::test_session_pickling\", \"tests/test_requests.py::RequestsTestSuite::test_status_raising\", \"tests/test_requests.py::RequestsTestSuite::test_unicode_get\", \"tests/test_requests.py::RequestsTestSuite::test_upload_binary_data\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_get_query_multivalued_param\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_and_data\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_multivalued_and_data\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring\", \"tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring_multivalued\", \"tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_port\", \"tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_scheme\", \"tests/test_requests.py::RequestsTestSuite::test_user_agent_transfers\"]", "environment_setup_commit": "a0df2cbb10419037d11d04352b3175405ab52941"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   requests/models.py\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tbuild/\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit a0df2cbb10419037d11d04352b3175405ab52941\nMerge: 0342ddb5 cb44e165\nAuthor: Kenneth Reitz <me@kennethreitz.com>\nDate:   Wed Sep 12 23:36:36 2012 -0700\n\n    Merge pull request #853 from plaes/docs-license-missing-ref\n    \n    Create label for the ISC License, which is referenced from the index page\n\ndiff --git a/requests/models.py b/requests/models.py\nindex d8456375..f33c3c3e 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -462,8 +462,10 @@ class Request(object):\n \n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        if isinstance(hook, (list, tuple, set)):\n+            self.hooks[event].extend(hook)\n+        else:\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\nProcessing /testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nBuilding wheels for collected packages: requests\n  Building wheel for requests (setup.py): started\n  Building wheel for requests (setup.py): finished with status 'done'\n  Created wheel for requests: filename=requests-0.14.0-py3-none-any.whl size=364880 sha256=9085e5b403eaca4b51f1729ccaf716ec882d34df9dfe0eb2ff2e70474cf9e153\n  Stored in directory: /tmp/pip-ephem-wheel-cache-pe_x_l5c/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built requests\nInstalling collected packages: requests\n  Attempting uninstall: requests\n    Found existing installation: requests 0.14.0\n    Uninstalling requests-0.14.0:\n      Successfully uninstalled requests-0.14.0\nSuccessfully installed requests-0.14.0\n============================= test session starts ==============================\nplatform linux -- Python 3.9.20, pytest-7.4.4, pluggy-1.0.0\nrootdir: /testbed\ncollected 76 items\n\ntests/test_requests.py ..FF............................................. [ 64%]\n.......FF.....F.F..........                                              [100%]\n\n=================================== FAILURES ===================================\n______________ RequestsTestSuite.test_DIGESTAUTH_HTTP_200_OK_GET _______________\n\nself = <test_requests.RequestsTestSuite testMethod=test_DIGESTAUTH_HTTP_200_OK_GET>\n\n    def test_DIGESTAUTH_HTTP_200_OK_GET(self):\n    \n        for service in SERVICES:\n    \n            auth = HTTPDigestAuth('user', 'pass')\n            url = service('digest-auth', 'auth', 'user', 'pass')\n    \n>           r = get(url, auth=auth)\n\ntests/test_requests.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/api.py:65: in get\n    return request('get', url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/safe_mode.py:39: in wrapped\n    return function(method, url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/api.py:51: in request\n    return session.request(method=method, url=url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/sessions.py:241: in request\n    r.send(prefetch=prefetch)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:645: in send\n    self._build_response(r)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:230: in _build_response\n    r = build(resp)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:207: in build\n    extract_cookies_to_jar(self.cookies, self, resp)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/cookies.py:103: in extract_cookies_to_jar\n    jar.extract_cookies(res, req)\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:1683: in extract_cookies\n    if self._policy.set_ok(cookie, request):\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:956: in set_ok\n    if not fn(cookie, request):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.cookiejar.DefaultCookiePolicy object at 0x7f9d35b978e0>\ncookie = Cookie(version=0, name='stale_after', value='never', port=None, port_specified=False, domain='httpbin.org', domain_spe... path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False)\nrequest = <requests.cookies.MockRequest object at 0x7f9d35b97df0>\n\n    def set_ok_verifiability(self, cookie, request):\n>       if request.unverifiable and is_third_party(request):\nE       AttributeError: 'MockRequest' object has no attribute 'unverifiable'\n\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:977: AttributeError\n_____________ RequestsTestSuite.test_DIGESTAUTH_WRONG_HTTP_401_GET _____________\n\nself = <test_requests.RequestsTestSuite testMethod=test_DIGESTAUTH_WRONG_HTTP_401_GET>\n\n    def test_DIGESTAUTH_WRONG_HTTP_401_GET(self):\n    \n        for service in SERVICES:\n    \n            auth = HTTPDigestAuth('user', 'wrongpass')\n            url = service('digest-auth', 'auth', 'user', 'pass')\n    \n>           r = get(url, auth=auth)\n\ntests/test_requests.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/api.py:65: in get\n    return request('get', url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/safe_mode.py:39: in wrapped\n    return function(method, url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/api.py:51: in request\n    return session.request(method=method, url=url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/sessions.py:241: in request\n    r.send(prefetch=prefetch)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:645: in send\n    self._build_response(r)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:230: in _build_response\n    r = build(resp)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:207: in build\n    extract_cookies_to_jar(self.cookies, self, resp)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/cookies.py:103: in extract_cookies_to_jar\n    jar.extract_cookies(res, req)\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:1683: in extract_cookies\n    if self._policy.set_ok(cookie, request):\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:956: in set_ok\n    if not fn(cookie, request):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.cookiejar.DefaultCookiePolicy object at 0x7f9d3597c550>\ncookie = Cookie(version=0, name='stale_after', value='never', port=None, port_specified=False, domain='httpbin.org', domain_spe... path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False)\nrequest = <requests.cookies.MockRequest object at 0x7f9d3597c3a0>\n\n    def set_ok_verifiability(self, cookie, request):\n>       if request.unverifiable and is_third_party(request):\nE       AttributeError: 'MockRequest' object has no attribute 'unverifiable'\n\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:977: AttributeError\n______ RequestsTestSuite.test_session_cookies_with_return_response_false _______\n\nself = <test_requests.RequestsTestSuite testMethod=test_session_cookies_with_return_response_false>\n\n    def test_session_cookies_with_return_response_false(self):\n        s = requests.session()\n        # return_response=False as it does requests.async.get\n        rq = get(httpbin('cookies', 'set', 'k', 'v'), return_response=False,\n                 allow_redirects=True, session=s)\n>       rq.send(prefetch=True)\n\ntests/test_requests.py:853: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:645: in send\n    self._build_response(r)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:230: in _build_response\n    r = build(resp)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:207: in build\n    extract_cookies_to_jar(self.cookies, self, resp)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/cookies.py:103: in extract_cookies_to_jar\n    jar.extract_cookies(res, req)\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:1683: in extract_cookies\n    if self._policy.set_ok(cookie, request):\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:956: in set_ok\n    if not fn(cookie, request):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.cookiejar.DefaultCookiePolicy object at 0x7f9d35946460>\ncookie = Cookie(version=0, name='k', value='v', port=None, port_specified=False, domain='httpbin.org', domain_specified=False, ... path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False)\nrequest = <requests.cookies.MockRequest object at 0x7f9d35946400>\n\n    def set_ok_verifiability(self, cookie, request):\n>       if request.unverifiable and is_third_party(request):\nE       AttributeError: 'MockRequest' object has no attribute 'unverifiable'\n\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:977: AttributeError\n______________ RequestsTestSuite.test_session_persistent_cookies _______________\n\nself = <test_requests.RequestsTestSuite testMethod=test_session_persistent_cookies>\n\n    def test_session_persistent_cookies(self):\n    \n        s = requests.session()\n    \n        # Internally dispatched cookies are sent.\n        _c = {'kenneth': 'reitz', 'bessie': 'monke'}\n>       r = get(httpbin('cookies'), cookies=_c, session=s)\n\ntests/test_requests.py:787: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/api.py:65: in get\n    return request('get', url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/safe_mode.py:39: in wrapped\n    return function(method, url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/api.py:51: in request\n    return session.request(method=method, url=url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/sessions.py:241: in request\n    r.send(prefetch=prefetch)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:605: in send\n    cookie_header = get_cookie_header(self.cookies, self)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/cookies.py:109: in get_cookie_header\n    jar.add_cookie_header(r)\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:1365: in add_cookie_header\n    cookies = self._cookies_for_request(request)\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:1291: in _cookies_for_request\n    cookies.extend(self._cookies_for_domain(domain, request))\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:1280: in _cookies_for_domain\n    if not self._policy.return_ok(cookie, request):\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:1102: in return_ok\n    if not fn(cookie, request):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.cookiejar.DefaultCookiePolicy object at 0x7f9d3572d760>\ncookie = Cookie(version=0, name='kenneth', value='reitz', port=None, port_specified=False, domain='', domain_specified=False, d...True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)\nrequest = <requests.cookies.MockRequest object at 0x7f9d3572deb0>\n\n    def return_ok_verifiability(self, cookie, request):\n>       if request.unverifiable and is_third_party(request):\nE       AttributeError: 'MockRequest' object has no attribute 'unverifiable'\n\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:1116: AttributeError\n_________________ RequestsTestSuite.test_str_data_content_type _________________\n\nself = <test_requests.RequestsTestSuite testMethod=test_str_data_content_type>\n\n    def test_str_data_content_type(self):\n        data = 'test string data'\n        r = post(httpbin('post'), data=data)\n        t = json.loads(r.text)\n>       self.assertEqual(t.get('headers').get('Content-Type'), '')\nE       AssertionError: None != ''\n\ntests/test_requests.py:1090: AssertionError\n______________ RequestsTestSuite.test_unpickled_session_requests _______________\n\nself = <test_requests.RequestsTestSuite testMethod=test_unpickled_session_requests>\n\n    def test_unpickled_session_requests(self):\n        s = requests.session()\n>       r = get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True, session=s)\n\ntests/test_requests.py:877: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/api.py:65: in get\n    return request('get', url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/safe_mode.py:39: in wrapped\n    return function(method, url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/api.py:51: in request\n    return session.request(method=method, url=url, **kwargs)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/sessions.py:241: in request\n    r.send(prefetch=prefetch)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:645: in send\n    self._build_response(r)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:230: in _build_response\n    r = build(resp)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/models.py:207: in build\n    extract_cookies_to_jar(self.cookies, self, resp)\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/cookies.py:103: in extract_cookies_to_jar\n    jar.extract_cookies(res, req)\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:1683: in extract_cookies\n    if self._policy.set_ok(cookie, request):\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:956: in set_ok\n    if not fn(cookie, request):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.cookiejar.DefaultCookiePolicy object at 0x7f9d3568c2e0>\ncookie = Cookie(version=0, name='k', value='v', port=None, port_specified=False, domain='httpbin.org', domain_specified=False, ... path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={}, rfc2109=False)\nrequest = <requests.cookies.MockRequest object at 0x7f9d3568c7c0>\n\n    def set_ok_verifiability(self, cookie, request):\n>       if request.unverifiable and is_third_party(request):\nE       AttributeError: 'MockRequest' object has no attribute 'unverifiable'\n\n/opt/miniconda3/envs/testbed/lib/python3.9/http/cookiejar.py:977: AttributeError\n=============================== warnings summary ===============================\n../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/packages/urllib3/_collections.py:7\n  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/requests/packages/urllib3/_collections.py:7: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n    from collections import MutableMapping\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n==================================== PASSES ====================================\n=========================== short test summary info ============================\nPASSED tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_HTTP_200_OK_GET\nPASSED tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_TUPLE_HTTP_200_OK_GET\nPASSED tests/test_requests.py::RequestsTestSuite::test_GET_no_redirect\nPASSED tests/test_requests.py::RequestsTestSuite::test_HEAD_no_redirect\nPASSED tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET\nPASSED tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS\nPASSED tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_PARAMS\nPASSED tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_HEAD\nPASSED tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_PUT\nPASSED tests/test_requests.py::RequestsTestSuite::test_HTTP_302_ALLOW_REDIRECT_GET\nPASSED tests/test_requests.py::RequestsTestSuite::test_HTTP_302_GET\nPASSED tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES\nPASSED tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_STRINGS\nPASSED tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_HEADERS\nPASSED tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_PARAMS\nPASSED tests/test_requests.py::RequestsTestSuite::test_accept_objects_with_string_representations_as_urls\nPASSED tests/test_requests.py::RequestsTestSuite::test_allow_list_of_hooks_to_register_hook\nPASSED tests/test_requests.py::RequestsTestSuite::test_bytes_files\nPASSED tests/test_requests.py::RequestsTestSuite::test_cached_response\nPASSED tests/test_requests.py::RequestsTestSuite::test_can_have_none_in_header_values\nPASSED tests/test_requests.py::RequestsTestSuite::test_connection_error\nPASSED tests/test_requests.py::RequestsTestSuite::test_connection_error_with_safe_mode\nPASSED tests/test_requests.py::RequestsTestSuite::test_connection_keepalive_and_close\nPASSED tests/test_requests.py::RequestsTestSuite::test_danger_mode_redirects\nPASSED tests/test_requests.py::RequestsTestSuite::test_decompress_gzip\nPASSED tests/test_requests.py::RequestsTestSuite::test_default_status_raising\nPASSED tests/test_requests.py::RequestsTestSuite::test_empty_response\nPASSED tests/test_requests.py::RequestsTestSuite::test_entry_points\nPASSED tests/test_requests.py::RequestsTestSuite::test_file_post_data\nPASSED tests/test_requests.py::RequestsTestSuite::test_head_content\nPASSED tests/test_requests.py::RequestsTestSuite::test_httpauth_recursion\nPASSED tests/test_requests.py::RequestsTestSuite::test_invalid_url\nPASSED tests/test_requests.py::RequestsTestSuite::test_invalid_urls_throw_requests_exception\nPASSED tests/test_requests.py::RequestsTestSuite::test_iter_lines\nPASSED tests/test_requests.py::RequestsTestSuite::test_max_redirects\nPASSED tests/test_requests.py::RequestsTestSuite::test_multiple_hooks\nPASSED tests/test_requests.py::RequestsTestSuite::test_none_vals_in_data_are_deleted\nPASSED tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_post_data\nPASSED tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_postdata\nPASSED tests/test_requests.py::RequestsTestSuite::test_nonzero_evaluation\nPASSED tests/test_requests.py::RequestsTestSuite::test_params_accepts_kv_list\nPASSED tests/test_requests.py::RequestsTestSuite::test_params_are_added_before_fragment\nPASSED tests/test_requests.py::RequestsTestSuite::test_path_is_not_double_encoded\nPASSED tests/test_requests.py::RequestsTestSuite::test_permissive_iter_content\nPASSED tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files\nPASSED tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files_as_tuples\nPASSED tests/test_requests.py::RequestsTestSuite::test_prefetch_redirect_bug\nPASSED tests/test_requests.py::RequestsTestSuite::test_prefetch_return_response_interaction\nPASSED tests/test_requests.py::RequestsTestSuite::test_redirect_history\nPASSED tests/test_requests.py::RequestsTestSuite::test_relative_redirect_history\nPASSED tests/test_requests.py::RequestsTestSuite::test_request_ok_set\nPASSED tests/test_requests.py::RequestsTestSuite::test_response_has_unicode_url\nPASSED tests/test_requests.py::RequestsTestSuite::test_response_sent\nPASSED tests/test_requests.py::RequestsTestSuite::test_session_HTTP_200_OK_GET\nPASSED tests/test_requests.py::RequestsTestSuite::test_session_persistent_headers\nPASSED tests/test_requests.py::RequestsTestSuite::test_session_persistent_params\nPASSED tests/test_requests.py::RequestsTestSuite::test_session_pickling\nPASSED tests/test_requests.py::RequestsTestSuite::test_single_hook\nPASSED tests/test_requests.py::RequestsTestSuite::test_status_raising\nPASSED tests/test_requests.py::RequestsTestSuite::test_unicode_get\nPASSED tests/test_requests.py::RequestsTestSuite::test_upload_binary_data\nPASSED tests/test_requests.py::RequestsTestSuite::test_urlencoded_get_query_multivalued_param\nPASSED tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_data\nPASSED tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_and_data\nPASSED tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_multivalued_and_data\nPASSED tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring\nPASSED tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring_multivalued\nPASSED tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_port\nPASSED tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_scheme\nPASSED tests/test_requests.py::RequestsTestSuite::test_user_agent_transfers\nFAILED tests/test_requests.py::RequestsTestSuite::test_DIGESTAUTH_HTTP_200_OK_GET\nFAILED tests/test_requests.py::RequestsTestSuite::test_DIGESTAUTH_WRONG_HTTP_401_GET\nFAILED tests/test_requests.py::RequestsTestSuite::test_session_cookies_with_return_response_false\nFAILED tests/test_requests.py::RequestsTestSuite::test_session_persistent_cookies\nFAILED tests/test_requests.py::RequestsTestSuite::test_str_data_content_type\nFAILED tests/test_requests.py::RequestsTestSuite::test_unpickled_session_requests\n=================== 6 failed, 70 passed, 1 warning in 2.90s ====================\n", {"tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_HTTP_200_OK_GET": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_BASICAUTH_TUPLE_HTTP_200_OK_GET": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_GET_no_redirect": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_HEAD_no_redirect": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_GET_WITH_PARAMS": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_HEAD": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_HTTP_200_OK_PUT": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_HTTP_302_ALLOW_REDIRECT_GET": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_HTTP_302_GET": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_STRINGS": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_HEADERS": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_POSTBIN_GET_POST_FILES_WITH_PARAMS": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_accept_objects_with_string_representations_as_urls": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_allow_list_of_hooks_to_register_hook": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_bytes_files": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_cached_response": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_can_have_none_in_header_values": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_connection_error": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_connection_error_with_safe_mode": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_connection_keepalive_and_close": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_danger_mode_redirects": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_decompress_gzip": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_default_status_raising": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_empty_response": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_entry_points": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_file_post_data": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_head_content": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_httpauth_recursion": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_invalid_url": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_invalid_urls_throw_requests_exception": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_iter_lines": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_max_redirects": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_multiple_hooks": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_none_vals_in_data_are_deleted": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_post_data": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_nonurlencoded_postdata": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_nonzero_evaluation": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_params_accepts_kv_list": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_params_are_added_before_fragment": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_path_is_not_double_encoded": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_permissive_iter_content": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_post_fields_with_multiple_values_and_files_as_tuples": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_prefetch_redirect_bug": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_prefetch_return_response_interaction": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_redirect_history": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_relative_redirect_history": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_request_ok_set": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_response_has_unicode_url": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_response_sent": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_session_HTTP_200_OK_GET": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_session_persistent_headers": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_session_persistent_params": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_session_pickling": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_single_hook": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_status_raising": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_unicode_get": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_upload_binary_data": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_urlencoded_get_query_multivalued_param": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_data": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_and_data": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_query_multivalued_and_data": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_urlencoded_post_querystring_multivalued": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_port": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_useful_exception_for_invalid_scheme": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_user_agent_transfers": "PASSED", "tests/test_requests.py::RequestsTestSuite::test_DIGESTAUTH_HTTP_200_OK_GET": "FAILED", "tests/test_requests.py::RequestsTestSuite::test_DIGESTAUTH_WRONG_HTTP_401_GET": "FAILED", "tests/test_requests.py::RequestsTestSuite::test_session_cookies_with_return_response_false": "FAILED", "tests/test_requests.py::RequestsTestSuite::test_session_persistent_cookies": "FAILED", "tests/test_requests.py::RequestsTestSuite::test_str_data_content_type": "FAILED", "tests/test_requests.py::RequestsTestSuite::test_unpickled_session_requests": "FAILED"}]