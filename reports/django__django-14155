[{"repo": "django/django", "instance_id": "django__django-14155", "base_commit": "2f13c476abe4ba787b6cb71131818341911f43cc", "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -59,9 +59,16 @@ def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n-            self.app_names, self.namespaces, self.route,\n+        if isinstance(self.func, functools.partial):\n+            func = repr(self.func)\n+        else:\n+            func = self._func_path\n+        return (\n+            'ResolverMatch(func=%s, args=%r, kwargs=%r, url_name=%r, '\n+            'app_names=%r, namespaces=%r, route=%r)' % (\n+                func, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n         )\n \n \n", "test_patch": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1141,10 +1141,30 @@ def test_repr(self):\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n-            \"args=('42', '37'), kwargs={}, url_name=no-kwargs, app_names=[], \"\n-            \"namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$)\",\n+            \"args=('42', '37'), kwargs={}, url_name='no-kwargs', app_names=[], \"\n+            \"namespaces=[], route='^no_kwargs/([0-9]+)/([0-9]+)/$')\",\n         )\n \n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={func}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n+\n \n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n", "problem_statement": "ResolverMatch.__repr__() doesn't handle functools.partial() nicely.\nDescription\n\t \n\t\t(last modified by Nick Pope)\n\t \nWhen a partial function is passed as the view, the __repr__ shows the func argument as functools.partial which isn't very helpful, especially as it doesn't reveal the underlying function or arguments provided.\nBecause a partial function also has arguments provided up front, we need to handle those specially so that they are accessible in __repr__.\nISTM that we can simply unwrap functools.partial objects in ResolverMatch.__init__().\n", "hints_text": "", "created_at": "2021-03-19T15:44:25Z", "version": "4.0", "FAIL_TO_PASS": "[\"test_repr (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_repr_functools_partial (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_resolver_match_on_request (urlpatterns_reverse.tests.ResolverMatchTests)\"]", "PASS_TO_PASS": "[\"test_include_2_tuple (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_2_tuple_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_3_tuple (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_3_tuple_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_4_tuple (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_app_name (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_app_name_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_namespace (urlpatterns_reverse.tests.IncludeTests)\", \"test_include_urls (urlpatterns_reverse.tests.IncludeTests)\", \"URLResolver should raise an exception when no urlpatterns exist.\", \"test_invalid_regex (urlpatterns_reverse.tests.ErroneousViewTests)\", \"test_noncallable_view (urlpatterns_reverse.tests.ErroneousViewTests)\", \"test_attributeerror_not_hidden (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_module_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_non_string_value (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_not_callable (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_parent_module_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_string_without_dot (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_view_does_not_exist (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_view_loading (urlpatterns_reverse.tests.ViewLoadingTests)\", \"test_callable_handlers (urlpatterns_reverse.tests.ErrorHandlerResolutionTests)\", \"test_named_handlers (urlpatterns_reverse.tests.ErrorHandlerResolutionTests)\", \"test_invalid_resolve (urlpatterns_reverse.tests.LookaheadTests)\", \"test_invalid_reverse (urlpatterns_reverse.tests.LookaheadTests)\", \"test_valid_resolve (urlpatterns_reverse.tests.LookaheadTests)\", \"test_valid_reverse (urlpatterns_reverse.tests.LookaheadTests)\", \"test_no_illegal_imports (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_to_object (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_to_url (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_to_view_name (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_redirect_view_object (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_reverse_by_path_nested (urlpatterns_reverse.tests.ReverseShortcutTests)\", \"test_resolver_match_on_request_before_resolution (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_urlpattern_resolve (urlpatterns_reverse.tests.ResolverMatchTests)\", \"test_illegal_args_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_illegal_kwargs_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_mixing_args_and_kwargs (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_no_args_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_non_urlsafe_prefix_with_args (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_patterns_reported (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_prefix_braces (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_prefix_format_char (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_prefix_parenthesis (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_reverse_none (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_script_name_escaping (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_urlpattern_reverse (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_view_not_found_message (urlpatterns_reverse.tests.URLPatternReverse)\", \"test_build_absolute_uri (urlpatterns_reverse.tests.ReverseLazyTest)\", \"test_inserting_reverse_lazy_into_string (urlpatterns_reverse.tests.ReverseLazyTest)\", \"test_redirect_with_lazy_reverse (urlpatterns_reverse.tests.ReverseLazyTest)\", \"test_user_permission_with_lazy_reverse (urlpatterns_reverse.tests.ReverseLazyTest)\", \"Names deployed via dynamic URL objects that require namespaces can't\", \"A default application namespace can be used for lookup.\", \"A default application namespace is sensitive to the current app.\", \"An application namespace without a default is sensitive to the current\", \"Namespaces can be applied to include()'d urlpatterns that set an\", \"Dynamic URL objects can return a (pattern, app_name) 2-tuple, and\", \"Namespace defaults to app_name when including a (pattern, app_name)\", \"current_app shouldn't be used unless it matches the whole path.\", \"Namespaces can be installed anywhere in the URL pattern tree.\", \"Namespaces can be embedded.\", \"Dynamic URL objects can be found using a namespace.\", \"Namespaces can be applied to include()'d urlpatterns.\", \"Using include() with namespaces when there is a regex variable in front\", \"Namespace prefixes can capture variables.\", \"A nested current_app should be split in individual namespaces (#24904).\", \"Namespaces can be nested.\", \"Nonexistent namespaces raise errors.\", \"Normal lookups work as expected.\", \"Normal lookups work on names included from other patterns.\", \"test_special_chars_namespace (urlpatterns_reverse.tests.NamespaceTests)\", \"The list of URLs that come back from a Resolver404 exception contains\", \"test_namespaced_view_detail (urlpatterns_reverse.tests.ResolverTests)\", \"A Resolver404 is raised if resolving doesn't meet the basic\", \"URLResolver._populate() can be called concurrently, but not more\", \"Test repr of URLResolver, especially when urlconf_name is a list\", \"test_resolver_reverse (urlpatterns_reverse.tests.ResolverTests)\", \"URL pattern name arguments don't need to be unique. The last registered\", \"Verifies lazy object returned by reverse_lazy is coerced to\", \"test_view_detail_as_method (urlpatterns_reverse.tests.ResolverTests)\", \"Test reversing an URL from the *overridden* URLconf from inside\", \"Test reversing an URL from the *default* URLconf from inside\", \"test_urlconf (urlpatterns_reverse.tests.RequestURLconfTests)\", \"The URLconf is reset after each request.\", \"test_urlconf_overridden (urlpatterns_reverse.tests.RequestURLconfTests)\", \"Overriding request.urlconf with None will fall back to the default\", \"test_no_handler_exception (urlpatterns_reverse.tests.NoRootUrlConfTests)\", \"If the urls.py doesn't specify handlers, the defaults are used\", \"test_lazy_in_settings (urlpatterns_reverse.tests.ReverseLazySettingsTest)\"]", "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/urls/resolvers.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 2f13c476abe4ba787b6cb71131818341911f43cc\nAuthor: Nick Pope <nick.pope@flightdataservices.com>\nDate:   Wed Mar 24 22:29:33 2021 +0000\n\n    Fixed #31487 -- Added precision argument to Round().\n\ndiff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\nindex 3348256c74..ddae4c8efa 100644\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -65,6 +65,12 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n             \"SQLite doesn't have a constraint.\": {\n                 'model_fields.test_integerfield.PositiveIntegerFieldTests.test_negative_values',\n             },\n+            \"SQLite doesn't support negative precision for ROUND().\": {\n+                'db_functions.math.test_round.RoundTests.test_null_with_negative_precision',\n+                'db_functions.math.test_round.RoundTests.test_decimal_with_negative_precision',\n+                'db_functions.math.test_round.RoundTests.test_float_with_negative_precision',\n+                'db_functions.math.test_round.RoundTests.test_integer_with_negative_precision',\n+            },\n         }\n         if Database.sqlite_version_info < (3, 27):\n             skips.update({\ndiff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py\nindex 15915f4b7c..f939885263 100644\n--- a/django/db/models/functions/math.py\n+++ b/django/db/models/functions/math.py\n@@ -1,6 +1,6 @@\n import math\n \n-from django.db.models.expressions import Func\n+from django.db.models.expressions import Func, Value\n from django.db.models.fields import FloatField, IntegerField\n from django.db.models.functions import Cast\n from django.db.models.functions.mixins import (\n@@ -158,9 +158,23 @@ class Random(NumericOutputFieldMixin, Func):\n         return []\n \n \n-class Round(Transform):\n+class Round(FixDecimalInputMixin, Transform):\n     function = 'ROUND'\n     lookup_name = 'round'\n+    arity = None  # Override Transform's arity=1 to enable passing precision.\n+\n+    def __init__(self, expression, precision=0, **extra):\n+        super().__init__(expression, precision, **extra)\n+\n+    def as_sqlite(self, compiler, connection, **extra_context):\n+        precision = self.get_source_expressions()[1]\n+        if isinstance(precision, Value) and precision.value < 0:\n+            raise ValueError('SQLite does not support negative precision.')\n+        return super().as_sqlite(compiler, connection, **extra_context)\n+\n+    def _resolve_output_field(self):\n+        source = self.get_source_expressions()[0]\n+        return source.output_field\n \n \n class Sign(Transform):\ndiff --git a/docs/ref/models/database-functions.txt b/docs/ref/models/database-functions.txt\nindex b63b4cff4a..ac0c5ea4ec 100644\n--- a/docs/ref/models/database-functions.txt\n+++ b/docs/ref/models/database-functions.txt\n@@ -1147,18 +1147,19 @@ Returns a random value in the range ``0.0 \u2264 x < 1.0``.\n ``Round``\n ---------\n \n-.. class:: Round(expression, **extra)\n+.. class:: Round(expression, precision=0, **extra)\n \n-Rounds a numeric field or expression to the nearest integer. Whether half\n+Rounds a numeric field or expression to ``precision`` (must be an integer)\n+decimal places. By default, it rounds to the nearest integer. Whether half\n values are rounded up or down depends on the database.\n \n Usage example::\n \n     >>> from django.db.models.functions import Round\n-    >>> Vector.objects.create(x=5.4, y=-2.3)\n-    >>> vector = Vector.objects.annotate(x_r=Round('x'), y_r=Round('y')).get()\n+    >>> Vector.objects.create(x=5.4, y=-2.37)\n+    >>> vector = Vector.objects.annotate(x_r=Round('x'), y_r=Round('y', precision=1)).get()\n     >>> vector.x_r, vector.y_r\n-    (5.0, -2.0)\n+    (5.0, -2.4)\n \n It can also be registered as a transform. For example::\n \n@@ -1168,6 +1169,10 @@ It can also be registered as a transform. For example::\n     >>> # Get vectors whose round() is less than 20\n     >>> vectors = Vector.objects.filter(x__round__lt=20, y__round__lt=20)\n \n+.. versionchanged:: 4.0\n+\n+    The ``precision`` argument was added.\n+\n ``Sign``\n --------\n \ndiff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt\nindex f47b2fb5a0..d84e029ccd 100644\n--- a/docs/releases/4.0.txt\n+++ b/docs/releases/4.0.txt\n@@ -222,6 +222,10 @@ Models\n   whether the queryset contains the given object. This tries to perform the\n   query in the simplest and fastest way possible.\n \n+* The new ``precision`` argument of the\n+  :class:`Round() <django.db.models.functions.Round>` database function allows\n+  specifying the number of decimal places after rounding.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/tests/db_functions/math/test_round.py b/tests/db_functions/math/test_round.py\nindex 50345d4b5c..320d37fe4e 100644\n--- a/tests/db_functions/math/test_round.py\n+++ b/tests/db_functions/math/test_round.py\n@@ -1,7 +1,9 @@\n+import unittest\n from decimal import Decimal\n \n+from django.db import connection\n from django.db.models import DecimalField\n-from django.db.models.functions import Round\n+from django.db.models.functions import Pi, Round\n from django.test import TestCase\n from django.test.utils import register_lookup\n \n@@ -15,6 +17,16 @@ class RoundTests(TestCase):\n         obj = IntegerModel.objects.annotate(null_round=Round('normal')).first()\n         self.assertIsNone(obj.null_round)\n \n+    def test_null_with_precision(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_round=Round('normal', 5)).first()\n+        self.assertIsNone(obj.null_round)\n+\n+    def test_null_with_negative_precision(self):\n+        IntegerModel.objects.create()\n+        obj = IntegerModel.objects.annotate(null_round=Round('normal', -1)).first()\n+        self.assertIsNone(obj.null_round)\n+\n     def test_decimal(self):\n         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))\n         obj = DecimalModel.objects.annotate(n1_round=Round('n1'), n2_round=Round('n2')).first()\n@@ -23,6 +35,23 @@ class RoundTests(TestCase):\n         self.assertAlmostEqual(obj.n1_round, obj.n1, places=0)\n         self.assertAlmostEqual(obj.n2_round, obj.n2, places=0)\n \n+    def test_decimal_with_precision(self):\n+        DecimalModel.objects.create(n1=Decimal('-5.75'), n2=Pi())\n+        obj = DecimalModel.objects.annotate(\n+            n1_round=Round('n1', 1),\n+            n2_round=Round('n2', 5),\n+        ).first()\n+        self.assertIsInstance(obj.n1_round, Decimal)\n+        self.assertIsInstance(obj.n2_round, Decimal)\n+        self.assertAlmostEqual(obj.n1_round, obj.n1, places=1)\n+        self.assertAlmostEqual(obj.n2_round, obj.n2, places=5)\n+\n+    def test_decimal_with_negative_precision(self):\n+        DecimalModel.objects.create(n1=Decimal('365.25'))\n+        obj = DecimalModel.objects.annotate(n1_round=Round('n1', -1)).first()\n+        self.assertIsInstance(obj.n1_round, Decimal)\n+        self.assertEqual(obj.n1_round, 370)\n+\n     def test_float(self):\n         FloatModel.objects.create(f1=-27.55, f2=0.55)\n         obj = FloatModel.objects.annotate(f1_round=Round('f1'), f2_round=Round('f2')).first()\n@@ -31,6 +60,23 @@ class RoundTests(TestCase):\n         self.assertAlmostEqual(obj.f1_round, obj.f1, places=0)\n         self.assertAlmostEqual(obj.f2_round, obj.f2, places=0)\n \n+    def test_float_with_precision(self):\n+        FloatModel.objects.create(f1=-5.75, f2=Pi())\n+        obj = FloatModel.objects.annotate(\n+            f1_round=Round('f1', 1),\n+            f2_round=Round('f2', 5),\n+        ).first()\n+        self.assertIsInstance(obj.f1_round, float)\n+        self.assertIsInstance(obj.f2_round, float)\n+        self.assertAlmostEqual(obj.f1_round, obj.f1, places=1)\n+        self.assertAlmostEqual(obj.f2_round, obj.f2, places=5)\n+\n+    def test_float_with_negative_precision(self):\n+        FloatModel.objects.create(f1=365.25)\n+        obj = FloatModel.objects.annotate(f1_round=Round('f1', -1)).first()\n+        self.assertIsInstance(obj.f1_round, float)\n+        self.assertEqual(obj.f1_round, 370)\n+\n     def test_integer(self):\n         IntegerModel.objects.create(small=-20, normal=15, big=-1)\n         obj = IntegerModel.objects.annotate(\n@@ -45,9 +91,39 @@ class RoundTests(TestCase):\n         self.assertAlmostEqual(obj.normal_round, obj.normal, places=0)\n         self.assertAlmostEqual(obj.big_round, obj.big, places=0)\n \n+    def test_integer_with_precision(self):\n+        IntegerModel.objects.create(small=-5, normal=3, big=-100)\n+        obj = IntegerModel.objects.annotate(\n+            small_round=Round('small', 1),\n+            normal_round=Round('normal', 5),\n+            big_round=Round('big', 2),\n+        ).first()\n+        self.assertIsInstance(obj.small_round, int)\n+        self.assertIsInstance(obj.normal_round, int)\n+        self.assertIsInstance(obj.big_round, int)\n+        self.assertAlmostEqual(obj.small_round, obj.small, places=1)\n+        self.assertAlmostEqual(obj.normal_round, obj.normal, places=5)\n+        self.assertAlmostEqual(obj.big_round, obj.big, places=2)\n+\n+    def test_integer_with_negative_precision(self):\n+        IntegerModel.objects.create(normal=365)\n+        obj = IntegerModel.objects.annotate(normal_round=Round('normal', -1)).first()\n+        self.assertIsInstance(obj.normal_round, int)\n+        self.assertEqual(obj.normal_round, 370)\n+\n     def test_transform(self):\n         with register_lookup(DecimalField, Round):\n             DecimalModel.objects.create(n1=Decimal('2.0'), n2=Decimal('0'))\n             DecimalModel.objects.create(n1=Decimal('-1.0'), n2=Decimal('0'))\n             obj = DecimalModel.objects.filter(n1__round__gt=0).get()\n             self.assertEqual(obj.n1, Decimal('2.0'))\n+\n+    @unittest.skipUnless(\n+        connection.vendor == 'sqlite',\n+        \"SQLite doesn't support negative precision.\",\n+    )\n+    def test_unsupported_negative_precision(self):\n+        FloatModel.objects.create(f1=123.45)\n+        msg = 'SQLite does not support negative precision.'\n+        with self.assertRaisesMessage(ValueError, msg):\n+            FloatModel.objects.annotate(value=Round('f1', -1)).first()\ndiff --git a/tests/db_functions/migrations/0002_create_test_models.py b/tests/db_functions/migrations/0002_create_test_models.py\nindex aa3e247bd5..3699d67a6f 100644\n--- a/tests/db_functions/migrations/0002_create_test_models.py\n+++ b/tests/db_functions/migrations/0002_create_test_models.py\n@@ -56,7 +56,7 @@ class Migration(migrations.Migration):\n             name='DecimalModel',\n             fields=[\n                 ('n1', models.DecimalField(decimal_places=2, max_digits=6)),\n-                ('n2', models.DecimalField(decimal_places=2, max_digits=6)),\n+                ('n2', models.DecimalField(decimal_places=7, max_digits=9, null=True, blank=True)),\n             ],\n         ),\n         migrations.CreateModel(\ndiff --git a/tests/db_functions/models.py b/tests/db_functions/models.py\nindex 97584326aa..5c3379b44a 100644\n--- a/tests/db_functions/models.py\n+++ b/tests/db_functions/models.py\n@@ -42,7 +42,7 @@ class DTModel(models.Model):\n \n class DecimalModel(models.Model):\n     n1 = models.DecimalField(decimal_places=2, max_digits=6)\n-    n2 = models.DecimalField(decimal_places=2, max_digits=6)\n+    n2 = models.DecimalField(decimal_places=7, max_digits=9, null=True, blank=True)\n \n \n class IntegerModel(models.Model):\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..0912a82f14 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -59,9 +59,16 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n-            self.app_names, self.namespaces, self.route,\n+        if isinstance(self.func, functools.partial):\n+            func = repr(self.func)\n+        else:\n+            func = self._func_path\n+        return (\n+            'ResolverMatch(func=%s, args=%r, kwargs=%r, url_name=%r, '\n+            'app_names=%r, namespaces=%r, route=%r)' % (\n+                func, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n         )\n \n \nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (3.8.1)\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (2024.2)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.2.10->Django==4.0) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.0-0.editable-py3-none-any.whl size=25609 sha256=be98e5c024213a48fc7bde1d6d63b1eb412b277dc7dac44eeed52123ad7c3688\n  Stored in directory: /tmp/pip-ephem-wheel-cache-lye793zp/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.0\n    Uninstalling Django-4.0:\n      Successfully uninstalled Django-4.0\nSuccessfully installed Django-4.0\nTesting against Django installed in '/testbed/django'\nImporting application urlpatterns_reverse\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles, urlpatterns_reverse\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]