[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-13773", "base_commit": "7121bdf1facdd90d05b6994b4c2e5b2865a4638a", "patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -1973,6 +1973,10 @@ def __div__(self, other):\n \n     @call_highest_priority('__rmatmul__')\n     def __matmul__(self, other):\n+        other = _matrixify(other)\n+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):\n+            return NotImplemented\n+\n         return self.__mul__(other)\n \n     @call_highest_priority('__rmul__')\n@@ -2066,6 +2070,10 @@ def __radd__(self, other):\n \n     @call_highest_priority('__matmul__')\n     def __rmatmul__(self, other):\n+        other = _matrixify(other)\n+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):\n+            return NotImplemented\n+\n         return self.__rmul__(other)\n \n     @call_highest_priority('__mul__')\n", "test_patch": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -674,6 +674,30 @@ def test_multiplication():\n         assert c[1, 0] == 3*5\n         assert c[1, 1] == 0\n \n+def test_matmul():\n+    a = Matrix([[1, 2], [3, 4]])\n+\n+    assert a.__matmul__(2) == NotImplemented\n+\n+    assert a.__rmatmul__(2) == NotImplemented\n+\n+    #This is done this way because @ is only supported in Python 3.5+\n+    #To check 2@a case\n+    try:\n+        eval('2 @ a')\n+    except SyntaxError:\n+        pass\n+    except TypeError:  #TypeError is raised in case of NotImplemented is returned\n+        pass\n+\n+    #Check a@2 case\n+    try:\n+        eval('a @ 2')\n+    except SyntaxError:\n+        pass\n+    except TypeError:  #TypeError is raised in case of NotImplemented is returned\n+        pass\n+\n def test_power():\n     raises(NonSquareMatrixError, lambda: Matrix((1, 2))**2)\n \n", "problem_statement": "@ (__matmul__) should fail if one argument is not a matrix\n```\r\n>>> A = Matrix([[1, 2], [3, 4]])\r\n>>> B = Matrix([[2, 3], [1, 2]])\r\n>>> A@B\r\nMatrix([\r\n[ 4,  7],\r\n[10, 17]])\r\n>>> 2@B\r\nMatrix([\r\n[4, 6],\r\n[2, 4]])\r\n```\r\n\r\nRight now `@` (`__matmul__`) just copies `__mul__`, but it should actually only work if the multiplication is actually a matrix multiplication. \r\n\r\nThis is also how NumPy works\r\n\r\n```\r\n>>> import numpy as np\r\n>>> a = np.array([[1, 2], [3, 4]])\r\n>>> 2*a\r\narray([[2, 4],\r\n       [6, 8]])\r\n>>> 2@a\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nValueError: Scalar operands are not allowed, use '*' instead\r\n```\n", "hints_text": "Note to anyone fixing this: `@`/`__matmul__` only works in Python 3.5+. \nI would like to work on this issue.", "created_at": "2017-12-19T10:44:38Z", "version": "1.1", "FAIL_TO_PASS": "[\"test_matmul\"]", "PASS_TO_PASS": "[\"test__MinimalMatrix\", \"test_vec\", \"test_tolist\", \"test_row_col_del\", \"test_get_diag_blocks1\", \"test_get_diag_blocks2\", \"test_shape\", \"test_reshape\", \"test_row_col\", \"test_row_join\", \"test_col_join\", \"test_row_insert\", \"test_col_insert\", \"test_extract\", \"test_hstack\", \"test_vstack\", \"test_atoms\", \"test_free_symbols\", \"test_has\", \"test_is_anti_symmetric\", \"test_diagonal_symmetrical\", \"test_is_hermitian\", \"test_is_Identity\", \"test_is_symbolic\", \"test_is_upper\", \"test_is_lower\", \"test_is_square\", \"test_is_symmetric\", \"test_is_hessenberg\", \"test_is_zero\", \"test_values\", \"test_adjoint\", \"test_as_real_imag\", \"test_conjugate\", \"test_doit\", \"test_evalf\", \"test_expand\", \"test_replace\", \"test_replace_map\", \"test_simplify\", \"test_subs\", \"test_trace\", \"test_xreplace\", \"test_permute\", \"test_abs\", \"test_add\", \"test_power\", \"test_neg\", \"test_sub\", \"test_det\", \"test_adjugate\", \"test_cofactor_and_minors\", \"test_charpoly\", \"test_row_op\", \"test_col_op\", \"test_is_echelon\", \"test_echelon_form\", \"test_rref\", \"test_eye\", \"test_ones\", \"test_zeros\", \"test_diag\", \"test_jordan_block\", \"test_columnspace\", \"test_rowspace\", \"test_nullspace\", \"test_eigenvals\", \"test_singular_values\", \"test_integrate\"]", "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   sympy/matrices/common.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 7121bdf1facdd90d05b6994b4c2e5b2865a4638a\nMerge: 7d0231704a 98a3f70b3b\nAuthor: Chris Smith <smichr@gmail.com>\nDate:   Tue Dec 26 08:24:02 2017 -0600\n\n    Merge pull request #13796 from ArighnaIITG/13699_issue2\n    \n    Used fuzzy_bool instead of ternary sort.\n\ndiff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 379a2917aa..ea6b83c425 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -1973,6 +1973,10 @@ def __div__(self, other):\n \n     @call_highest_priority('__rmatmul__')\n     def __matmul__(self, other):\n+        other = _matrixify(other)\n+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):\n+            return NotImplemented\n+\n         return self.__mul__(other)\n \n     @call_highest_priority('__rmul__')\n@@ -2068,6 +2072,10 @@ def __radd__(self, other):\n \n     @call_highest_priority('__matmul__')\n     def __rmatmul__(self, other):\n+        other = _matrixify(other)\n+        if not getattr(other, 'is_Matrix', False) and not getattr(other, 'is_MatrixLike', False):\n+            return NotImplemented\n+\n         return self.__rmul__(other)\n \n     @call_highest_priority('__mul__')\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)\nInstalling collected packages: sympy\n  Attempting uninstall: sympy\n    Found existing installation: sympy 1.1.2.dev0\n    Uninstalling sympy-1.1.2.dev0:\n      Successfully uninstalled sympy-1.1.2.dev0\n  Running setup.py develop for sympy\nSuccessfully installed sympy\n============================= test process starts ==============================\nexecutable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]\narchitecture:       64-bit\ncache:              no\nground types:       python \nnumpy:              None\nrandom seed:        70897923\nhash randomization: off\n\nsympy/matrices/tests/test_commonmatrix.py[83] \ntest__MinimalMatrix ok\ntest_vec ok\ntest_tolist ok\ntest_row_col_del ok\ntest_get_diag_blocks1 ok\ntest_get_diag_blocks2 ok\ntest_shape ok\ntest_reshape ok\ntest_row_col ok\ntest_row_join ok\ntest_col_join ok\ntest_row_insert ok\ntest_col_insert ok\ntest_extract ok\ntest_hstack ok\ntest_vstack ok\ntest_atoms ok\ntest_free_symbols ok\ntest_has ok\ntest_is_anti_symmetric ok\ntest_diagonal_symmetrical ok\ntest_is_hermitian ok\ntest_is_Identity ok\ntest_is_symbolic ok\ntest_is_upper ok\ntest_is_lower ok\ntest_is_square ok\ntest_is_symmetric ok\ntest_is_hessenberg ok\ntest_is_zero ok\ntest_values ok\ntest_applyfunc E\ntest_adjoint ok\ntest_as_real_imag ok\ntest_conjugate ok\ntest_doit ok\ntest_evalf ok\ntest_expand ok\ntest_refine E\ntest_replace ok\ntest_replace_map ok\ntest_simplify ok\ntest_subs ok\ntest_trace ok\ntest_xreplace ok\ntest_permute ok\ntest_abs ok\ntest_add ok\ntest_multiplication E\ntest_matmul ok\ntest_power ok\ntest_neg ok\ntest_sub ok\ntest_div E\ntest_det ok\ntest_adjugate ok\ntest_cofactor_and_minors ok\ntest_charpoly ok\ntest_row_op ok\ntest_col_op ok\ntest_is_echelon ok\ntest_echelon_form ok\ntest_rref ok\ntest_eye ok\ntest_ones ok\ntest_zeros ok\ntest_diag ok\ntest_jordan_block ok\ntest_columnspace ok\ntest_rowspace ok\ntest_nullspace ok\ntest_eigenvals ok\ntest_eigenvects E\ntest_left_eigenvects E\ntest_diagonalize E\ntest_is_diagonalizable E\ntest_jordan_form E\ntest_singular_values ok\ntest_diff f\ntest_integrate ok\ntest_jacobian2 E\ntest_limit E\ntest_issue_13774 E                                                        [FAIL]\n\n\n________________________________________________________________________________\n___________ sympy/matrices/tests/test_commonmatrix.py:test_applyfunc ___________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 425, in test_applyfunc\n    assert m0.applyfunc(lambda x: 2*x) == eye(3)*2\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 2026, in __mul__\n    if not isinstance(other, collections.Iterable):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n____________ sympy/matrices/tests/test_commonmatrix.py:test_refine _____________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 490, in test_refine\n    m1 = m0.refine(Q.real(x) & Q.real(y))\n  File \"/testbed/sympy/matrices/common.py\", line 1751, in refine\n    return self.applyfunc(lambda x: refine(x, assumptions))\n  File \"/testbed/sympy/matrices/common.py\", line 1547, in applyfunc\n    return self._eval_applyfunc(f)\n  File \"/testbed/sympy/matrices/common.py\", line 1487, in _eval_applyfunc\n    out = self._new(self.rows, self.cols, [f(x) for x in self])\n  File \"/testbed/sympy/matrices/common.py\", line 1487, in <listcomp>\n    out = self._new(self.rows, self.cols, [f(x) for x in self])\n  File \"/testbed/sympy/matrices/common.py\", line 1751, in <lambda>\n    return self.applyfunc(lambda x: refine(x, assumptions))\n  File \"/testbed/sympy/assumptions/refine.py\", line 28, in refine\n    args = [refine(arg, assumptions) for arg in expr.args]\n  File \"/testbed/sympy/assumptions/refine.py\", line 28, in <listcomp>\n    args = [refine(arg, assumptions) for arg in expr.args]\n  File \"/testbed/sympy/assumptions/refine.py\", line 39, in refine\n    new_expr = handler(expr, assumptions)\n  File \"/testbed/sympy/assumptions/refine.py\", line 67, in refine_abs\n    if ask(Q.real(arg), assumptions) and \\\n  File \"/testbed/sympy/assumptions/ask.py\", line 1247, in ask\n    from sympy.assumptions.satask import satask\n  File \"/testbed/sympy/assumptions/satask.py\", line 9, in <module>\n    from sympy.assumptions.sathandlers import fact_registry\n  File \"/testbed/sympy/assumptions/sathandlers.py\", line 3, in <module>\n    from collections import MutableMapping, defaultdict\n  File \"<frozen importlib._bootstrap>\", line 1055, in _handle_fromlist\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n________ sympy/matrices/tests/test_commonmatrix.py:test_multiplication _________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 617, in test_multiplication\n    raises(TypeError, lambda: a*{})\n  File \"/testbed/sympy/utilities/pytest.py\", line 78, in raises\n    code()\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 617, in <lambda>\n    raises(TypeError, lambda: a*{})\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 2026, in __mul__\n    if not isinstance(other, collections.Iterable):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n______________ sympy/matrices/tests/test_commonmatrix.py:test_div ______________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 723, in test_div\n    assert n/2 == ArithmeticOnlyMatrix(1, 2, [1/2, 2/2])\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 2116, in __truediv__\n    return self.__div__(other)\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 1972, in __div__\n    return self * (S.One / other)\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 2026, in __mul__\n    if not isinstance(other, collections.Iterable):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n__________ sympy/matrices/tests/test_commonmatrix.py:test_eigenvects ___________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 1225, in test_eigenvects\n    vecs = M.eigenvects()\n  File \"/testbed/sympy/matrices/matrices.py\", line 1190, in eigenvects\n    ret = [(val, mult, eigenspace(val)) for val, mult in\n  File \"/testbed/sympy/matrices/matrices.py\", line 1190, in <listcomp>\n    ret = [(val, mult, eigenspace(val)) for val, mult in\n  File \"/testbed/sympy/matrices/matrices.py\", line 1175, in eigenspace\n    m = mat - self.eye(mat.rows) * eigenval\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 2026, in __mul__\n    if not isinstance(other, collections.Iterable):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n________ sympy/matrices/tests/test_commonmatrix.py:test_left_eigenvects ________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 1234, in test_left_eigenvects\n    vecs = M.left_eigenvects()\n  File \"/testbed/sympy/matrices/matrices.py\", line 1503, in left_eigenvects\n    eigs = self.transpose().eigenvects(**flags)\n  File \"/testbed/sympy/matrices/matrices.py\", line 1190, in eigenvects\n    ret = [(val, mult, eigenspace(val)) for val, mult in\n  File \"/testbed/sympy/matrices/matrices.py\", line 1190, in <listcomp>\n    ret = [(val, mult, eigenspace(val)) for val, mult in\n  File \"/testbed/sympy/matrices/matrices.py\", line 1175, in eigenspace\n    m = mat - self.eye(mat.rows) * eigenval\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 2026, in __mul__\n    if not isinstance(other, collections.Iterable):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n__________ sympy/matrices/tests/test_commonmatrix.py:test_diagonalize __________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 1241, in test_diagonalize\n    raises(MatrixError, lambda: m.diagonalize(reals_only=True))\n  File \"/testbed/sympy/utilities/pytest.py\", line 78, in raises\n    code()\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 1241, in <lambda>\n    raises(MatrixError, lambda: m.diagonalize(reals_only=True))\n  File \"/testbed/sympy/matrices/matrices.py\", line 1083, in diagonalize\n    if not self.is_diagonalizable(reals_only=reals_only, clear_cache=False):\n  File \"/testbed/sympy/matrices/matrices.py\", line 1281, in is_diagonalizable\n    self._cache_eigenvects = self.eigenvects(simplify=True)\n  File \"/testbed/sympy/matrices/matrices.py\", line 1190, in eigenvects\n    ret = [(val, mult, eigenspace(val)) for val, mult in\n  File \"/testbed/sympy/matrices/matrices.py\", line 1190, in <listcomp>\n    ret = [(val, mult, eigenspace(val)) for val, mult in\n  File \"/testbed/sympy/matrices/matrices.py\", line 1175, in eigenspace\n    m = mat - self.eye(mat.rows) * eigenval\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 2026, in __mul__\n    if not isinstance(other, collections.Iterable):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n_______ sympy/matrices/tests/test_commonmatrix.py:test_is_diagonalizable _______\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 1261, in test_is_diagonalizable\n    assert m.is_diagonalizable()\n  File \"/testbed/sympy/matrices/matrices.py\", line 1281, in is_diagonalizable\n    self._cache_eigenvects = self.eigenvects(simplify=True)\n  File \"/testbed/sympy/matrices/matrices.py\", line 1190, in eigenvects\n    ret = [(val, mult, eigenspace(val)) for val, mult in\n  File \"/testbed/sympy/matrices/matrices.py\", line 1190, in <listcomp>\n    ret = [(val, mult, eigenspace(val)) for val, mult in\n  File \"/testbed/sympy/matrices/matrices.py\", line 1175, in eigenspace\n    m = mat - self.eye(mat.rows) * eigenval\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 2026, in __mul__\n    if not isinstance(other, collections.Iterable):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n__________ sympy/matrices/tests/test_commonmatrix.py:test_jordan_form __________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 1282, in test_jordan_form\n    P, J = m.jordan_form()\n  File \"/testbed/sympy/matrices/matrices.py\", line 1423, in jordan_form\n    chain = nullity_chain(eig)\n  File \"/testbed/sympy/matrices/matrices.py\", line 1366, in nullity_chain\n    nullity = cols - eig_mat(val, 1).rank()\n  File \"/testbed/sympy/matrices/matrices.py\", line 1355, in eig_mat\n    mat_cache[(val, pow)] = (mat - val*self.eye(self.rows))**pow\n  File \"/testbed/sympy/core/numbers.py\", line 2095, in __mul__\n    return Rational.__mul__(self, other)\n  File \"/testbed/sympy/core/decorators.py\", line 91, in __sympifyit_wrapper\n    return func(a, b)\n  File \"/testbed/sympy/core/numbers.py\", line 1619, in __mul__\n    return Number.__mul__(self, other)\n  File \"/testbed/sympy/core/decorators.py\", line 91, in __sympifyit_wrapper\n    return func(a, b)\n  File \"/testbed/sympy/core/numbers.py\", line 676, in __mul__\n    return AtomicExpr.__mul__(self, other)\n  File \"/testbed/sympy/core/decorators.py\", line 91, in __sympifyit_wrapper\n    return func(a, b)\n  File \"/testbed/sympy/core/decorators.py\", line 131, in binary_op_wrapper\n    return f(self)\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 2098, in __rmul__\n    if not isinstance(other, collections.Iterable):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n___________ sympy/matrices/tests/test_commonmatrix.py:test_jacobian2 ___________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 1356, in test_jacobian2\n    assert X.jacobian(Y) == J\n  File \"/testbed/sympy/matrices/matrices.py\", line 1651, in jacobian\n    return self._new(m, n, lambda j, i: self[j].diff(X[i]))\n  File \"/testbed/sympy/matrices/common.py\", line 2171, in _new\n    return cls(*args, **kwargs)\n  File \"/testbed/sympy/matrices/common.py\", line 2176, in __init__\n    mat = list(mat(i, j) for i in range(rows) for j in range(cols))\n  File \"/testbed/sympy/matrices/common.py\", line 2176, in <genexpr>\n    mat = list(mat(i, j) for i in range(rows) for j in range(cols))\n  File \"/testbed/sympy/matrices/matrices.py\", line 1651, in <lambda>\n    return self._new(m, n, lambda j, i: self[j].diff(X[i]))\n  File \"/testbed/sympy/core/expr.py\", line 3008, in diff\n    return Derivative(self, *new_symbols, **assumptions)\n  File \"/testbed/sympy/core/function.py\", line 1241, in __new__\n    if isinstance(v, (collections.Iterable, Tuple, MatrixCommon, NDimArray)):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n_____________ sympy/matrices/tests/test_commonmatrix.py:test_limit _____________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 1366, in test_limit\n    assert m.limit(x, 5) == Matrix(2, 1, [S(1)/5, y])\n  File \"/testbed/sympy/matrices/matrices.py\", line 1674, in limit\n    return self.applyfunc(lambda x: x.limit(*args))\n  File \"/testbed/sympy/matrices/common.py\", line 1547, in applyfunc\n    return self._eval_applyfunc(f)\n  File \"/testbed/sympy/matrices/common.py\", line 1487, in _eval_applyfunc\n    out = self._new(self.rows, self.cols, [f(x) for x in self])\n  File \"/testbed/sympy/matrices/common.py\", line 1487, in <listcomp>\n    out = self._new(self.rows, self.cols, [f(x) for x in self])\n  File \"/testbed/sympy/matrices/matrices.py\", line 1674, in <lambda>\n    return self.applyfunc(lambda x: x.limit(*args))\n  File \"/testbed/sympy/core/expr.py\", line 2871, in limit\n    return limit(self, x, xlim, dir)\n  File \"/testbed/sympy/series/limits.py\", line 68, in limit\n    return Limit(e, z, z0, dir).doit(deep=False)\n  File \"/testbed/sympy/series/limits.py\", line 209, in doit\n    r = gruntz(e, z, z0, dir)\n  File \"/testbed/sympy/series/gruntz.py\", line 658, in gruntz\n    r = limitinf(e0, z)\n  File \"/testbed/sympy/series/gruntz.py\", line 428, in limitinf\n    c0, e0 = mrv_leadterm(e, x)\n  File \"/testbed/sympy/series/gruntz.py\", line 487, in mrv_leadterm\n    Omega, exps = mrv(e, x)\n  File \"/testbed/sympy/series/gruntz.py\", line 246, in mrv\n    e = powsimp(e, deep=True, combine='exp')\n  File \"/testbed/sympy/simplify/powsimp.py\", line 118, in powsimp\n    expr = expr.func(*[recurse(w) for w in expr.args])\n  File \"/testbed/sympy/simplify/powsimp.py\", line 118, in <listcomp>\n    expr = expr.func(*[recurse(w) for w in expr.args])\n  File \"/testbed/sympy/simplify/powsimp.py\", line 109, in recurse\n    return powsimp(arg, _deep, _combine, _force, _measure)\n  File \"/testbed/sympy/simplify/powsimp.py\", line 118, in powsimp\n    expr = expr.func(*[recurse(w) for w in expr.args])\n  File \"/testbed/sympy/simplify/powsimp.py\", line 118, in <listcomp>\n    expr = expr.func(*[recurse(w) for w in expr.args])\n  File \"/testbed/sympy/simplify/powsimp.py\", line 109, in recurse\n    return powsimp(arg, _deep, _combine, _force, _measure)\n  File \"/testbed/sympy/simplify/powsimp.py\", line 121, in powsimp\n    return recurse(expr*_y, deep=False)/_y\n  File \"/testbed/sympy/core/decorators.py\", line 91, in __sympifyit_wrapper\n    return func(a, b)\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/core/expr.py\", line 177, in __div__\n    return Mul(self, Pow(other, S.NegativeOne))\n  File \"/testbed/sympy/core/operations.py\", line 42, in __new__\n    c_part, nc_part, order_symbols = cls.flatten(args)\n  File \"/testbed/sympy/core/mul.py\", line 184, in flatten\n    if not a.is_zero and a.is_Rational:\n  File \"/testbed/sympy/core/assumptions.py\", line 248, in getit\n    return _ask(fact, self)\n  File \"/testbed/sympy/core/assumptions.py\", line 303, in _ask\n    _ask(pk, obj)\n  File \"/testbed/sympy/core/assumptions.py\", line 303, in _ask\n    _ask(pk, obj)\n  File \"/testbed/sympy/core/assumptions.py\", line 303, in _ask\n    _ask(pk, obj)\n  File \"/testbed/sympy/core/assumptions.py\", line 291, in _ask\n    a = evaluate(obj)\n  File \"/testbed/sympy/core/mul.py\", line 1084, in _eval_is_rational\n    r = _fuzzy_group((a.is_rational for a in self.args), quick_exit=True)\n  File \"/testbed/sympy/core/logic.py\", line 78, in _fuzzy_group\n    for a in args:\n  File \"/testbed/sympy/core/mul.py\", line 1084, in <genexpr>\n    r = _fuzzy_group((a.is_rational for a in self.args), quick_exit=True)\n  File \"/testbed/sympy/core/assumptions.py\", line 248, in getit\n    return _ask(fact, self)\n  File \"/testbed/sympy/core/assumptions.py\", line 303, in _ask\n    _ask(pk, obj)\n  File \"/testbed/sympy/core/assumptions.py\", line 303, in _ask\n    _ask(pk, obj)\n  File \"/testbed/sympy/core/assumptions.py\", line 291, in _ask\n    a = evaluate(obj)\n  File \"/testbed/sympy/core/power.py\", line 1130, in _eval_is_algebraic\n    if self.base.is_zero or _is_one(self.base):\n  File \"/testbed/sympy/core/power.py\", line 1125, in _is_one\n    return (expr - 1).is_zero\n  File \"/testbed/sympy/core/assumptions.py\", line 248, in getit\n    return _ask(fact, self)\n  File \"/testbed/sympy/core/assumptions.py\", line 303, in _ask\n    _ask(pk, obj)\n  File \"/testbed/sympy/core/assumptions.py\", line 303, in _ask\n    _ask(pk, obj)\n  File \"/testbed/sympy/core/assumptions.py\", line 303, in _ask\n    _ask(pk, obj)\n  [Previous line repeated 1 more time]\n  File \"/testbed/sympy/core/assumptions.py\", line 291, in _ask\n    a = evaluate(obj)\n  File \"/testbed/sympy/core/add.py\", line 522, in _eval_is_imaginary\n    if b.is_zero:\n  File \"/testbed/sympy/core/assumptions.py\", line 248, in getit\n    return _ask(fact, self)\n  File \"/testbed/sympy/core/assumptions.py\", line 303, in _ask\n    _ask(pk, obj)\n  File \"/testbed/sympy/core/assumptions.py\", line 291, in _ask\n    a = evaluate(obj)\n  File \"/testbed/sympy/core/add.py\", line 522, in _eval_is_imaginary\n    if b.is_zero:\n  File \"/testbed/sympy/core/assumptions.py\", line 248, in getit\n    return _ask(fact, self)\n  File \"/testbed/sympy/core/assumptions.py\", line 303, in _ask\n    _ask(pk, obj)\n  File \"/testbed/sympy/core/assumptions.py\", line 291, in _ask\n    a = evaluate(obj)\n  File \"/testbed/sympy/core/add.py\", line 592, in _eval_is_positive\n    if s != self and s.is_positive and a.is_nonnegative:\n  File \"/testbed/sympy/core/assumptions.py\", line 248, in getit\n    return _ask(fact, self)\n  File \"/testbed/sympy/core/assumptions.py\", line 291, in _ask\n    a = evaluate(obj)\n  File \"/testbed/sympy/core/add.py\", line 595, in _eval_is_positive\n    v = _monotonic_sign(self)\n  File \"/testbed/sympy/core/exprtools.py\", line 120, in _monotonic_sign\n    d = self.diff(x)\n  File \"/testbed/sympy/core/expr.py\", line 3008, in diff\n    return Derivative(self, *new_symbols, **assumptions)\n  File \"/testbed/sympy/core/function.py\", line 1241, in __new__\n    if isinstance(v, (collections.Iterable, Tuple, MatrixCommon, NDimArray)):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n________________________________________________________________________________\n__________ sympy/matrices/tests/test_commonmatrix.py:test_issue_13774 __________\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 1371, in test_issue_13774\n    raises(TypeError, lambda: M*v)\n  File \"/testbed/sympy/utilities/pytest.py\", line 78, in raises\n    code()\n  File \"/testbed/sympy/matrices/tests/test_commonmatrix.py\", line 1371, in <lambda>\n    raises(TypeError, lambda: M*v)\n  File \"/testbed/sympy/core/decorators.py\", line 132, in binary_op_wrapper\n    return func(self, other)\n  File \"/testbed/sympy/matrices/common.py\", line 2026, in __mul__\n    if not isinstance(other, collections.Iterable):\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/collections/__init__.py\", line 62, in __getattr__\n    warnings.warn(\"Using or importing the ABCs from 'collections' instead \"\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\n\n tests finished: 70 passed, 1 expected to fail, 12 exceptions, in 3.50 seconds =\nDO *NOT* COMMIT!\n", {"sympy/matrices/tests/test_commonmatrix.py:test_applyfunc": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_refine": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_multiplication": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_div": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_eigenvects": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_left_eigenvects": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_diagonalize": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_is_diagonalizable": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_jordan_form": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_jacobian2": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_limit": "FAILED", "sympy/matrices/tests/test_commonmatrix.py:test_issue_13774": "FAILED", "test__MinimalMatrix": "PASSED", "test_vec": "PASSED", "test_tolist": "PASSED", "test_row_col_del": "PASSED", "test_get_diag_blocks1": "PASSED", "test_get_diag_blocks2": "PASSED", "test_shape": "PASSED", "test_reshape": "PASSED", "test_row_col": "PASSED", "test_row_join": "PASSED", "test_col_join": "PASSED", "test_row_insert": "PASSED", "test_col_insert": "PASSED", "test_extract": "PASSED", "test_hstack": "PASSED", "test_vstack": "PASSED", "test_atoms": "PASSED", "test_free_symbols": "PASSED", "test_has": "PASSED", "test_is_anti_symmetric": "PASSED", "test_diagonal_symmetrical": "PASSED", "test_is_hermitian": "PASSED", "test_is_Identity": "PASSED", "test_is_symbolic": "PASSED", "test_is_upper": "PASSED", "test_is_lower": "PASSED", "test_is_square": "PASSED", "test_is_symmetric": "PASSED", "test_is_hessenberg": "PASSED", "test_is_zero": "PASSED", "test_values": "PASSED", "test_applyfunc": "ERROR", "test_adjoint": "PASSED", "test_as_real_imag": "PASSED", "test_conjugate": "PASSED", "test_doit": "PASSED", "test_evalf": "PASSED", "test_expand": "PASSED", "test_refine": "ERROR", "test_replace": "PASSED", "test_replace_map": "PASSED", "test_simplify": "PASSED", "test_subs": "PASSED", "test_trace": "PASSED", "test_xreplace": "PASSED", "test_permute": "PASSED", "test_abs": "PASSED", "test_add": "PASSED", "test_multiplication": "ERROR", "test_matmul": "PASSED", "test_power": "PASSED", "test_neg": "PASSED", "test_sub": "PASSED", "test_div": "ERROR", "test_det": "PASSED", "test_adjugate": "PASSED", "test_cofactor_and_minors": "PASSED", "test_charpoly": "PASSED", "test_row_op": "PASSED", "test_col_op": "PASSED", "test_is_echelon": "PASSED", "test_echelon_form": "PASSED", "test_rref": "PASSED", "test_eye": "PASSED", "test_ones": "PASSED", "test_zeros": "PASSED", "test_diag": "PASSED", "test_jordan_block": "PASSED", "test_columnspace": "PASSED", "test_rowspace": "PASSED", "test_nullspace": "PASSED", "test_eigenvals": "PASSED", "test_eigenvects": "ERROR", "test_left_eigenvects": "ERROR", "test_diagonalize": "ERROR", "test_is_diagonalizable": "ERROR", "test_jordan_form": "ERROR", "test_singular_values": "PASSED", "test_integrate": "PASSED", "test_jacobian2": "ERROR", "test_limit": "ERROR"}]