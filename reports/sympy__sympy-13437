[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-13437", "base_commit": "674afc619d7f5c519b6a5393a8b0532a131e57e0", "patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -424,6 +424,15 @@ def _bell_incomplete_poly(n, k, symbols):\n \n     @classmethod\n     def eval(cls, n, k_sym=None, symbols=None):\n+        if n is S.Infinity:\n+            if k_sym is None:\n+                return S.Infinity\n+            else:\n+                raise ValueError(\"Bell polynomial is not defined\")\n+\n+        if n.is_negative or n.is_integer is False:\n+            raise ValueError(\"a non-negative integer expected\")\n+\n         if n.is_Integer and n.is_nonnegative:\n             if k_sym is None:\n                 return Integer(cls._bell(int(n)))\n", "test_patch": "diff --git a/sympy/functions/combinatorial/tests/test_comb_numbers.py b/sympy/functions/combinatorial/tests/test_comb_numbers.py\n--- a/sympy/functions/combinatorial/tests/test_comb_numbers.py\n+++ b/sympy/functions/combinatorial/tests/test_comb_numbers.py\n@@ -73,6 +73,11 @@ def test_bell():\n     assert bell(1, x) == x\n     assert bell(2, x) == x**2 + x\n     assert bell(5, x) == x**5 + 10*x**4 + 25*x**3 + 15*x**2 + x\n+    assert bell(oo) == S.Infinity\n+    raises(ValueError, lambda: bell(oo, x))\n+\n+    raises(ValueError, lambda: bell(-1))\n+    raises(ValueError, lambda: bell(S(1)/2))\n \n     X = symbols('x:6')\n     # X = (x0, x1, .. x5)\n@@ -99,9 +104,9 @@ def test_bell():\n     for i in [0, 2, 3, 7, 13, 42, 55]:\n         assert bell(i).evalf() == bell(n).rewrite(Sum).evalf(subs={n: i})\n \n-    # For negative numbers, the formula does not hold\n-    m = Symbol('m', integer=True)\n-    assert bell(-1).evalf() == bell(m).rewrite(Sum).evalf(subs={m: -1})\n+    # issue 9184\n+    n = Dummy('n')\n+    assert bell(n).limit(n, S.Infinity) == S.Infinity\n \n \n def test_harmonic():\n", "problem_statement": "bell(n).limit(n, oo) should be oo rather than bell(oo)\n`bell(n).limit(n,oo)` should take the value infinity, but the current output is `bell(oo)`. As the Bell numbers represent the number of partitions of a set, it seems natural that `bell(oo)` should be able to be evaluated rather than be returned unevaluated. This issue is also in line with the recent fixes to the corresponding limit for the Fibonacci numbers and Lucas numbers.\n\n```\nfrom sympy import *\nn = symbols('n')\nbell(n).limit(n,oo)\n\nOutput:\nbell(oo)\n```\n\nI'm new to Sympy, so I'd appreciate the opportunity to fix this bug myself if that's alright.\n\n", "hints_text": "", "created_at": "2017-10-12T18:21:19Z", "version": "1.1", "FAIL_TO_PASS": "[\"test_bell\"]", "PASS_TO_PASS": "[\"test_bernoulli\", \"test_fibonacci\", \"test_harmonic\", \"test_harmonic_rational\", \"test_harmonic_evalf\", \"test_harmonic_rewrite_polygamma\", \"test_harmonic_rewrite_sum\", \"test_euler\", \"test_euler_odd\", \"test_euler_polynomials\", \"test_euler_polynomial_rewrite\", \"test_catalan\", \"test_genocchi\", \"test_nC_nP_nT\", \"test_issue_8496\"]", "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   sympy/functions/combinatorial/numbers.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 674afc619d7f5c519b6a5393a8b0532a131e57e0\nMerge: fe63969b5c 20520225cc\nAuthor: Chris Smith <smichr@gmail.com>\nDate:   Wed Oct 11 18:23:50 2017 -0500\n\n    Merge pull request #13415 from smichr/solvesym\n    \n    recast solver non-Symbols to symbols; linsolve mods\n\ndiff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\nindex 896729ac87..9e2800dfbd 100644\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -434,6 +434,15 @@ def _bell_incomplete_poly(n, k, symbols):\n \n     @classmethod\n     def eval(cls, n, k_sym=None, symbols=None):\n+        if n is S.Infinity:\n+            if k_sym is None:\n+                return S.Infinity\n+            else:\n+                raise ValueError(\"Bell polynomial is not defined\")\n+\n+        if n.is_negative or n.is_integer is False:\n+            raise ValueError(\"a non-negative integer expected\")\n+\n         if n.is_Integer and n.is_nonnegative:\n             if k_sym is None:\n                 return Integer(cls._bell(int(n)))\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)\nInstalling collected packages: sympy\n  Attempting uninstall: sympy\n    Found existing installation: sympy 1.1.2.dev0\n    Uninstalling sympy-1.1.2.dev0:\n      Successfully uninstalled sympy-1.1.2.dev0\n  Running setup.py develop for sympy\nSuccessfully installed sympy\n============================= test process starts ==============================\nexecutable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]\narchitecture:       64-bit\ncache:              no\nground types:       python \nnumpy:              None\nrandom seed:        13432841\nhash randomization: off\n\nsympy/functions/combinatorial/tests/test_comb_numbers.py[20] \ntest_bernoulli ok\ntest_fibonacci ok\ntest_bell ok\ntest_harmonic ok\ntest_harmonic_rational ok\ntest_harmonic_evalf ok\ntest_harmonic_rewrite_polygamma ok\ntest_harmonic_limit_fail f\ntest_harmonic_rewrite_sum_fail f\ntest_harmonic_rewrite_sum ok\ntest_euler ok\ntest_euler_failing f\ntest_euler_odd ok\ntest_euler_polynomials ok\ntest_euler_polynomial_rewrite ok\ntest_catalan ok\ntest_genocchi ok\ntest_nC_nP_nT ok\ntest_issue_8496 ok\ntest_issue_8601 ok                                                          [OK]\n\n\n________________________________ slowest tests _________________________________\ntest_bell - Took 270.667 seconds\n======= tests finished: 17 passed, 3 expected to fail, in 278.58 seconds =======\n", {"test_bernoulli": "PASSED", "test_fibonacci": "PASSED", "test_bell": "PASSED", "test_harmonic": "PASSED", "test_harmonic_rational": "PASSED", "test_harmonic_evalf": "PASSED", "test_harmonic_rewrite_polygamma": "PASSED", "test_harmonic_rewrite_sum": "PASSED", "test_euler": "PASSED", "test_euler_odd": "PASSED", "test_euler_polynomials": "PASSED", "test_euler_polynomial_rewrite": "PASSED", "test_catalan": "PASSED", "test_genocchi": "PASSED", "test_nC_nP_nT": "PASSED", "test_issue_8496": "PASSED"}]