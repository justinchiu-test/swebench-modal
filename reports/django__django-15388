[{"repo": "django/django", "instance_id": "django__django-15388", "base_commit": "c5cd8783825b5f6384417dac5f3889b4210b7d08", "patch": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -48,6 +48,8 @@ def watch_for_template_changes(sender, **kwargs):\n \n @receiver(file_changed, dispatch_uid='template_loaders_file_changed')\n def template_changed(sender, file_path, **kwargs):\n+    if file_path.suffix == '.py':\n+        return\n     for template_dir in get_template_directories():\n         if template_dir in file_path.parents:\n             reset_loaders()\n", "test_patch": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -39,6 +39,19 @@ def test_non_template_changed(self, mock_reset):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                'DIRS': [ROOT],\n+                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            }\n+        ]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_non_template_changed_in_template_directory(self, mock_reset):\n+        self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n+        mock_reset.assert_not_called()\n+\n     def test_watch_for_template_changes(self):\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n", "problem_statement": "Dev Server fails to restart after adding BASE_DIR to TEMPLATES[0]['DIRS'] in settings\nDescription\n\t\nRepro steps:\n$ pip install -U django\n$ django-admin startproject <name>\nOpen settings.py, copy the BASE_DIR variable from line 16 and paste it into the empty DIRS list on line 57\n$ ./manage.py runserver\nBack in your IDE, save a file and watch the dev server *NOT* restart.\nBack in settings.py, remove BASE_DIR from the templates DIRS list. Manually CTRL-C your dev server (as it won't restart on its own when you save), restart the dev server. Now return to your settings.py file, re-save it, and notice the development server once again detects changes and restarts.\nThis bug prevents the dev server from restarting no matter where you make changes - it is not just scoped to edits to settings.py.\n", "hints_text": "I don't think this is a bug, really. Adding BASE_DIR to the list of template directories causes the entire project directory to be marked as a template directory, and Django does not watch for changes in template directories by design.\nI think I encountered this recently while making examples for #33461, though I didn't get fully to the bottom of what was going on. Django does not watch for changes in template directories by design. It does, via the template_changed signal listener, which from my brief poking around when I saw it, is I believe the one which prevented trigger_reload from executing. But that mostly led to my realising I don't know what function is responsible for reloading for python files, rather than template/i18n files, so I moved on. I would tentatively accept this, personally.\nReplying to Keryn Knight: Django does not watch for changes in template directories by design. It does, via the template_changed signal listener My bad, I meant that Django does not watch for changes in template directories to reload the server. The template_changed signal listener returns True if the change occurs in a file located in a designated template directory, which causes notify_file_changed to not trigger the reload. AFAIK from browsing the code, for a python file (or actually any file not in a template directory), the template_changed signal listener returns None, which causes notify_file_changed to trigger the reload, right? So could we fix this by checking if the changed file is a python file inside the template_changed signal listener, regardless of whether it is in a template directory? def template_changed(sender, file_path, **kwargs): if file_path.suffix == '.py': return # Now check if the file was a template file This seems to work on a test project, but I have not checked for side effects, although I don't think there should be any.\nI would tentatively accept this, personally. \ud83d\ude00 I was thinking I'd tentatively wontfix, as not worth the complication \u2014 but let's accept for review and see what the consensus is. Hrushikesh, would you like to prepare a PR based on your suggestion? Thanks!", "created_at": "2022-02-02T17:09:51Z", "version": "4.1", "FAIL_TO_PASS": "[\"test_non_template_changed_in_template_directory (template_tests.test_autoreloader.TemplateReloadTests)\"]", "PASS_TO_PASS": "[\"test_get_template_directories (template_tests.test_autoreloader.Jinja2TemplateReloadTests)\", \"test_reset_all_loaders (template_tests.test_autoreloader.Jinja2TemplateReloadTests)\", \"test_watch_for_template_changes (template_tests.test_autoreloader.Jinja2TemplateReloadTests)\", \"test_get_template_directories (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_non_template_changed (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_reset_all_loaders (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_template_changed (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_template_dirs_normalized_to_paths (template_tests.test_autoreloader.TemplateReloadTests)\", \"test_watch_for_template_changes (template_tests.test_autoreloader.TemplateReloadTests)\"]", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/template/autoreload.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit c5cd8783825b5f6384417dac5f3889b4210b7d08\nAuthor: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate:   Thu Feb 3 11:20:46 2022 +0100\n\n    Refs #33476 -- Refactored problematic code before reformatting by Black.\n    \n    In these cases Black produces unexpected results, e.g.\n    \n    def make_random_password(\n        self,\n        length=10,\n        allowed_chars='abcdefghjkmnpqrstuvwxyz' 'ABCDEFGHJKLMNPQRSTUVWXYZ' '23456789',\n    ):\n    \n    or\n    \n    cursor.execute(\"\"\"\n    SELECT ...\n    \"\"\",\n        [table name],\n    )\n\ndiff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 945a7a3d8a..cbfe5d686a 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -29,10 +29,11 @@ class BaseUserManager(models.Manager):\n             email = email_name + '@' + domain_part.lower()\n         return email\n \n-    def make_random_password(self, length=10,\n-                             allowed_chars='abcdefghjkmnpqrstuvwxyz'\n-                                           'ABCDEFGHJKLMNPQRSTUVWXYZ'\n-                                           '23456789'):\n+    def make_random_password(\n+        self,\n+        length=10,\n+        allowed_chars='abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789',\n+    ):\n         \"\"\"\n         Generate a random password with the given length and given\n         allowed_chars. The default value of allowed_chars does not have \"I\" or\ndiff --git a/django/contrib/auth/hashers.py b/django/contrib/auth/hashers.py\nindex 6e1091375c..b0b3e730b8 100644\n--- a/django/contrib/auth/hashers.py\n+++ b/django/contrib/auth/hashers.py\n@@ -90,8 +90,9 @@ def get_hashers():\n         hasher_cls = import_string(hasher_path)\n         hasher = hasher_cls()\n         if not getattr(hasher, 'algorithm'):\n-            raise ImproperlyConfigured(\"hasher doesn't specify an \"\n-                                       \"algorithm name: %s\" % hasher_path)\n+            raise ImproperlyConfigured(\n+                \"hasher doesn't specify an algorithm name: %s\" % hasher_path\n+            )\n         hashers.append(hasher)\n     return hashers\n \ndiff --git a/django/contrib/gis/utils/srs.py b/django/contrib/gis/utils/srs.py\nindex b10cf263b3..d44d340383 100644\n--- a/django/contrib/gis/utils/srs.py\n+++ b/django/contrib/gis/utils/srs.py\n@@ -36,8 +36,9 @@ def add_srs_entry(srs, auth_name='EPSG', auth_srid=None, ref_sys_name=None,\n     connection = connections[database]\n \n     if not hasattr(connection.ops, 'spatial_version'):\n-        raise Exception('The `add_srs_entry` utility only works '\n-                        'with spatial backends.')\n+        raise Exception(\n+            'The `add_srs_entry` utility only works with spatial backends.'\n+        )\n     if not connection.features.supports_add_srs_entry:\n         raise Exception('This utility does not support your database backend.')\n     SpatialRefSys = connection.ops.spatial_ref_sys()\ndiff --git a/django/contrib/staticfiles/utils.py b/django/contrib/staticfiles/utils.py\nindex 5c0a85a451..e4297aff2b 100644\n--- a/django/contrib/staticfiles/utils.py\n+++ b/django/contrib/staticfiles/utils.py\n@@ -50,8 +50,9 @@ def check_settings(base_url=None):\n             \"You're using the staticfiles app \"\n             \"without having set the required STATIC_URL setting.\")\n     if settings.MEDIA_URL == base_url:\n-        raise ImproperlyConfigured(\"The MEDIA_URL and STATIC_URL \"\n-                                   \"settings must have different values\")\n+        raise ImproperlyConfigured(\n+            \"The MEDIA_URL and STATIC_URL settings must have different values\"\n+        )\n     if (settings.DEBUG and settings.MEDIA_URL and settings.STATIC_URL and\n             settings.MEDIA_URL.startswith(settings.STATIC_URL)):\n         raise ImproperlyConfigured(\n@@ -59,5 +60,6 @@ def check_settings(base_url=None):\n         )\n     if ((settings.MEDIA_ROOT and settings.STATIC_ROOT) and\n             (settings.MEDIA_ROOT == settings.STATIC_ROOT)):\n-        raise ImproperlyConfigured(\"The MEDIA_ROOT and STATIC_ROOT \"\n-                                   \"settings must have different values\")\n+        raise ImproperlyConfigured(\n+            \"The MEDIA_ROOT and STATIC_ROOT settings must have different values\"\n+        )\ndiff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 857a77da5a..197230fc14 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -552,8 +552,8 @@ class AppCommand(BaseCommand):\n         corresponding to an application label given on the command line.\n         \"\"\"\n         raise NotImplementedError(\n-            \"Subclasses of AppCommand must provide\"\n-            \"a handle_app_config() method.\")\n+            \"Subclasses of AppCommand must provide a handle_app_config() method.\"\n+        )\n \n \n class LabelCommand(BaseCommand):\ndiff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 3e348846cf..ef2cd3a5ae 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -15,8 +15,7 @@ try:\n     import MySQLdb as Database\n except ImportError as err:\n     raise ImproperlyConfigured(\n-        'Error loading MySQLdb module.\\n'\n-        'Did you install mysqlclient?'\n+        'Error loading MySQLdb module.\\nDid you install mysqlclient?'\n     ) from err\n \n from MySQLdb.constants import CLIENT, FIELD_TYPE\ndiff --git a/django/db/backends/mysql/introspection.py b/django/db/backends/mysql/introspection.py\nindex 47ce6c3f4e..3a76168227 100644\n--- a/django/db/backends/mysql/introspection.py\n+++ b/django/db/backends/mysql/introspection.py\n@@ -79,22 +79,28 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         if self.connection.mysql_is_mariadb and self.connection.features.can_introspect_json_field:\n             # JSON data type is an alias for LONGTEXT in MariaDB, select\n             # JSON_VALID() constraints to introspect JSONField.\n-            cursor.execute(\"\"\"\n+            cursor.execute(\n+                \"\"\"\n                 SELECT c.constraint_name AS column_name\n                 FROM information_schema.check_constraints AS c\n                 WHERE\n                     c.table_name = %s AND\n                     LOWER(c.check_clause) = 'json_valid(`' + LOWER(c.constraint_name) + '`)' AND\n                     c.constraint_schema = DATABASE()\n-            \"\"\", [table_name])\n+                \"\"\",\n+                [table_name],\n+            )\n             json_constraints = {row[0] for row in cursor.fetchall()}\n         # A default collation for the given table.\n-        cursor.execute(\"\"\"\n+        cursor.execute(\n+            \"\"\"\n             SELECT  table_collation\n             FROM    information_schema.tables\n             WHERE   table_schema = DATABASE()\n             AND     table_name = %s\n-        \"\"\", [table_name])\n+            \"\"\",\n+            [table_name],\n+        )\n         row = cursor.fetchone()\n         default_column_collation = row[0] if row else ''\n         # information_schema database gives more accurate results for some figures:\n@@ -102,7 +108,8 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         #   not visible length (#5725)\n         # - precision and scale (for decimal fields) (#5014)\n         # - auto_increment is not available in cursor.description\n-        cursor.execute(\"\"\"\n+        cursor.execute(\n+            \"\"\"\n             SELECT\n                 column_name, data_type, character_maximum_length,\n                 numeric_precision, numeric_scale, extra, column_default,\n@@ -116,7 +123,9 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 END AS is_unsigned\n             FROM information_schema.columns\n             WHERE table_name = %s AND table_schema = DATABASE()\n-        \"\"\", [default_column_collation, table_name])\n+            \"\"\",\n+            [default_column_collation, table_name],\n+        )\n         field_info = {line[0]: InfoLine(*line) for line in cursor.fetchall()}\n \n         cursor.execute(\"SELECT * FROM %s LIMIT 1\" % self.connection.ops.quote_name(table_name))\n@@ -153,14 +162,17 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         Return a dictionary of {field_name: (field_name_other_table, other_table)}\n         representing all foreign keys in the given table.\n         \"\"\"\n-        cursor.execute(\"\"\"\n+        cursor.execute(\n+            \"\"\"\n             SELECT column_name, referenced_column_name, referenced_table_name\n             FROM information_schema.key_column_usage\n             WHERE table_name = %s\n                 AND table_schema = DATABASE()\n                 AND referenced_table_name IS NOT NULL\n                 AND referenced_column_name IS NOT NULL\n-        \"\"\", [table_name])\n+            \"\"\",\n+            [table_name],\n+        )\n         return {\n             field_name: (other_field, other_table)\n             for field_name, other_field, other_table in cursor.fetchall()\n@@ -171,13 +183,16 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         Retrieve the storage engine for a given table. Return the default\n         storage engine if the table doesn't exist.\n         \"\"\"\n-        cursor.execute(\"\"\"\n+        cursor.execute(\n+            \"\"\"\n             SELECT engine\n             FROM information_schema.tables\n             WHERE\n                 table_name = %s AND\n                 table_schema = DATABASE()\n-        \"\"\", [table_name])\n+            \"\"\",\n+            [table_name],\n+        )\n         result = cursor.fetchone()\n         if not result:\n             return self.connection.features._mysql_storage_engine\ndiff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 923e50a8d4..7f1994e657 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -233,8 +233,9 @@ class DatabaseOperations(BaseDatabaseOperations):\n         # Zero in AUTO_INCREMENT field does not work without the\n         # NO_AUTO_VALUE_ON_ZERO SQL mode.\n         if value == 0 and not self.connection.features.allows_auto_pk_0:\n-            raise ValueError('The database backend does not accept 0 as a '\n-                             'value for AutoField.')\n+            raise ValueError(\n+                'The database backend does not accept 0 as a value for AutoField.'\n+            )\n         return value\n \n     def adapt_datetimefield_value(self, value):\ndiff --git a/django/db/backends/oracle/introspection.py b/django/db/backends/oracle/introspection.py\nindex f1f2e18e58..b8882e3cd8 100644\n--- a/django/db/backends/oracle/introspection.py\n+++ b/django/db/backends/oracle/introspection.py\n@@ -93,7 +93,8 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         interface.\n         \"\"\"\n         # user_tab_columns gives data default for columns\n-        cursor.execute(\"\"\"\n+        cursor.execute(\n+            \"\"\"\n             SELECT\n                 user_tab_cols.column_name,\n                 user_tab_cols.data_default,\n@@ -126,7 +127,9 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n             LEFT OUTER JOIN\n                 user_tables ON user_tables.table_name = user_tab_cols.table_name\n             WHERE user_tab_cols.table_name = UPPER(%s)\n-        \"\"\", [table_name])\n+            \"\"\",\n+            [table_name],\n+        )\n         field_map = {\n             column: (internal_size, default if default != 'NULL' else None, collation, is_autofield, is_json)\n             for column, default, collation, internal_size, is_autofield, is_json in cursor.fetchall()\n@@ -151,7 +154,8 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         return name.lower()\n \n     def get_sequences(self, cursor, table_name, table_fields=()):\n-        cursor.execute(\"\"\"\n+        cursor.execute(\n+            \"\"\"\n             SELECT\n                 user_tab_identity_cols.sequence_name,\n                 user_tab_identity_cols.column_name\n@@ -165,7 +169,9 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 AND cols.column_name = user_tab_identity_cols.column_name\n                 AND user_constraints.constraint_type = 'P'\n                 AND user_tab_identity_cols.table_name = UPPER(%s)\n-        \"\"\", [table_name])\n+            \"\"\",\n+            [table_name],\n+        )\n         # Oracle allows only one identity column per table.\n         row = cursor.fetchone()\n         if row:\n@@ -203,7 +209,8 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         }\n \n     def get_primary_key_column(self, cursor, table_name):\n-        cursor.execute(\"\"\"\n+        cursor.execute(\n+            \"\"\"\n             SELECT\n                 cols.column_name\n             FROM\n@@ -214,7 +221,9 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 user_constraints.constraint_type = 'P' AND\n                 user_constraints.table_name = UPPER(%s) AND\n                 cols.position = 1\n-        \"\"\", [table_name])\n+            \"\"\",\n+            [table_name],\n+        )\n         row = cursor.fetchone()\n         return self.identifier_converter(row[0]) if row else None\n \n@@ -225,7 +234,8 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         \"\"\"\n         constraints = {}\n         # Loop over the constraints, getting PKs, uniques, and checks\n-        cursor.execute(\"\"\"\n+        cursor.execute(\n+            \"\"\"\n             SELECT\n                 user_constraints.constraint_name,\n                 LISTAGG(LOWER(cols.column_name), ',') WITHIN GROUP (ORDER BY cols.position),\n@@ -249,7 +259,9 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 user_constraints.constraint_type = ANY('P', 'U', 'C')\n                 AND user_constraints.table_name = UPPER(%s)\n             GROUP BY user_constraints.constraint_name, user_constraints.constraint_type\n-        \"\"\", [table_name])\n+            \"\"\",\n+            [table_name],\n+        )\n         for constraint, columns, pk, unique, check in cursor.fetchall():\n             constraint = self.identifier_converter(constraint)\n             constraints[constraint] = {\n@@ -261,7 +273,8 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 'index': unique,  # All uniques come with an index\n             }\n         # Foreign key constraints\n-        cursor.execute(\"\"\"\n+        cursor.execute(\n+            \"\"\"\n             SELECT\n                 cons.constraint_name,\n                 LISTAGG(LOWER(cols.column_name), ',') WITHIN GROUP (ORDER BY cols.position),\n@@ -277,7 +290,9 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 cons.constraint_type = 'R' AND\n                 cons.table_name = UPPER(%s)\n             GROUP BY cons.constraint_name, rcols.table_name, rcols.column_name\n-        \"\"\", [table_name])\n+            \"\"\",\n+            [table_name],\n+        )\n         for constraint, columns, other_table, other_column in cursor.fetchall():\n             constraint = self.identifier_converter(constraint)\n             constraints[constraint] = {\n@@ -289,7 +304,8 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 'columns': columns.split(','),\n             }\n         # Now get indexes\n-        cursor.execute(\"\"\"\n+        cursor.execute(\n+            \"\"\"\n             SELECT\n                 ind.index_name,\n                 LOWER(ind.index_type),\n@@ -306,7 +322,9 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                     WHERE ind.index_name = cons.index_name\n                 ) AND cols.index_name = ind.index_name\n             GROUP BY ind.index_name, ind.index_type, ind.uniqueness\n-        \"\"\", [table_name])\n+            \"\"\",\n+            [table_name],\n+        )\n         for constraint, type_, unique, columns, orders in cursor.fetchall():\n             constraint = self.identifier_converter(constraint)\n             constraints[constraint] = {\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex a10973b6b7..d53942b919 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -377,7 +377,8 @@ END;\n     def __foreign_key_constraints(self, table_name, recursive):\n         with self.connection.cursor() as cursor:\n             if recursive:\n-                cursor.execute(\"\"\"\n+                cursor.execute(\n+                    \"\"\"\n                     SELECT\n                         user_tables.table_name, rcons.constraint_name\n                     FROM\n@@ -394,9 +395,12 @@ END;\n                         user_tables.table_name, rcons.constraint_name\n                     HAVING user_tables.table_name != UPPER(%s)\n                     ORDER BY MAX(level) DESC\n-                \"\"\", (table_name, table_name))\n+                    \"\"\",\n+                    (table_name, table_name),\n+                )\n             else:\n-                cursor.execute(\"\"\"\n+                cursor.execute(\n+                    \"\"\"\n                     SELECT\n                         cons.table_name, cons.constraint_name\n                     FROM\n@@ -404,7 +408,9 @@ END;\n                     WHERE\n                         cons.constraint_type = 'R'\n                         AND cons.table_name = UPPER(%s)\n-                \"\"\", (table_name,))\n+                    \"\"\",\n+                    (table_name,),\n+                )\n             return cursor.fetchall()\n \n     @cached_property\ndiff --git a/django/db/backends/oracle/schema.py b/django/db/backends/oracle/schema.py\nindex 70698b15e7..98e49413c9 100644\n--- a/django/db/backends/oracle/schema.py\n+++ b/django/db/backends/oracle/schema.py\n@@ -179,13 +179,16 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     def _is_identity_column(self, table_name, column_name):\n         with self.connection.cursor() as cursor:\n-            cursor.execute(\"\"\"\n+            cursor.execute(\n+                \"\"\"\n                 SELECT\n                     CASE WHEN identity_column = 'YES' THEN 1 ELSE 0 END\n                 FROM user_tab_cols\n                 WHERE table_name = %s AND\n                       column_name = %s\n-            \"\"\", [self.normalize_name(table_name), self.normalize_name(column_name)])\n+                \"\"\",\n+                [self.normalize_name(table_name), self.normalize_name(column_name)],\n+            )\n             row = cursor.fetchone()\n             return row[0] if row else False\n \n@@ -197,9 +200,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     def _get_default_collation(self, table_name):\n         with self.connection.cursor() as cursor:\n-            cursor.execute(\"\"\"\n+            cursor.execute(\n+                \"\"\"\n                 SELECT default_collation FROM user_tables WHERE table_name = %s\n-            \"\"\", [self.normalize_name(table_name)])\n+                \"\"\",\n+                [self.normalize_name(table_name)],\n+            )\n             return cursor.fetchone()[0]\n \n     def _alter_column_collation_sql(self, model, new_field, new_type, new_collation):\ndiff --git a/django/db/migrations/utils.py b/django/db/migrations/utils.py\nindex 97bd96a90a..42a4d90340 100644\n--- a/django/db/migrations/utils.py\n+++ b/django/db/migrations/utils.py\n@@ -42,8 +42,7 @@ def resolve_relation(model, app_label=None, model_name=None):\n             return app_label, model_name.lower()\n         if app_label is None:\n             raise TypeError(\n-                'app_label must be provided to resolve unscoped model '\n-                'relationships.'\n+                'app_label must be provided to resolve unscoped model relationships.'\n             )\n         return app_label, model.lower()\n     return model._meta.app_label, model._meta.model_name\ndiff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex d36d076346..5abedaf3d1 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -40,8 +40,7 @@ class CheckConstraint(BaseConstraint):\n         self.check = check\n         if not getattr(check, 'conditional', False):\n             raise TypeError(\n-                'CheckConstraint.check must be a Q instance or boolean '\n-                'expression.'\n+                'CheckConstraint.check must be a Q instance or boolean expression.'\n             )\n         super().__init__(name)\n \ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex fcea1597ef..6d6d10a483 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -101,8 +101,7 @@ class Field(RegisterLookupMixin):\n         'invalid_choice': _('Value %(value)r is not a valid choice.'),\n         'null': _('This field cannot be null.'),\n         'blank': _('This field cannot be blank.'),\n-        'unique': _('%(model_name)s with this %(field_label)s '\n-                    'already exists.'),\n+        'unique': _('%(model_name)s with this %(field_label)s already exists.'),\n         # Translators: The 'lookup_type' is one of 'date', 'year' or 'month'.\n         # Eg: \"Title must be unique for pub_date year\"\n         'unique_for_date': _(\"%(field_label)s must be unique for \"\ndiff --git a/django/db/models/indexes.py b/django/db/models/indexes.py\nindex 9c393ca2c0..e843f9a8cb 100644\n--- a/django/db/models/indexes.py\n+++ b/django/db/models/indexes.py\n@@ -36,8 +36,7 @@ class Index:\n             raise ValueError('Index.opclasses must be a list or tuple.')\n         if not expressions and not fields:\n             raise ValueError(\n-                'At least one field or expression is required to define an '\n-                'index.'\n+                'At least one field or expression is required to define an index.'\n             )\n         if expressions and fields:\n             raise ValueError(\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9315ae8039..24bfb11c06 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -530,8 +530,7 @@ class IsNull(BuiltinLookup):\n     def as_sql(self, compiler, connection):\n         if not isinstance(self.rhs, bool):\n             raise ValueError(\n-                'The QuerySet value for an isnull lookup must be True or '\n-                'False.'\n+                'The QuerySet value for an isnull lookup must be True or False.'\n             )\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e20c46075e..0bc6aec2f3 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -523,8 +523,7 @@ class QuerySet:\n                 )\n             if not unique_fields and db_features.supports_update_conflicts_with_target:\n                 raise ValueError(\n-                    'Unique fields that can trigger the upsert must be '\n-                    'provided.'\n+                    'Unique fields that can trigger the upsert must be provided.'\n                 )\n             # Updating primary keys and non-concrete fields is forbidden.\n             update_fields = [self.model._meta.get_field(name) for name in update_fields]\n@@ -930,8 +929,7 @@ class QuerySet:\n         self._not_support_combined_queries('contains')\n         if self._fields is not None:\n             raise TypeError(\n-                'Cannot call QuerySet.contains() after .values() or '\n-                '.values_list().'\n+                'Cannot call QuerySet.contains() after .values() or .values_list().'\n             )\n         try:\n             if obj._meta.concrete_model != self.model._meta.concrete_model:\n@@ -1739,8 +1737,7 @@ class Prefetch:\n             )\n         ):\n             raise ValueError(\n-                'Prefetch querysets cannot use raw(), values(), and '\n-                'values_list().'\n+                'Prefetch querysets cannot use raw(), values(), and values_list().'\n             )\n         if to_attr:\n             self.prefetch_to = LOOKUP_SEP.join(lookup.split(LOOKUP_SEP)[:-1] + [to_attr])\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex e3fdea6f3a..1dc770ae3a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1735,8 +1735,7 @@ class Query(BaseExpression):\n                 for alias in self._gen_col_aliases([annotation]):\n                     if isinstance(self.alias_map[alias], Join):\n                         raise FieldError(\n-                            'Joined field references are not permitted in '\n-                            'this query'\n+                            'Joined field references are not permitted in this query'\n                         )\n             if summarize:\n                 # Summarize currently means we are doing an aggregate() query\n@@ -1763,8 +1762,9 @@ class Query(BaseExpression):\n             if not allow_joins and len(join_list) > 1:\n                 raise FieldError('Joined field references are not permitted in this query')\n             if len(targets) > 1:\n-                raise FieldError(\"Referencing multicolumn fields with F() objects \"\n-                                 \"isn't supported\")\n+                raise FieldError(\n+                    \"Referencing multicolumn fields with F() objects isn't supported\"\n+                )\n             # Verify that the last lookup in name is a field or a transform:\n             # transform_function() raises FieldError if not.\n             transform = join_info.transform_function(targets[0], final_alias)\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex c82aaf12e1..19a5cb142a 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1218,8 +1218,9 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n-                            ' the available choices.'),\n+        'invalid_choice': _(\n+            'Select a valid choice. That choice is not one of the available choices.'\n+        ),\n     }\n     iterator = ModelChoiceIterator\n \n@@ -1338,8 +1339,9 @@ class ModelMultipleChoiceField(ModelChoiceField):\n     hidden_widget = MultipleHiddenInput\n     default_error_messages = {\n         'invalid_list': _('Enter a list of values.'),\n-        'invalid_choice': _('Select a valid choice. %(value)s is not one of the'\n-                            ' available choices.'),\n+        'invalid_choice': _(\n+            'Select a valid choice. %(value)s is not one of the available choices.'\n+        ),\n         'invalid_pk_value': _('\u201c%(pk)s\u201d is not a valid value.')\n     }\n \ndiff --git a/django/template/backends/base.py b/django/template/backends/base.py\nindex 22628c6355..f1fa142362 100644\n--- a/django/template/backends/base.py\n+++ b/django/template/backends/base.py\n@@ -38,8 +38,8 @@ class BaseEngine:\n         This method is optional.\n         \"\"\"\n         raise NotImplementedError(\n-            \"subclasses of BaseEngine should provide \"\n-            \"a from_string() method\")\n+            \"subclasses of BaseEngine should provide a from_string() method\"\n+        )\n \n     def get_template(self, template_name):\n         \"\"\"\n@@ -48,8 +48,8 @@ class BaseEngine:\n         Raise TemplateDoesNotExist if no such template exists.\n         \"\"\"\n         raise NotImplementedError(\n-            \"subclasses of BaseEngine must provide \"\n-            \"a get_template() method\")\n+            \"subclasses of BaseEngine must provide a get_template() method\"\n+        )\n \n     # Utility methods: they are provided to minimize code duplication and\n     #                  security issues in third-party backends.\ndiff --git a/django/template/base.py b/django/template/base.py\nindex e55293b8d1..caadf89970 100644\n--- a/django/template/base.py\n+++ b/django/template/base.py\n@@ -675,8 +675,9 @@ class FilterExpression:\n                     except VariableDoesNotExist:\n                         var_obj = None\n                 elif var is None:\n-                    raise TemplateSyntaxError(\"Could not find variable at \"\n-                                              \"start of %s.\" % token)\n+                    raise TemplateSyntaxError(\n+                        \"Could not find variable at start of %s.\" % token\n+                    )\n                 else:\n                     var_obj = Variable(var)\n             else:\n@@ -884,9 +885,10 @@ class Variable:\n                                 ValueError,  # invalid literal for int()\n                                 KeyError,    # current is a dict without `int(bit)` key\n                                 TypeError):  # unsubscriptable object\n-                            raise VariableDoesNotExist(\"Failed lookup for key \"\n-                                                       \"[%s] in %r\",\n-                                                       (bit, current))  # missing attribute\n+                            raise VariableDoesNotExist(\n+                                \"Failed lookup for key [%s] in %r\",\n+                                (bit, current),\n+                            )  # missing attribute\n                 if callable(current):\n                     if getattr(current, 'do_not_call_in_templates', False):\n                         pass\ndiff --git a/django/template/defaulttags.py b/django/template/defaulttags.py\nindex 99c09a483a..9090b14e40 100644\n--- a/django/template/defaulttags.py\n+++ b/django/template/defaulttags.py\n@@ -793,8 +793,9 @@ def do_for(parser, token):\n     \"\"\"\n     bits = token.split_contents()\n     if len(bits) < 4:\n-        raise TemplateSyntaxError(\"'for' statements should have at least four\"\n-                                  \" words: %s\" % token.contents)\n+        raise TemplateSyntaxError(\n+            \"'for' statements should have at least four words: %s\" % token.contents\n+        )\n \n     is_reversed = bits[-1] == 'reversed'\n     in_index = -3 if is_reversed else -2\n@@ -806,8 +807,9 @@ def do_for(parser, token):\n     loopvars = re.split(r' *, *', ' '.join(bits[1:in_index]))\n     for var in loopvars:\n         if not var or not invalid_chars.isdisjoint(var):\n-            raise TemplateSyntaxError(\"'for' tag received an invalid argument:\"\n-                                      \" %s\" % token.contents)\n+            raise TemplateSyntaxError(\n+                \"'for' tag received an invalid argument: %s\" % token.contents\n+            )\n \n     sequence = parser.compile_filter(bits[in_index + 1])\n     nodelist_loop = parser.parse(('empty', 'endfor',))\n@@ -1160,8 +1162,9 @@ def regroup(parser, token):\n     if bits[2] != 'by':\n         raise TemplateSyntaxError(\"second argument to 'regroup' tag must be 'by'\")\n     if bits[4] != 'as':\n-        raise TemplateSyntaxError(\"next-to-last argument to 'regroup' tag must\"\n-                                  \" be 'as'\")\n+        raise TemplateSyntaxError(\n+            \"next-to-last argument to 'regroup' tag must be 'as'\"\n+        )\n     var_name = bits[5]\n     # RegroupNode will take each item in 'target', put it in the context under\n     # 'var_name', evaluate 'var_name'.'expression' in the current context, and\n@@ -1420,8 +1423,9 @@ def do_with(parser, token):\n     remaining_bits = bits[1:]\n     extra_context = token_kwargs(remaining_bits, parser, support_legacy=True)\n     if not extra_context:\n-        raise TemplateSyntaxError(\"%r expected at least one variable \"\n-                                  \"assignment\" % bits[0])\n+        raise TemplateSyntaxError(\n+            \"%r expected at least one variable assignment\" % bits[0]\n+        )\n     if remaining_bits:\n         raise TemplateSyntaxError(\"%r received an invalid token: %r\" %\n                                   (bits[0], remaining_bits[0]))\ndiff --git a/django/template/loader_tags.py b/django/template/loader_tags.py\nindex 3e770751d1..37cefaf9c7 100644\n--- a/django/template/loader_tags.py\n+++ b/django/template/loader_tags.py\n@@ -315,13 +315,15 @@ def do_include(parser, token):\n     while remaining_bits:\n         option = remaining_bits.pop(0)\n         if option in options:\n-            raise TemplateSyntaxError('The %r option was specified more '\n-                                      'than once.' % option)\n+            raise TemplateSyntaxError(\n+                'The %r option was specified more than once.' % option\n+            )\n         if option == 'with':\n             value = token_kwargs(remaining_bits, parser, support_legacy=False)\n             if not value:\n-                raise TemplateSyntaxError('\"with\" in %r tag needs at least '\n-                                          'one keyword argument.' % bits[0])\n+                raise TemplateSyntaxError(\n+                    '\"with\" in %r tag needs at least one keyword argument.' % bits[0]\n+                )\n         elif option == 'only':\n             value = True\n         else:\ndiff --git a/django/template/response.py b/django/template/response.py\nindex 9efadcd726..63d2f4a577 100644\n--- a/django/template/response.py\n+++ b/django/template/response.py\n@@ -49,8 +49,9 @@ class SimpleTemplateResponse(HttpResponse):\n         \"\"\"\n         obj_dict = self.__dict__.copy()\n         if not self._is_rendered:\n-            raise ContentNotRenderedError('The response content must be '\n-                                          'rendered before it can be pickled.')\n+            raise ContentNotRenderedError(\n+                'The response content must be rendered before it can be pickled.'\n+            )\n         for attr in self.rendering_attrs:\n             if attr in obj_dict:\n                 del obj_dict[attr]\ndiff --git a/django/templatetags/i18n.py b/django/templatetags/i18n.py\nindex 607ceb6aea..efe5f28941 100644\n--- a/django/templatetags/i18n.py\n+++ b/django/templatetags/i18n.py\n@@ -477,13 +477,15 @@ def do_block_translate(parser, token):\n     while remaining_bits:\n         option = remaining_bits.pop(0)\n         if option in options:\n-            raise TemplateSyntaxError('The %r option was specified more '\n-                                      'than once.' % option)\n+            raise TemplateSyntaxError(\n+                'The %r option was specified more than once.' % option\n+            )\n         if option == 'with':\n             value = token_kwargs(remaining_bits, parser, support_legacy=True)\n             if not value:\n-                raise TemplateSyntaxError('\"with\" in %r tag needs at least '\n-                                          'one keyword argument.' % bits[0])\n+                raise TemplateSyntaxError(\n+                    '\"with\" in %r tag needs at least one keyword argument.' % bits[0]\n+                )\n         elif option == 'count':\n             value = token_kwargs(remaining_bits, parser, support_legacy=True)\n             if len(value) != 1:\ndiff --git a/django/templatetags/tz.py b/django/templatetags/tz.py\nindex 455c2ed389..489391a267 100644\n--- a/django/templatetags/tz.py\n+++ b/django/templatetags/tz.py\n@@ -209,6 +209,7 @@ def get_current_timezone_tag(parser, token):\n     # token.split_contents() isn't useful here because this tag doesn't accept variable as arguments\n     args = token.contents.split()\n     if len(args) != 3 or args[1] != 'as':\n-        raise TemplateSyntaxError(\"'get_current_timezone' requires \"\n-                                  \"'as variable' (got %r)\" % args)\n+        raise TemplateSyntaxError(\n+            \"'get_current_timezone' requires 'as variable' (got %r)\" % args\n+        )\n     return GetCurrentTimezoneNode(args[2])\ndiff --git a/django/test/client.py b/django/test/client.py\nindex 6e8d0f4d9d..af1090a740 100644\n--- a/django/test/client.py\n+++ b/django/test/client.py\n@@ -894,8 +894,7 @@ class AsyncClient(ClientMixin, AsyncRequestFactory):\n         \"\"\"\n         if 'follow' in request:\n             raise NotImplementedError(\n-                'AsyncClient request methods do not accept the follow '\n-                'parameter.'\n+                'AsyncClient request methods do not accept the follow parameter.'\n             )\n         scope = self._base_scope(**request)\n         # Curry a data dictionary into an instance of the template renderer\ndiff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex 2c2b946835..1755a9f435 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -987,8 +987,7 @@ class AliasTests(TestCase):\n \n     def test_aggregate_alias(self):\n         msg = (\n-            \"Cannot aggregate over the 'other_age' alias. Use annotate() to \"\n-            \"promote it.\"\n+            \"Cannot aggregate over the 'other_age' alias. Use annotate() to promote it.\"\n         )\n         with self.assertRaisesMessage(FieldError, msg):\n             Author.objects.alias(\n@@ -1012,10 +1011,7 @@ class AliasTests(TestCase):\n \n     def test_values_alias(self):\n         qs = Book.objects.alias(rating_alias=F('rating') - 1)\n-        msg = (\n-            \"Cannot select the 'rating_alias' alias. Use annotate() to \"\n-            \"promote it.\"\n-        )\n+        msg = \"Cannot select the 'rating_alias' alias. Use annotate() to promote it.\"\n         for operation in ['values', 'values_list']:\n             with self.subTest(operation=operation):\n                 with self.assertRaisesMessage(FieldError, msg):\ndiff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex 7e5ff32380..8040f16dcf 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -429,8 +429,7 @@ class BulkCreateTests(TestCase):\n     )\n     def test_update_conflicts_invalid_update_fields(self):\n         msg = (\n-            'bulk_create() can only be used with concrete fields in '\n-            'update_fields.'\n+            'bulk_create() can only be used with concrete fields in update_fields.'\n         )\n         # Reverse one-to-one relationship.\n         with self.assertRaisesMessage(ValueError, msg):\n@@ -467,8 +466,7 @@ class BulkCreateTests(TestCase):\n     )\n     def test_update_conflicts_invalid_unique_fields(self):\n         msg = (\n-            'bulk_create() can only be used with concrete fields in '\n-            'unique_fields.'\n+            'bulk_create() can only be used with concrete fields in unique_fields.'\n         )\n         # Reverse one-to-one relationship.\n         with self.assertRaisesMessage(ValueError, msg):\ndiff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 07f6fea48d..6327698dfa 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -70,8 +70,7 @@ def empty_response(request):\n \n \n KEY_ERRORS_WITH_MEMCACHED_MSG = (\n-    'Cache key contains characters that will cause errors if used with '\n-    'memcached: %r'\n+    'Cache key contains characters that will cause errors if used with memcached: %r'\n )\n \n \ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 89c6a7c8de..dcde321c57 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -409,16 +409,22 @@ class BasicExpressionsTests(TestCase):\n \n     def test_order_by_multiline_sql(self):\n         raw_order_by = (\n-            RawSQL('''\n+            RawSQL(\n+                \"\"\"\n                 CASE WHEN num_employees > 1000\n                      THEN num_chairs\n                      ELSE 0 END\n-            ''', []).desc(),\n-            RawSQL('''\n+                \"\"\",\n+                [],\n+            ).desc(),\n+            RawSQL(\n+                \"\"\"\n                 CASE WHEN num_chairs > 1\n                      THEN 1\n                      ELSE 0 END\n-            ''', []).asc()\n+                \"\"\",\n+                [],\n+            ).asc()\n         )\n         for qs in (\n             Company.objects.all(),\ndiff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py\nindex 522441fd22..78898e2b1e 100644\n--- a/tests/file_uploads/tests.py\n+++ b/tests/file_uploads/tests.py\n@@ -649,8 +649,7 @@ class FileUploadTests(TestCase):\n             'Content-Disposition: form-data; name=\"file_field\"; filename=\"MiXeD_cAsE.txt\"',\n             'Content-Type: application/octet-stream',\n             '',\n-            'file contents\\n'\n-            '',\n+            'file contents\\n',\n             '--%(boundary)s--\\r\\n',\n         ]\n         response = self.client.post(\ndiff --git a/tests/forms_tests/widget_tests/test_multiwidget.py b/tests/forms_tests/widget_tests/test_multiwidget.py\nindex 0e5ee8f73f..cb1e9d31c5 100644\n--- a/tests/forms_tests/widget_tests/test_multiwidget.py\n+++ b/tests/forms_tests/widget_tests/test_multiwidget.py\n@@ -212,8 +212,7 @@ class MultiWidgetTest(WidgetTest):\n     def test_no_whitespace_between_widgets(self):\n         widget = MyMultiWidget(widgets=(TextInput, TextInput()))\n         self.check_html(widget, 'code', None, html=(\n-            '<input type=\"text\" name=\"code_0\">'\n-            '<input type=\"text\" name=\"code_1\">'\n+            '<input type=\"text\" name=\"code_0\"><input type=\"text\" name=\"code_1\">'\n         ), strict=True)\n \n     def test_deepcopy(self):\ndiff --git a/tests/gis_tests/geoapp/test_functions.py b/tests/gis_tests/geoapp/test_functions.py\nindex a1b1f48e02..67e4313f3f 100644\n--- a/tests/gis_tests/geoapp/test_functions.py\n+++ b/tests/gis_tests/geoapp/test_functions.py\n@@ -370,8 +370,7 @@ class GISFunctionsTests(FuncTestMixin, TestCase):\n     @skipUnlessDBFeature('has_MakeValid_function')\n     def test_make_valid_multipolygon(self):\n         invalid_geom = fromstr(\n-            'POLYGON((0 0, 0 1 , 1 1 , 1 0, 0 0), '\n-            '(10 0, 10 1, 11 1, 11 0, 10 0))'\n+            'POLYGON((0 0, 0 1 , 1 1 , 1 0, 0 0), (10 0, 10 1, 11 1, 11 0, 10 0))'\n         )\n         State.objects.create(name='invalid', poly=invalid_geom)\n         invalid = State.objects.filter(name='invalid').annotate(\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 4a36ac8285..c8c4cfa420 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1707,8 +1707,7 @@ class ConstraintsTests(TestCase):\n \n         self.assertEqual(Model.check(databases=self.databases), [\n             Error(\n-                \"'constraints' refers to the nonexistent field \"\n-                \"'missing_field'.\",\n+                \"'constraints' refers to the nonexistent field 'missing_field'.\",\n                 obj=Model,\n                 id='models.E012',\n             ),\n@@ -1972,8 +1971,7 @@ class ConstraintsTests(TestCase):\n \n         self.assertEqual(Model.check(databases=self.databases), [\n             Error(\n-                \"'constraints' refers to the nonexistent field \"\n-                \"'missing_field'.\",\n+                \"'constraints' refers to the nonexistent field 'missing_field'.\",\n                 obj=Model,\n                 id='models.E012',\n             ),\n@@ -2075,8 +2073,7 @@ class ConstraintsTests(TestCase):\n \n         self.assertEqual(Model.check(databases=self.databases), [\n             Error(\n-                \"'constraints' refers to the nonexistent field \"\n-                \"'missing_field'.\",\n+                \"'constraints' refers to the nonexistent field 'missing_field'.\",\n                 obj=Model,\n                 id='models.E012',\n             ),\n@@ -2193,8 +2190,7 @@ class ConstraintsTests(TestCase):\n \n         self.assertEqual(Model.check(databases=self.databases), [\n             Error(\n-                \"'constraints' refers to the nonexistent field \"\n-                \"'missing_field'.\",\n+                \"'constraints' refers to the nonexistent field 'missing_field'.\",\n                 obj=Model,\n                 id='models.E012',\n             ),\n@@ -2331,8 +2327,7 @@ class ConstraintsTests(TestCase):\n \n         self.assertEqual(Model.check(databases=self.databases), [\n             Error(\n-                \"'constraints' refers to the nonexistent field \"\n-                \"'missing_field'.\",\n+                \"'constraints' refers to the nonexistent field 'missing_field'.\",\n                 obj=Model,\n                 id='models.E012',\n             ),\n@@ -2348,8 +2343,7 @@ class ConstraintsTests(TestCase):\n \n         self.assertEqual(Model.check(databases=self.databases), [\n             Error(\n-                \"'constraints' refers to the nonexistent field \"\n-                \"'missing_field'.\",\n+                \"'constraints' refers to the nonexistent field 'missing_field'.\",\n                 obj=Model,\n                 id='models.E012',\n             ),\ndiff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex 5709372cbc..0c62db8ae6 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -308,9 +308,7 @@ class MigrateTests(MigrationTestBase):\n         with mock.patch('django.core.management.color.supports_color', lambda *args: True):\n             call_command(\"showmigrations\", format='list', stdout=out, verbosity=0, no_color=False)\n         self.assertEqual(\n-            '\\x1b[1mmigrations\\n\\x1b[0m'\n-            ' [ ] 0001_initial\\n'\n-            ' [ ] 0002_second\\n',\n+            '\\x1b[1mmigrations\\n\\x1b[0m [ ] 0001_initial\\n [ ] 0002_second\\n',\n             out.getvalue().lower()\n         )\n \n@@ -320,9 +318,7 @@ class MigrateTests(MigrationTestBase):\n         # Giving the explicit app_label tests for selective `show_list` in the command\n         call_command(\"showmigrations\", \"migrations\", format='list', stdout=out, verbosity=0, no_color=True)\n         self.assertEqual(\n-            'migrations\\n'\n-            ' [x] 0001_initial\\n'\n-            ' [ ] 0002_second\\n',\n+            'migrations\\n [x] 0001_initial\\n [ ] 0002_second\\n',\n             out.getvalue().lower()\n         )\n         out = io.StringIO()\n@@ -343,8 +339,7 @@ class MigrateTests(MigrationTestBase):\n         out = io.StringIO()\n         call_command('showmigrations', format='list', stdout=out, verbosity=2, no_color=True)\n         self.assertEqual(\n-            'migrations\\n'\n-            ' [ ] 0001_squashed_0002 (2 squashed migrations)\\n',\n+            'migrations\\n [ ] 0001_squashed_0002 (2 squashed migrations)\\n',\n             out.getvalue().lower(),\n         )\n         out = io.StringIO()\n@@ -368,8 +363,7 @@ class MigrateTests(MigrationTestBase):\n             out = io.StringIO()\n             call_command('showmigrations', format='list', stdout=out, verbosity=2, no_color=True)\n             self.assertEqual(\n-                'migrations\\n'\n-                ' [x] 0001_squashed_0002 (2 squashed migrations)\\n',\n+                'migrations\\n [x] 0001_squashed_0002 (2 squashed migrations)\\n',\n                 out.getvalue().lower(),\n             )\n         finally:\n@@ -447,8 +441,7 @@ class MigrateTests(MigrationTestBase):\n             # Show the plan for when there is nothing to apply.\n             call_command('migrate', 'migrations', '0003', plan=True, stdout=out, no_color=True)\n             self.assertEqual(\n-                'Planned operations:\\n'\n-                '  No planned migration operations.\\n',\n+                'Planned operations:\\n  No planned migration operations.\\n',\n                 out.getvalue()\n             )\n             out = io.StringIO()\n@@ -609,8 +602,7 @@ class MigrateTests(MigrationTestBase):\n         out = io.StringIO()\n         call_command('showmigrations', 'mutate_state_b', format='plan', stdout=out)\n         self.assertEqual(\n-            '[ ]  mutate_state_b.0001_initial\\n'\n-            '[ ]  mutate_state_b.0002_add_field\\n',\n+            '[ ]  mutate_state_b.0001_initial\\n[ ]  mutate_state_b.0002_add_field\\n',\n             out.getvalue()\n         )\n         # Single app with dependencies.\n@@ -911,8 +903,7 @@ class MigrateTests(MigrationTestBase):\n         call_command(\"migrate\", \"migrations\", verbosity=0)\n         call_command(\"showmigrations\", \"migrations\", stdout=out, no_color=True)\n         self.assertEqual(\n-            'migrations\\n'\n-            ' [x] 0001_squashed_0002 (2 squashed migrations)\\n',\n+            'migrations\\n [x] 0001_squashed_0002 (2 squashed migrations)\\n',\n             out.getvalue().lower()\n         )\n         applied_migrations = recorder.applied_migrations()\n@@ -944,8 +935,7 @@ class MigrateTests(MigrationTestBase):\n         call_command(\"migrate\", \"migrations\", verbosity=0)\n         call_command(\"showmigrations\", \"migrations\", stdout=out, no_color=True)\n         self.assertEqual(\n-            'migrations\\n'\n-            ' [x] 0001_squashed_0002 (2 squashed migrations)\\n',\n+            'migrations\\n [x] 0001_squashed_0002 (2 squashed migrations)\\n',\n             out.getvalue().lower()\n         )\n         self.assertIn(\n@@ -1115,8 +1105,7 @@ class MigrateTests(MigrationTestBase):\n         call_command('migrate', 'migrations', prune=True, stdout=out, no_color=True)\n         self.assertEqual(\n             out.getvalue(),\n-            'Pruning migrations:\\n'\n-            '  No migrations to prune.\\n',\n+            'Pruning migrations:\\n  No migrations to prune.\\n',\n         )\n         out = io.StringIO()\n         call_command(\n@@ -2311,8 +2300,7 @@ class AppLabelErrorTests(TestCase):\n     \"\"\"\n     nonexistent_app_error = \"No installed app with label 'nonexistent_app'.\"\n     did_you_mean_auth_error = (\n-        \"No installed app with label 'django.contrib.auth'. Did you mean \"\n-        \"'auth'?\"\n+        \"No installed app with label 'django.contrib.auth'. Did you mean 'auth'?\"\n     )\n \n     def test_makemigrations_nonexistent_app_label(self):\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex 4506e6b541..f55c48a0d4 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -86,8 +86,7 @@ class OperationWriterTests(SimpleTestCase):\n         self.assertEqual(imports, {'import custom_migration_operations.operations'})\n         self.assertEqual(\n             buff,\n-            'custom_migration_operations.operations.TestOperation(\\n'\n-            '),'\n+            'custom_migration_operations.operations.TestOperation(\\n),',\n         )\n \n     def test_args_signature(self):\ndiff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f7721aa6e8..faedd451cb 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -129,8 +129,7 @@ class TestFormField(SimpleTestCase):\n \n class TestSerialization(SimpleTestCase):\n     test_data = (\n-        '[{\"fields\": {\"value\": %s}, '\n-        '\"model\": \"model_fields.jsonmodel\", \"pk\": null}]'\n+        '[{\"fields\": {\"value\": %s}, \"model\": \"model_fields.jsonmodel\", \"pk\": null}]'\n     )\n     test_values = (\n         # (Python value, serialized value),\ndiff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex 1d6f1ba023..b08d52e6dd 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -411,8 +411,7 @@ class PrepopulatedFieldsCheckTests(CheckTestCase):\n \n         self.assertIsInvalid(\n             TestModelAdmin, ValidationTestModel,\n-            'The value of \\'prepopulated_fields[\"slug\"]\\' must be a list '\n-            'or tuple.',\n+            'The value of \\'prepopulated_fields[\"slug\"]\\' must be a list or tuple.',\n             'admin.E029'\n         )\n \ndiff --git a/tests/postgres_tests/test_operations.py b/tests/postgres_tests/test_operations.py\nindex 1464f3177e..790fef8332 100644\n--- a/tests/postgres_tests/test_operations.py\n+++ b/tests/postgres_tests/test_operations.py\n@@ -53,8 +53,7 @@ class AddIndexConcurrentlyTests(OperationTestBase):\n         operation = AddIndexConcurrently('Pony', index)\n         self.assertEqual(\n             operation.describe(),\n-            'Concurrently create index pony_pink_idx on field(s) pink of '\n-            'model Pony'\n+            'Concurrently create index pony_pink_idx on field(s) pink of model Pony',\n         )\n         operation.state_forwards(self.app_label, new_state)\n         self.assertEqual(len(new_state.models[self.app_label, 'pony'].options['indexes']), 1)\ndiff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex 18f5de746f..b6de765391 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1352,9 +1352,10 @@ class MultiDbTests(TestCase):\n             books = \"\".join(\"%s (%s)\\n\" %\n                             (b.title, \", \".join(a.name for a in b.first_time_authors.all()))\n                             for b in B.prefetch_related('first_time_authors'))\n-        self.assertEqual(books,\n-                         \"Poems (Charlotte Bronte)\\n\"\n-                         \"Sense and Sensibility (Jane Austen)\\n\")\n+        self.assertEqual(\n+            books,\n+            \"Poems (Charlotte Bronte)\\nSense and Sensibility (Jane Austen)\\n\",\n+        )\n \n     def test_using_is_honored_inheritance(self):\n         B = BookWithYear.objects.using('other')\n@@ -1391,19 +1392,20 @@ class MultiDbTests(TestCase):\n             books = \"\".join(\"%s (%s)\\n\" %\n                             (b.title, \", \".join(a.name for a in b.first_time_authors.all()))\n                             for b in B.prefetch_related(prefetch))\n-        self.assertEqual(books,\n-                         \"Poems (Charlotte Bronte)\\n\"\n-                         \"Sense and Sensibility (Jane Austen)\\n\")\n-\n+        self.assertEqual(\n+            books,\n+            \"Poems (Charlotte Bronte)\\nSense and Sensibility (Jane Austen)\\n\",\n+        )\n         # Explicit using on the same db.\n         with self.assertNumQueries(2, using='other'):\n             prefetch = Prefetch('first_time_authors', queryset=Author.objects.using('other'))\n             books = \"\".join(\"%s (%s)\\n\" %\n                             (b.title, \", \".join(a.name for a in b.first_time_authors.all()))\n                             for b in B.prefetch_related(prefetch))\n-        self.assertEqual(books,\n-                         \"Poems (Charlotte Bronte)\\n\"\n-                         \"Sense and Sensibility (Jane Austen)\\n\")\n+        self.assertEqual(\n+            books,\n+            \"Poems (Charlotte Bronte)\\nSense and Sensibility (Jane Austen)\\n\",\n+        )\n \n         # Explicit using on a different db.\n         with self.assertNumQueries(1, using='default'), self.assertNumQueries(1, using='other'):\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex f146bc89fd..09aaad95a9 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -3149,8 +3149,7 @@ class QuerySetExceptionTests(SimpleTestCase):\n \n     def test_invalid_order_by(self):\n         msg = (\n-            \"Cannot resolve keyword '*' into field. Choices are: created, id, \"\n-            \"name\"\n+            \"Cannot resolve keyword '*' into field. Choices are: created, id, name\"\n         )\n         with self.assertRaisesMessage(FieldError, msg):\n             Article.objects.order_by('*')\ndiff --git a/tests/requests/test_data_upload_settings.py b/tests/requests/test_data_upload_settings.py\nindex 44897cc9fa..6f44dbd10d 100644\n--- a/tests/requests/test_data_upload_settings.py\n+++ b/tests/requests/test_data_upload_settings.py\n@@ -41,7 +41,6 @@ class DataUploadMaxMemorySizeMultipartPostTests(SimpleTestCase):\n             '',\n             'value',\n             '--boundary--'\n-            ''\n         ]))\n         self.request = WSGIRequest({\n             'REQUEST_METHOD': 'POST',\n@@ -70,7 +69,6 @@ class DataUploadMaxMemorySizeMultipartPostTests(SimpleTestCase):\n             '',\n             'value',\n             '--boundary--'\n-            ''\n         ]))\n         request = WSGIRequest({\n             'REQUEST_METHOD': 'POST',\n@@ -143,7 +141,6 @@ class DataUploadMaxNumberOfFieldsMultipartPost(SimpleTestCase):\n             '',\n             'value2',\n             '--boundary--'\n-            ''\n         ]))\n         self.request = WSGIRequest({\n             'REQUEST_METHOD': 'POST',\ndiff --git a/tests/requests/tests.py b/tests/requests/tests.py\nindex 3d8bb45b00..bc7c0165b2 100644\n--- a/tests/requests/tests.py\n+++ b/tests/requests/tests.py\n@@ -316,7 +316,7 @@ class RequestsTests(SimpleTestCase):\n             '',\n             'value',\n             '--boundary--'\n-            '']))\n+        ]))\n         request = WSGIRequest({\n             'REQUEST_METHOD': 'POST',\n             'CONTENT_TYPE': 'multipart/form-data; boundary=boundary',\n@@ -341,7 +341,7 @@ class RequestsTests(SimpleTestCase):\n             b'',\n             b'value',\n             b'--boundary--'\n-            b''])\n+        ])\n         payload = FakePayload(payload_data)\n         request = WSGIRequest({\n             'REQUEST_METHOD': 'POST',\n@@ -366,7 +366,7 @@ class RequestsTests(SimpleTestCase):\n             '',\n             'value',\n             '--boundary--'\n-            '']))\n+        ]))\n         request = WSGIRequest({\n             'REQUEST_METHOD': 'POST',\n             'CONTENT_TYPE': 'multipart/form-data; boundary=boundary',\ndiff --git a/tests/runtests.py b/tests/runtests.py\nindex 6bad838a95..64400bd892 100755\n--- a/tests/runtests.py\n+++ b/tests/runtests.py\n@@ -292,8 +292,7 @@ def setup_run_tests(verbosity, start_at, start_after, test_labels=None):\n     # Force declaring available_apps in TransactionTestCase for faster tests.\n     def no_available_apps(self):\n         raise Exception(\n-            'Please define available_apps in TransactionTestCase and its '\n-            'subclasses.'\n+            'Please define available_apps in TransactionTestCase and its subclasses.'\n         )\n     TransactionTestCase.available_apps = property(no_available_apps)\n     TestCase.available_apps = None\ndiff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex df32562f6b..aadd618109 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -11,10 +11,7 @@ from django.test.utils import captured_stdin, captured_stdout\n class ShellCommandTestCase(SimpleTestCase):\n     script_globals = 'print(\"__name__\" in globals())'\n     script_with_inline_function = (\n-        'import django\\n'\n-        'def f():\\n'\n-        '    print(django.__version__)\\n'\n-        'f()'\n+        'import django\\ndef f():\\n    print(django.__version__)\\nf()'\n     )\n \n     def test_command_option(self):\ndiff --git a/tests/template_tests/filter_tests/test_urlizetrunc.py b/tests/template_tests/filter_tests/test_urlizetrunc.py\nindex e37e277212..09bbe776cf 100644\n--- a/tests/template_tests/filter_tests/test_urlizetrunc.py\n+++ b/tests/template_tests/filter_tests/test_urlizetrunc.py\n@@ -60,14 +60,13 @@ class FunctionTests(SimpleTestCase):\n \n         self.assertEqual(\n             urlizetrunc(uri, 1),\n-            '<a href=\"http://31characteruri.com/test/\"'\n-            ' rel=\"nofollow\">\u2026</a>',\n+            '<a href=\"http://31characteruri.com/test/\" rel=\"nofollow\">\u2026</a>',\n         )\n \n     def test_overtruncate(self):\n         self.assertEqual(\n-            urlizetrunc('http://short.com/', 20), '<a href='\n-            '\"http://short.com/\" rel=\"nofollow\">http://short.com/</a>',\n+            urlizetrunc('http://short.com/', 20),\n+            '<a href=\"http://short.com/\" rel=\"nofollow\">http://short.com/</a>',\n         )\n \n     def test_query_string(self):\ndiff --git a/tests/template_tests/syntax_tests/i18n/test_get_language_info.py b/tests/template_tests/syntax_tests/i18n/test_get_language_info.py\nindex 51e8d2bc79..4ae8186af5 100644\n--- a/tests/template_tests/syntax_tests/i18n/test_get_language_info.py\n+++ b/tests/template_tests/syntax_tests/i18n/test_get_language_info.py\n@@ -36,7 +36,7 @@ class I18nGetLanguageInfoTagTests(SimpleTestCase):\n             output = self.engine.render_to_string('i18n38')\n         self.assertEqual(output, 'de: German/Deutsch/n\u011bmecky bidi=False')\n \n-    @setup({'template': '{% load i18n %}''{% get_language_info %}'})\n+    @setup({'template': '{% load i18n %}{% get_language_info %}'})\n     def test_no_for_as(self):\n         msg = \"'get_language_info' requires 'for string as variable' (got [])\"\n         with self.assertRaisesMessage(TemplateSyntaxError, msg):\ndiff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex cade3e4610..59f83d80e2 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -104,8 +104,7 @@ class SimpleTagTests(TagTestCase):\n             (\n                 \"'simple_keyword_only_param' received multiple values for \"\n                 \"keyword argument 'kwarg'\",\n-                '{% load custom %}{% simple_keyword_only_param kwarg=42 '\n-                'kwarg=37 %}',\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}',\n             ),\n             (\n                 \"'simple_keyword_only_default' received multiple values for \"\ndiff --git a/tests/test_runner/test_discover_runner.py b/tests/test_runner/test_discover_runner.py\nindex 7fef5652df..dedc36aeb7 100644\n--- a/tests/test_runner/test_discover_runner.py\n+++ b/tests/test_runner/test_discover_runner.py\n@@ -445,8 +445,7 @@ class DiscoverRunnerTests(SimpleTestCase):\n \n     def test_pdb_with_parallel(self):\n         msg = (\n-            'You cannot use --pdb with parallel tests; pass --parallel=1 to '\n-            'use it.'\n+            'You cannot use --pdb with parallel tests; pass --parallel=1 to use it.'\n         )\n         with self.assertRaisesMessage(ValueError, msg):\n             DiscoverRunner(pdb=True, parallel=2)\ndiff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 9474373138..0da45d9f64 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -437,8 +437,7 @@ class AssertNumQueriesContextManagerTests(TestCase):\n \n     def test_failure(self):\n         msg = (\n-            '1 != 2 : 1 queries executed, 2 expected\\nCaptured queries were:\\n'\n-            '1.'\n+            '1 != 2 : 1 queries executed, 2 expected\\nCaptured queries were:\\n1.'\n         )\n         with self.assertRaisesMessage(AssertionError, msg):\n             with self.assertNumQueries(2):\n@@ -927,11 +926,7 @@ class HTMLEqualTests(SimpleTestCase):\n             parse_html('</p>')\n \n     def test_escaped_html_errors(self):\n-        msg = (\n-            '<p>\\n<foo>\\n</p>'\n-            ' != '\n-            '<p>\\n&lt;foo&gt;\\n</p>\\n'\n-        )\n+        msg = '<p>\\n<foo>\\n</p> != <p>\\n&lt;foo&gt;\\n</p>\\n'\n         with self.assertRaisesMessage(AssertionError, msg):\n             self.assertHTMLEqual('<p><foo></p>', '<p>&lt;foo&gt;</p>')\n         with self.assertRaisesMessage(AssertionError, msg):\ndiff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 78063a58cc..585edd7117 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -133,8 +133,7 @@ VALID_URLS = [\n     'ample.com',\n     'http://example.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n     'aaaaa.com',\n-    'http://example.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n-    'aaaaa',\n+    'http://example.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n     'http://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaa'\n     'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaa'\n     'aaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaa'\ndiff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 84d675b79b..8fc7ea2fcd 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -690,14 +690,12 @@ class ExceptionReporterTests(SimpleTestCase):\n             html,\n         )\n         self.assertIn(\n-            '\"generated\", line 2, in funcName\\n'\n-            '    &lt;source code not available&gt;',\n+            '\"generated\", line 2, in funcName\\n    &lt;source code not available&gt;',\n             html,\n         )\n         text = reporter.get_traceback_text()\n         self.assertIn(\n-            '\"generated\", line 2, in funcName\\n'\n-            '    <source code not available>',\n+            '\"generated\", line 2, in funcName\\n    <source code not available>',\n             text,\n         )\n \n@@ -731,14 +729,12 @@ class ExceptionReporterTests(SimpleTestCase):\n                 html,\n             )\n             self.assertIn(\n-                '\"generated\", line 2, in funcName\\n'\n-                '    &lt;source code not available&gt;',\n+                '\"generated\", line 2, in funcName\\n    &lt;source code not available&gt;',\n                 html,\n             )\n             text = reporter.get_traceback_text()\n             self.assertIn(\n-                '\"generated\", line 2, in funcName\\n'\n-                '    <source code not available>',\n+                '\"generated\", line 2, in funcName\\n    <source code not available>',\n                 text,\n             )\n \ndiff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex cf1b20ba95..7242d68f2d 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -48,6 +48,8 @@ def watch_for_template_changes(sender, **kwargs):\n \n @receiver(file_changed, dispatch_uid='template_loaders_file_changed')\n def template_changed(sender, file_path, **kwargs):\n+    if file_path.suffix == '.py':\n+        return\n     for template_dir in get_template_directories():\n         if template_dir in file_path.parents:\n             reset_loaders()\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220203102046) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220203102046) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220203102046) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.1.dev20220203102046-0.editable-py3-none-any.whl size=26906 sha256=eb4b22b40577883bc82df4a13f43f8088252e5bdafa576b31b994d6667ba05ae\n  Stored in directory: /tmp/pip-ephem-wheel-cache-mav24dwq/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.1.dev20220203102046\n    Uninstalling Django-4.1.dev20220203102046:\n      Successfully uninstalled Django-4.1.dev20220203102046\nSuccessfully installed Django-4.1.dev20220203102046\nTesting against Django installed in '/testbed/django'\nImporting application template_tests\nFound 10 test(s).\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n", {}]