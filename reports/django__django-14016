[{"repo": "django/django", "instance_id": "django__django-14016", "base_commit": "1710cdbe79c90665046034fe1700933d038d90ad", "patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -5,7 +5,6 @@\n large and/or so that they can be used by other modules without getting into\n circular import difficulties.\n \"\"\"\n-import copy\n import functools\n import inspect\n from collections import namedtuple\n@@ -46,10 +45,12 @@ def _combine(self, other, conn):\n \n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n-            return copy.deepcopy(self)\n+            _, args, kwargs = self.deconstruct()\n+            return type(self)(*args, **kwargs)\n         # Or if this Q is empty, ignore it and just use `other`.\n         elif not self:\n-            return copy.deepcopy(other)\n+            _, args, kwargs = other.deconstruct()\n+            return type(other)(*args, **kwargs)\n \n         obj = type(self)()\n         obj.connector = conn\n", "test_patch": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -8,6 +8,10 @@ def test_combine_and_empty(self):\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n \n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n     def test_combine_and_both_empty(self):\n         self.assertEqual(Q() & Q(), Q())\n \n@@ -16,6 +20,10 @@ def test_combine_or_empty(self):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n", "problem_statement": "\"TypeError: cannot pickle\" when applying | operator to a Q object\nDescription\n\t \n\t\t(last modified by Daniel Izquierdo)\n\t \nUsing a reference to a non-pickleable type of object such as dict_keys in a Q object makes the | operator fail:\n>>> from django.db.models import Q\n>>> Q(x__in={}.keys())\n<Q: (AND: ('x__in', dict_keys([])))>\n>>> Q() | Q(x__in={}.keys())\nTraceback (most recent call last):\n...\nTypeError: cannot pickle 'dict_keys' object\nEven though this particular example could be solved by doing Q() | Q(x__in={}) it still feels like using .keys() should work.\nI can work on a patch if there's agreement that this should not crash.\n", "hints_text": "Thanks for this report. Regression in bb0b6e526340e638522e093765e534df4e4393d2.", "created_at": "2021-02-17T16:06:20Z", "version": "4.0", "FAIL_TO_PASS": "[\"test_combine_and_empty (queries.test_q.QTests)\", \"test_combine_or_empty (queries.test_q.QTests)\"]", "PASS_TO_PASS": "[\"test_combine_and_both_empty (queries.test_q.QTests)\", \"test_combine_not_q_object (queries.test_q.QTests)\", \"test_combine_or_both_empty (queries.test_q.QTests)\", \"test_deconstruct (queries.test_q.QTests)\", \"test_deconstruct_and (queries.test_q.QTests)\", \"test_deconstruct_multiple_kwargs (queries.test_q.QTests)\", \"test_deconstruct_negated (queries.test_q.QTests)\", \"test_deconstruct_nested (queries.test_q.QTests)\", \"test_deconstruct_or (queries.test_q.QTests)\", \"test_reconstruct (queries.test_q.QTests)\", \"test_reconstruct_and (queries.test_q.QTests)\", \"test_reconstruct_negated (queries.test_q.QTests)\", \"test_reconstruct_or (queries.test_q.QTests)\"]", "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/db/models/query_utils.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 1710cdbe79c90665046034fe1700933d038d90ad\nAuthor: Amir Ajorloo <amirajorloo@gmail.com>\nDate:   Thu Feb 18 11:48:19 2021 +0330\n\n    Fixed #32443 -- Removed \"shifted\" CSS class when admin's sidebar is disabled.\n\ndiff --git a/django/contrib/admin/templates/admin/base.html b/django/contrib/admin/templates/admin/base.html\nindex 23cae64ee5..271f774fde 100644\n--- a/django/contrib/admin/templates/admin/base.html\n+++ b/django/contrib/admin/templates/admin/base.html\n@@ -69,7 +69,7 @@\n     {% endblock %}\n     {% endif %}\n \n-    <div class=\"main shifted\" id=\"main\">\n+    <div class=\"main\" id=\"main\">\n       {% if not is_popup and is_nav_sidebar_enabled %}\n         {% block nav-sidebar %}\n           {% include \"admin/nav_sidebar.html\" %}\ndiff --git a/tests/admin_views/test_nav_sidebar.py b/tests/admin_views/test_nav_sidebar.py\nindex b3d4955b19..be1cfb5209 100644\n--- a/tests/admin_views/test_nav_sidebar.py\n+++ b/tests/admin_views/test_nav_sidebar.py\n@@ -39,6 +39,7 @@ class AdminSidebarTests(TestCase):\n \n     def test_sidebar_not_on_index(self):\n         response = self.client.get(reverse('test_with_sidebar:index'))\n+        self.assertContains(response, '<div class=\"main\" id=\"main\">')\n         self.assertNotContains(response, '<nav class=\"sticky\" id=\"nav-sidebar\">')\n \n     def test_sidebar_disabled(self):\ndiff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c2623f099f..c957ffa564 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -5,7 +5,6 @@ Factored out from django.db.models.query to avoid making the main module very\n large and/or so that they can be used by other modules without getting into\n circular import difficulties.\n \"\"\"\n-import copy\n import functools\n import inspect\n from collections import namedtuple\n@@ -46,10 +45,12 @@ class Q(tree.Node):\n \n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n-            return copy.deepcopy(self)\n+            _, args, kwargs = self.deconstruct()\n+            return type(self)(*args, **kwargs)\n         # Or if this Q is empty, ignore it and just use `other`.\n         elif not self:\n-            return copy.deepcopy(other)\n+            _, args, kwargs = other.deconstruct()\n+            return type(other)(*args, **kwargs)\n \n         obj = type(self)()\n         obj.connector = conn\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (3.8.1)\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (2024.2)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.2.10->Django==4.0) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.0-0.editable-py3-none-any.whl size=25589 sha256=8758e3e4fac1ab1ab1c5c9ca1be296a856333a10e6177a14c84cacab12629421\n  Stored in directory: /tmp/pip-ephem-wheel-cache-yog3jxss/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.0\n    Uninstalling Django-4.0:\n      Successfully uninstalled Django-4.0\nSuccessfully installed Django-4.0\nTesting against Django installed in '/testbed/django'\nImporting application queries\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (1 silenced).\n", {}]