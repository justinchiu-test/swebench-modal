[{"repo": "django/django", "instance_id": "django__django-13590", "base_commit": "755dbf39fcdc491fe9b588358303e259c7750be4", "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,14 @@ def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            values = (\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n             )\n+            type_ = type(value)\n+            if hasattr(type_, '_make'):  # namedtuple\n+                return type_(*values)\n+            return type_(values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n", "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2,6 +2,7 @@\n import pickle\n import unittest\n import uuid\n+from collections import namedtuple\n from copy import deepcopy\n from decimal import Decimal\n from unittest import mock\n@@ -813,7 +814,7 @@ def setUpTestData(cls):\n         Company.objects.create(name='5040 Ltd', num_employees=50, num_chairs=40, ceo=ceo)\n         Company.objects.create(name='5050 Ltd', num_employees=50, num_chairs=50, ceo=ceo)\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n-        Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n+        cls.c5 = Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n     def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n         # __in lookups can use F() expressions for integers.\n@@ -884,6 +885,13 @@ def test_range_lookup_allows_F_expressions_and_expressions_for_integers(self):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n", "problem_statement": "Upgrading 2.2>3.0 causes named tuples used as arguments to __range to error.\nDescription\n\t\nI noticed this while upgrading a project from 2.2 to 3.0.\nThis project passes named 2-tuples as arguments to range queryset filters. This works fine on 2.2. On 3.0 it causes the following error: TypeError: __new__() missing 1 required positional argument: 'far'.\nThis happens because django.db.models.sql.query.Query.resolve_lookup_value goes into the tuple elements to resolve lookups and then attempts to reconstitute the tuple with the resolved elements.\nWhen it attempts to construct the new tuple it preserves the type (the named tuple) but it passes a iterator to it's constructor.\nNamedTuples don't have the code path for copying an iterator, and so it errors on insufficient arguments.\nThe fix is to * expand the contents of the iterator into the constructor.\n", "hints_text": "", "created_at": "2020-10-23T09:34:55Z", "version": "3.2", "FAIL_TO_PASS": "[\"test_range_lookup_namedtuple (expressions.tests.IterableLookupInnerExpressionsTests)\"]", "PASS_TO_PASS": "[\"test_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_non_empty_group_by (expressions.tests.ExpressionWrapperTests)\", \"test_deconstruct (expressions.tests.FTests)\", \"test_deepcopy (expressions.tests.FTests)\", \"test_equal (expressions.tests.FTests)\", \"test_hash (expressions.tests.FTests)\", \"test_not_equal_Value (expressions.tests.FTests)\", \"test_optimizations (expressions.tests.ExistsTests)\", \"test_and (expressions.tests.CombinableTests)\", \"test_negation (expressions.tests.CombinableTests)\", \"test_or (expressions.tests.CombinableTests)\", \"test_reversed_and (expressions.tests.CombinableTests)\", \"test_reversed_or (expressions.tests.CombinableTests)\", \"test_aggregates (expressions.tests.ReprTests)\", \"test_distinct_aggregates (expressions.tests.ReprTests)\", \"test_expressions (expressions.tests.ReprTests)\", \"test_filtered_aggregates (expressions.tests.ReprTests)\", \"test_functions (expressions.tests.ReprTests)\", \"test_resolve_output_field (expressions.tests.CombinedExpressionTests)\", \"test_month_aggregation (expressions.tests.FieldTransformTests)\", \"test_multiple_transforms_in_values (expressions.tests.FieldTransformTests)\", \"test_transform_in_values (expressions.tests.FieldTransformTests)\", \"test_equal (expressions.tests.SimpleExpressionTests)\", \"test_hash (expressions.tests.SimpleExpressionTests)\", \"test_F_reuse (expressions.tests.ExpressionsTests)\", \"test_insensitive_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_patterns_escape (expressions.tests.ExpressionsTests)\", \"test_complex_expressions (expressions.tests.ExpressionsNumericTests)\", \"test_fill_with_value_from_same_object (expressions.tests.ExpressionsNumericTests)\", \"test_filter_not_equals_other_field (expressions.tests.ExpressionsNumericTests)\", \"test_increment_value (expressions.tests.ExpressionsNumericTests)\", \"test_compile_unresolved (expressions.tests.ValueTests)\", \"test_deconstruct (expressions.tests.ValueTests)\", \"test_deconstruct_output_field (expressions.tests.ValueTests)\", \"test_equal (expressions.tests.ValueTests)\", \"test_equal_output_field (expressions.tests.ValueTests)\", \"test_hash (expressions.tests.ValueTests)\", \"test_raise_empty_expressionlist (expressions.tests.ValueTests)\", \"test_resolve_output_field (expressions.tests.ValueTests)\", \"test_resolve_output_field_failure (expressions.tests.ValueTests)\", \"test_update_TimeField_using_Value (expressions.tests.ValueTests)\", \"test_update_UUIDField_using_Value (expressions.tests.ValueTests)\", \"test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_expressions_in_lookups_join_choice (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_datetimes (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_in_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_range_lookup_allows_F_expressions_and_expressions_for_integers (expressions.tests.IterableLookupInnerExpressionsTests)\", \"test_lefthand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_and (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_left_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_or (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_right_shift_operator (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_bitwise_xor_null (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_division (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_lefthand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_addition (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_division (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_modulo (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_multiplication (expressions.tests.ExpressionOperatorTests)\", \"test_right_hand_subtraction (expressions.tests.ExpressionOperatorTests)\", \"test_righthand_power (expressions.tests.ExpressionOperatorTests)\", \"test_date_case_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_comparison (expressions.tests.FTimeDeltaTests)\", \"test_date_minus_duration (expressions.tests.FTimeDeltaTests)\", \"test_date_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_date_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_datetime_subtraction_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_delta_add (expressions.tests.FTimeDeltaTests)\", \"test_delta_subtract (expressions.tests.FTimeDeltaTests)\", \"test_delta_update (expressions.tests.FTimeDeltaTests)\", \"test_duration_expressions (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime (expressions.tests.FTimeDeltaTests)\", \"test_duration_with_datetime_microseconds (expressions.tests.FTimeDeltaTests)\", \"test_durationfield_add (expressions.tests.FTimeDeltaTests)\", \"test_exclude (expressions.tests.FTimeDeltaTests)\", \"test_invalid_operator (expressions.tests.FTimeDeltaTests)\", \"test_mixed_comparisons2 (expressions.tests.FTimeDeltaTests)\", \"test_multiple_query_compilation (expressions.tests.FTimeDeltaTests)\", \"test_negative_timedelta_update (expressions.tests.FTimeDeltaTests)\", \"test_query_clone (expressions.tests.FTimeDeltaTests)\", \"test_time_subquery_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_time_subtraction (expressions.tests.FTimeDeltaTests)\", \"test_aggregate_subquery_annotation (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_count (expressions.tests.BasicExpressionsTests)\", \"test_annotate_values_filter (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_nested_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotation_with_outerref (expressions.tests.BasicExpressionsTests)\", \"test_annotations_within_subquery (expressions.tests.BasicExpressionsTests)\", \"test_arithmetic (expressions.tests.BasicExpressionsTests)\", \"test_case_in_filter_if_boolean_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exist_single_field_output_field (expressions.tests.BasicExpressionsTests)\", \"test_exists_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_explicit_output_field (expressions.tests.BasicExpressionsTests)\", \"test_filter_inter_attribute (expressions.tests.BasicExpressionsTests)\", \"test_filter_with_join (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_annotate_that_uses_q (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_q_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_filtering_on_rawsql_that_is_boolean (expressions.tests.BasicExpressionsTests)\", \"test_in_subquery (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_incorrect_joined_field_in_F_expression (expressions.tests.BasicExpressionsTests)\", \"test_nested_outerref_with_function (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_join_outer_ref (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_2 (expressions.tests.BasicExpressionsTests)\", \"test_nested_subquery_outer_ref_with_autofield (expressions.tests.BasicExpressionsTests)\", \"test_new_object_create (expressions.tests.BasicExpressionsTests)\", \"test_new_object_save (expressions.tests.BasicExpressionsTests)\", \"test_object_create_with_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_object_update (expressions.tests.BasicExpressionsTests)\", \"test_object_update_fk (expressions.tests.BasicExpressionsTests)\", \"test_object_update_unsaved_objects (expressions.tests.BasicExpressionsTests)\", \"test_order_by_exists (expressions.tests.BasicExpressionsTests)\", \"test_order_by_multiline_sql (expressions.tests.BasicExpressionsTests)\", \"test_order_of_operations (expressions.tests.BasicExpressionsTests)\", \"test_outerref (expressions.tests.BasicExpressionsTests)\", \"test_outerref_mixed_case_table_name (expressions.tests.BasicExpressionsTests)\", \"test_outerref_with_operator (expressions.tests.BasicExpressionsTests)\", \"test_parenthesis_priority (expressions.tests.BasicExpressionsTests)\", \"test_pickle_expression (expressions.tests.BasicExpressionsTests)\", \"test_subquery (expressions.tests.BasicExpressionsTests)\", \"test_subquery_eq (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_aggregate (expressions.tests.BasicExpressionsTests)\", \"test_subquery_filter_by_lazy (expressions.tests.BasicExpressionsTests)\", \"test_subquery_group_by_outerref_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_in_filter (expressions.tests.BasicExpressionsTests)\", \"test_subquery_references_joined_table_twice (expressions.tests.BasicExpressionsTests)\", \"test_ticket_11722_iexact_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_16731_startswith_lookup (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_chained_filters (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_join_reuse (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering (expressions.tests.BasicExpressionsTests)\", \"test_ticket_18375_kwarg_ordering_2 (expressions.tests.BasicExpressionsTests)\", \"test_update (expressions.tests.BasicExpressionsTests)\", \"test_update_inherited_field_value (expressions.tests.BasicExpressionsTests)\", \"test_update_with_fk (expressions.tests.BasicExpressionsTests)\", \"test_update_with_none (expressions.tests.BasicExpressionsTests)\", \"test_uuid_pk_subquery (expressions.tests.BasicExpressionsTests)\"]", "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d"}, "Generating locales (this might take a while)...\n  en_US.UTF-8... done\nGeneration complete.\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/db/models/sql/query.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 755dbf39fcdc491fe9b588358303e259c7750be4\nAuthor: Tim Graham <timograham@gmail.com>\nDate:   Mon Sep 7 15:45:56 2020 -0400\n\n    Replaced @no_oracle skips with DatabaseFeatures.allows_group_by_lob.\n\ndiff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py\nindex 0b315aac02..03c97e6691 100644\n--- a/django/db/backends/base/features.py\n+++ b/django/db/backends/base/features.py\n@@ -4,6 +4,8 @@ from django.utils.functional import cached_property\n \n class BaseDatabaseFeatures:\n     gis_enabled = False\n+    # Oracle can't group by LOB (large object) data types.\n+    allows_group_by_lob = True\n     allows_group_by_pk = False\n     allows_group_by_selected_pks = False\n     empty_fetchmany_value = []\ndiff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\nindex b0eebe5008..63d825f68a 100644\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -4,6 +4,9 @@ from django.utils.functional import cached_property\n \n \n class DatabaseFeatures(BaseDatabaseFeatures):\n+    # Oracle crashes with \"ORA-00932: inconsistent datatypes: expected - got\n+    # BLOB\" when grouping by LOBs (#24096).\n+    allows_group_by_lob = False\n     interprets_empty_strings_as_nulls = True\n     has_select_for_update = True\n     has_select_for_update_nowait = True\ndiff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 54c53ef4de..ec811ca511 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -5,6 +5,7 @@ from operator import attrgetter, itemgetter\n from uuid import UUID\n \n from django.core.exceptions import FieldError\n+from django.db import connection\n from django.db.models import (\n     BinaryField, BooleanField, Case, Count, DecimalField, F,\n     GenericIPAddressField, IntegerField, Max, Min, Q, Sum, TextField, Value,\n@@ -56,10 +57,13 @@ class CaseExpressionTests(TestCase):\n         O2OCaseTestModel.objects.create(o2o=o, integer=1)\n         FKCaseTestModel.objects.create(fk=o, integer=5)\n \n-        # GROUP BY on Oracle fails with TextField/BinaryField; see #24096.\n-        cls.non_lob_fields = [\n+        cls.group_by_fields = [\n             f.name for f in CaseTestModel._meta.get_fields()\n-            if not (f.is_relation and f.auto_created) and not isinstance(f, (BinaryField, TextField))\n+            if not (f.is_relation and f.auto_created) and\n+            (\n+                connection.features.allows_group_by_lob or\n+                not isinstance(f, (BinaryField, TextField))\n+            )\n         ]\n \n     def test_annotate(self):\n@@ -197,7 +201,7 @@ class CaseExpressionTests(TestCase):\n \n     def test_annotate_with_aggregation_in_value(self):\n         self.assertQuerysetEqual(\n-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n+            CaseTestModel.objects.values(*self.group_by_fields).annotate(\n                 min=Min('fk_rel__integer'),\n                 max=Max('fk_rel__integer'),\n             ).annotate(\n@@ -212,7 +216,7 @@ class CaseExpressionTests(TestCase):\n \n     def test_annotate_with_aggregation_in_condition(self):\n         self.assertQuerysetEqual(\n-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n+            CaseTestModel.objects.values(*self.group_by_fields).annotate(\n                 min=Min('fk_rel__integer'),\n                 max=Max('fk_rel__integer'),\n             ).annotate(\n@@ -227,7 +231,7 @@ class CaseExpressionTests(TestCase):\n \n     def test_annotate_with_aggregation_in_predicate(self):\n         self.assertQuerysetEqual(\n-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n+            CaseTestModel.objects.values(*self.group_by_fields).annotate(\n                 max=Max('fk_rel__integer'),\n             ).annotate(\n                 test=Case(\n@@ -483,7 +487,7 @@ class CaseExpressionTests(TestCase):\n \n     def test_filter_with_aggregation_in_value(self):\n         self.assertQuerysetEqual(\n-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n+            CaseTestModel.objects.values(*self.group_by_fields).annotate(\n                 min=Min('fk_rel__integer'),\n                 max=Max('fk_rel__integer'),\n             ).filter(\n@@ -498,7 +502,7 @@ class CaseExpressionTests(TestCase):\n \n     def test_filter_with_aggregation_in_condition(self):\n         self.assertQuerysetEqual(\n-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n+            CaseTestModel.objects.values(*self.group_by_fields).annotate(\n                 min=Min('fk_rel__integer'),\n                 max=Max('fk_rel__integer'),\n             ).filter(\n@@ -513,7 +517,7 @@ class CaseExpressionTests(TestCase):\n \n     def test_filter_with_aggregation_in_predicate(self):\n         self.assertQuerysetEqual(\n-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n+            CaseTestModel.objects.values(*self.group_by_fields).annotate(\n                 max=Max('fk_rel__integer'),\n             ).filter(\n                 integer=Case(\ndiff --git a/tests/gis_tests/geoapp/test_regress.py b/tests/gis_tests/geoapp/test_regress.py\nindex 661124dcba..674f19ba54 100644\n--- a/tests/gis_tests/geoapp/test_regress.py\n+++ b/tests/gis_tests/geoapp/test_regress.py\n@@ -5,7 +5,6 @@ from django.contrib.gis.shortcuts import render_to_kmz\n from django.db.models import Count, Min\n from django.test import TestCase, skipUnlessDBFeature\n \n-from ..utils import no_oracle\n from .models import City, PennsylvaniaCity, State, Truth\n \n \n@@ -65,10 +64,7 @@ class GeoRegressionTests(TestCase):\n         # .count() should not throw TypeError in __eq__\n         self.assertEqual(cities_within_state.count(), 1)\n \n-    # TODO: fix on Oracle -- get the following error because the SQL is ordered\n-    # by a geometry object, which Oracle apparently doesn't like:\n-    #  ORA-22901: cannot compare nested table or VARRAY or LOB attributes of an object type\n-    @no_oracle\n+    @skipUnlessDBFeature('allows_group_by_lob')\n     def test_defer_or_only_with_annotate(self):\n         \"Regression for #16409. Make sure defer() and only() work with annotate()\"\n         self.assertIsInstance(list(City.objects.annotate(Count('point')).defer('name')), list)\ndiff --git a/tests/gis_tests/relatedapp/tests.py b/tests/gis_tests/relatedapp/tests.py\nindex 5f003b78f2..2b4a0b0ed0 100644\n--- a/tests/gis_tests/relatedapp/tests.py\n+++ b/tests/gis_tests/relatedapp/tests.py\n@@ -222,10 +222,7 @@ class RelatedGeoModelTest(TestCase):\n         self.assertIn('Aurora', names)\n         self.assertIn('Kecksburg', names)\n \n-    # TODO: fix on Oracle -- get the following error because the SQL is ordered\n-    # by a geometry object, which Oracle apparently doesn't like:\n-    #  ORA-22901: cannot compare nested table or VARRAY or LOB attributes of an object type\n-    @no_oracle\n+    @skipUnlessDBFeature('allows_group_by_lob')\n     def test12a_count(self):\n         \"Testing `Count` aggregate on geo-fields.\"\n         # The City, 'Fort Worth' uses the same location as Dallas.\n@@ -247,10 +244,7 @@ class RelatedGeoModelTest(TestCase):\n         self.assertEqual(1, len(vqs))\n         self.assertEqual(3, vqs[0]['num_books'])\n \n-    # TODO: fix on Oracle -- get the following error because the SQL is ordered\n-    # by a geometry object, which Oracle apparently doesn't like:\n-    #  ORA-22901: cannot compare nested table or VARRAY or LOB attributes of an object type\n-    @no_oracle\n+    @skipUnlessDBFeature('allows_group_by_lob')\n     def test13c_count(self):\n         \"Testing `Count` aggregate with `.values()`.  See #15305.\"\n         qs = Location.objects.filter(id=5).annotate(num_cities=Count('city')).values('id', 'point', 'num_cities')\ndiff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f45589e075..1c63d70bf9 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -355,7 +355,7 @@ class TestQuerying(TestCase):\n             operator.itemgetter('key', 'count'),\n         )\n \n-    @skipIf(connection.vendor == 'oracle', \"Oracle doesn't support grouping by LOBs, see #24096.\")\n+    @skipUnlessDBFeature('allows_group_by_lob')\n     def test_ordering_grouping_by_count(self):\n         qs = NullableJSONModel.objects.filter(\n             value__isnull=False,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..ee98984826 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,14 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            values = (\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n             )\n+            type_ = type(value)\n+            if hasattr(type_, '_make'):  # namedtuple\n+                return type_(*values)\n+            return type_(values)\n         return value\n \n     def solve_lookup_type(self, lookup):\nObtaining file:///testbed\nRequirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)\nRequirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.2)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)\nRequirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 3.2\n    Uninstalling Django-3.2:\n      Successfully uninstalled Django-3.2\n  Running setup.py develop for Django\nSuccessfully installed Django-3.2\nTesting against Django installed in '/testbed/django'\nImporting application expressions\nSkipping setup of unused database(s): other.\nOperations to perform:\n  Synchronize unmigrated apps: auth, contenttypes, expressions, messages, sessions, staticfiles\n  Apply all migrations: admin, sites\nSynchronizing apps without migrations:\n  Creating tables...\n    Creating table django_content_type\n    Creating table auth_permission\n    Creating table auth_group\n    Creating table auth_user\n    Creating table django_session\n    Creating table expressions_manager\n    Creating table expressions_employee\n    Creating table expressions_remoteemployee\n    Creating table expressions_company\n    Creating table expressions_number\n    Creating table expressions_ExPeRiMeNt\n    Creating table expressions_result\n    Creating table expressions_time\n    Creating table expressions_simulationrun\n    Creating table expressions_uuidpk\n    Creating table expressions_uuid\n    Running deferred SQL...\nRunning migrations:\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK\nSystem check identified no issues (0 silenced).\n", {}]