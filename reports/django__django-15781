[{"repo": "django/django", "instance_id": "django__django-15781", "base_commit": "8d160f154f0240a423e83ffe0690e472f837373c", "patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -286,10 +286,10 @@ def create_parser(self, prog_name, subcommand, **kwargs):\n         Create and return the ``ArgumentParser`` which will be used to\n         parse the arguments to this command.\n         \"\"\"\n+        kwargs.setdefault(\"formatter_class\", DjangoHelpFormatter)\n         parser = CommandParser(\n             prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n             description=self.help or None,\n-            formatter_class=DjangoHelpFormatter,\n             missing_args_message=getattr(self, \"missing_args_message\", None),\n             called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n             **kwargs,\n", "test_patch": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,4 +1,5 @@\n import os\n+from argparse import ArgumentDefaultsHelpFormatter\n from io import StringIO\n from unittest import mock\n \n@@ -408,8 +409,14 @@ def test_subparser_invalid_option(self):\n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = \"some epilog text\"\n-        parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n         self.assertEqual(parser.epilog, epilog)\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n \n     def test_outputwrapper_flush(self):\n         out = StringIO()\n", "problem_statement": "Customizable management command formatters.\nDescription\n\t\nWith code like:\nclass Command(BaseCommand):\n\thelp = '''\n\tImport a contract from tzkt.\n\tExample usage:\n\t\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n\t'''\nHelp output is:\n$ ./manage.py help tzkt_import\nusage: manage.py tzkt_import [-h] [--api API] [--version] [-v {0,1,2,3}] [--settings SETTINGS]\n\t\t\t\t\t\t\t [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color]\n\t\t\t\t\t\t\t [--skip-checks]\n\t\t\t\t\t\t\t blockchain target\nImport a contract from tzkt Example usage: ./manage.py tzkt_import 'Tezos Mainnet'\nKT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\npositional arguments:\n blockchain\t\t\tName of the blockchain to import into\n target\t\t\t\tId of the contract to import\nWhen that was expected:\n$ ./manage.py help tzkt_import\nusage: manage.py tzkt_import [-h] [--api API] [--version] [-v {0,1,2,3}] [--settings SETTINGS]\n\t\t\t\t\t\t\t [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color]\n\t\t\t\t\t\t\t [--skip-checks]\n\t\t\t\t\t\t\t blockchain target\nImport a contract from tzkt \nExample usage: \n\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\npositional arguments:\n blockchain\t\t\tName of the blockchain to import into\n target\t\t\t\tId of the contract to import\n", "hints_text": "This seems no fault of Django but is rather \u200bthe default behavior of ArgumentParser (\"By default, ArgumentParser objects line-wrap the description and epilog texts in command-line help messages\"). This can be changed by using a custom \u200bformatter_class, though Django already specifies a custom one (\u200bDjangoHelpFormatter).\nIt seems reasonable, to make it customizable by passing via kwargs to the \u200bBaseCommand.create_parser() (as documented): django/core/management/base.py diff --git a/django/core/management/base.py b/django/core/management/base.py index f0e711ac76..52407807d8 100644 a b class BaseCommand: 286286 Create and return the ``ArgumentParser`` which will be used to 287287 parse the arguments to this command. 288288 \"\"\" 289 kwargs.setdefault(\"formatter_class\", DjangoHelpFormatter) 289290 parser = CommandParser( 290291 prog=\"%s %s\" % (os.path.basename(prog_name), subcommand), 291292 description=self.help or None, 292 formatter_class=DjangoHelpFormatter, 293293 missing_args_message=getattr(self, \"missing_args_message\", None), 294294 called_from_command_line=getattr(self, \"_called_from_command_line\", None), 295295 **kwargs, What do you think?\nLooks good but I don't see a reason for keeping a default that swallows newlines because PEP257 forbids having a multiline sentence on the first line anyway: Multi-line docstrings consist of a summary line just like a one-line docstring, followed by a blank line, followed by a more elaborate description. As such, the default formater which purpose is to unwrap the first sentence encourages breaking PEP 257. And users who are naturally complying with PEP257 will have to override the formatter, it should be the other way around.\nAlso, the not-unwraping formater will also look fine with existing docstrings, it will work for both use cases, while the current one only works for one use case and breaks the other. The default formater should work for both\nReplying to James Pic: Also, the not-unwraping formater will also look fine with existing docstrings, it will work for both use cases, while the current one only works for one use case and breaks the other. The default formater should work for both It seems you think that Python's (not Django's) default behavior should be changed according to PEP 257. I'd recommend to start a discussion in Python's bugtracker. As far as I'm aware the proposed solution will allow users to freely change a formatter, which should be enough from the Django point of view.\nNo, I think that Django's default behavior should match Python's PEP 257, and at the same time, have a default that works in all use cases. I think my report and comments are pretty clear, I fail to understand how you could get my comment completely backward, so, unless you have any specific question about this statement, I'm going to give up on this.\nSo as part of this issue, do we make changes to allow a user to override the formatter through kwargs and also keep DjangoHelpFormatter as the default?\nReplying to Subhankar Hotta: So as part of this issue, do we make changes to allow a user to override the formatter through kwargs and also keep DjangoHelpFormatter as the default? Yes, see comment.", "created_at": "2022-06-18T19:39:34Z", "version": "4.2", "FAIL_TO_PASS": "[\"BaseCommand.create_parser() passes kwargs to CommandParser.\"]", "PASS_TO_PASS": "[\"test_get_random_secret_key (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_false (user_commands.tests.UtilsTests)\", \"test_is_ignored_path_true (user_commands.tests.UtilsTests)\", \"test_no_existent_external_program (user_commands.tests.UtilsTests)\", \"test_normalize_path_patterns_truncates_wildcard_base (user_commands.tests.UtilsTests)\", \"By default, call_command should not trigger the check framework, unless\", \"When passing the long option name to call_command, the available option\", \"It should be possible to pass non-string arguments to call_command.\", \"test_call_command_unrecognized_option (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_mixed_options (user_commands.tests.CommandTests)\", \"test_call_command_with_required_parameters_in_options (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_no_app_labels_and_parameters_raise_command_error (user_commands.tests.CommandTests)\", \"test_calling_a_command_with_only_empty_parameter_should_ends_gracefully (user_commands.tests.CommandTests)\", \"test_calling_command_with_app_labels_and_parameters_should_be_ok (user_commands.tests.CommandTests)\", \"test_calling_command_with_parameters_and_app_labels_at_the_end_should_be_ok (user_commands.tests.CommandTests)\", \"test_check_migrations (user_commands.tests.CommandTests)\", \"test_command (user_commands.tests.CommandTests)\", \"test_command_add_arguments_after_common_arguments (user_commands.tests.CommandTests)\", \"test_command_style (user_commands.tests.CommandTests)\", \"Management commands can also be loaded from Python eggs.\", \"An unknown command raises CommandError\", \"find_command should still work when the PATH environment variable\", \"test_language_preserved (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_const_options (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_options (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_with_same_dest_args (user_commands.tests.CommandTests)\", \"test_mutually_exclusive_group_required_with_same_dest_options (user_commands.tests.CommandTests)\", \"When the Command handle method is decorated with @no_translations,\", \"test_output_transaction (user_commands.tests.CommandTests)\", \"test_outputwrapper_flush (user_commands.tests.CommandTests)\", \"test_required_const_options (user_commands.tests.CommandTests)\", \"test_required_list_option (user_commands.tests.CommandTests)\", \"test_requires_system_checks_empty (user_commands.tests.CommandTests)\", \"test_requires_system_checks_invalid (user_commands.tests.CommandTests)\", \"test_requires_system_checks_specific (user_commands.tests.CommandTests)\", \"test_subparser (user_commands.tests.CommandTests)\", \"test_subparser_dest_args (user_commands.tests.CommandTests)\", \"test_subparser_dest_required_args (user_commands.tests.CommandTests)\", \"test_subparser_invalid_option (user_commands.tests.CommandTests)\", \"Exception raised in a command should raise CommandError with\", \"To avoid conflicts with custom options, commands don't allow\", \"test_script_prefix_set_in_commands (user_commands.tests.CommandRunTests)\", \"test_skip_checks (user_commands.tests.CommandRunTests)\"]", "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/core/management/base.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 8d160f154f0240a423e83ffe0690e472f837373c\nAuthor: Matt Brewer <matt.brewer693@gmail.com>\nDate:   Fri Jun 17 08:44:03 2022 +0100\n\n    Fixed #33788 -- Added TrigramStrictWordSimilarity() and TrigramStrictWordDistance() on PostgreSQL.\n\ndiff --git a/AUTHORS b/AUTHORS\nindex b726a8a67b..d8a3cf9103 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -636,6 +636,7 @@ answer newbie questions, and generally made Django that much better:\n     Mathieu Agopian <mathieu.agopian@gmail.com>\n     Mat\u00edas Bordese\n     Matt Boersma <matt@sprout.org>\n+    Matt Brewer <matt.brewer693@gmail.com>\n     Matt Croydon <http://www.postneo.com/>\n     Matt Deacalion Stevens <matt@dirtymonkey.co.uk>\n     Matt Dennenbaum\ndiff --git a/django/contrib/postgres/apps.py b/django/contrib/postgres/apps.py\nindex 79fbe57c8f..494cea245a 100644\n--- a/django/contrib/postgres/apps.py\n+++ b/django/contrib/postgres/apps.py\n@@ -11,7 +11,13 @@ from django.db.models.indexes import IndexExpression\n from django.utils.translation import gettext_lazy as _\n \n from .indexes import OpClass\n-from .lookups import SearchLookup, TrigramSimilar, TrigramWordSimilar, Unaccent\n+from .lookups import (\n+    SearchLookup,\n+    TrigramSimilar,\n+    TrigramStrictWordSimilar,\n+    TrigramWordSimilar,\n+    Unaccent,\n+)\n from .serializers import RangeSerializer\n from .signals import register_type_handlers\n \n@@ -37,6 +43,8 @@ def uninstall_if_needed(setting, value, enter, **kwargs):\n         TextField._unregister_lookup(TrigramSimilar)\n         CharField._unregister_lookup(TrigramWordSimilar)\n         TextField._unregister_lookup(TrigramWordSimilar)\n+        CharField._unregister_lookup(TrigramStrictWordSimilar)\n+        TextField._unregister_lookup(TrigramStrictWordSimilar)\n         # Disconnect this receiver until the next time this app is installed\n         # and ready() connects it again to prevent unnecessary processing on\n         # each setting change.\n@@ -73,5 +81,7 @@ class PostgresConfig(AppConfig):\n         TextField.register_lookup(TrigramSimilar)\n         CharField.register_lookup(TrigramWordSimilar)\n         TextField.register_lookup(TrigramWordSimilar)\n+        CharField.register_lookup(TrigramStrictWordSimilar)\n+        TextField.register_lookup(TrigramStrictWordSimilar)\n         MigrationWriter.register_serializer(RANGE_TYPES, RangeSerializer)\n         IndexExpression.register_wrappers(OrderBy, OpClass, Collate)\ndiff --git a/django/contrib/postgres/lookups.py b/django/contrib/postgres/lookups.py\nindex 9fed0eea30..f2f88ebc0a 100644\n--- a/django/contrib/postgres/lookups.py\n+++ b/django/contrib/postgres/lookups.py\n@@ -63,3 +63,8 @@ class TrigramSimilar(PostgresOperatorLookup):\n class TrigramWordSimilar(PostgresOperatorLookup):\n     lookup_name = \"trigram_word_similar\"\n     postgres_operator = \"%%>\"\n+\n+\n+class TrigramStrictWordSimilar(PostgresOperatorLookup):\n+    lookup_name = \"trigram_strict_word_similar\"\n+    postgres_operator = \"%%>>\"\ndiff --git a/django/contrib/postgres/search.py b/django/contrib/postgres/search.py\nindex d43163a40b..2b57156263 100644\n--- a/django/contrib/postgres/search.py\n+++ b/django/contrib/postgres/search.py\n@@ -366,5 +366,14 @@ class TrigramWordDistance(TrigramWordBase):\n     arg_joiner = \" <<-> \"\n \n \n+class TrigramStrictWordDistance(TrigramWordBase):\n+    function = \"\"\n+    arg_joiner = \" <<<-> \"\n+\n+\n class TrigramWordSimilarity(TrigramWordBase):\n     function = \"WORD_SIMILARITY\"\n+\n+\n+class TrigramStrictWordSimilarity(TrigramWordBase):\n+    function = \"STRICT_WORD_SIMILARITY\"\ndiff --git a/docs/ref/contrib/postgres/lookups.txt b/docs/ref/contrib/postgres/lookups.txt\nindex 83f21e8dc1..3070227530 100644\n--- a/docs/ref/contrib/postgres/lookups.txt\n+++ b/docs/ref/contrib/postgres/lookups.txt\n@@ -7,6 +7,9 @@ Trigram similarity\n \n .. fieldlookup:: trigram_similar\n \n+``trigram_similar``\n+-------------------\n+\n The ``trigram_similar`` lookup allows you to perform trigram lookups,\n measuring the number of trigrams (three consecutive characters) shared, using a\n dedicated PostgreSQL extension. A trigram lookup is given an expression and\n@@ -27,6 +30,9 @@ The ``trigram_similar`` lookup can be used on\n \n .. fieldlookup:: trigram_word_similar\n \n+``trigram_word_similar``\n+------------------------\n+\n The ``trigram_word_similar`` lookup allows you to perform trigram word\n similarity lookups using a dedicated PostgreSQL extension. It can be\n approximately understood as measuring the greatest number of trigrams shared\n@@ -46,6 +52,25 @@ The ``trigram_word_similar`` lookup can be used on\n     >>> Sentence.objects.filter(name__trigram_word_similar='Middlesborough')\n     ['<Sentence: Gumby rides on the path of Middlesbrough>']\n \n+.. fieldlookup:: trigram_strict_word_similar\n+\n+``trigram_strict_word_similar``\n+-------------------------------\n+\n+.. versionadded:: 4.2\n+\n+Similar to :lookup:`trigram_word_similar`, except that it forces extent\n+boundaries to match word boundaries.\n+\n+To use it, add ``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS`\n+and activate the `pg_trgm extension`_ on PostgreSQL. You can install the\n+extension using the\n+:class:`~django.contrib.postgres.operations.TrigramExtension` migration\n+operation.\n+\n+The ``trigram_strict_word_similar`` lookup can be used on\n+:class:`~django.db.models.CharField` and :class:`~django.db.models.TextField`.\n+\n .. _`pg_trgm extension`: https://www.postgresql.org/docs/current/pgtrgm.html\n \n ``Unaccent``\ndiff --git a/docs/ref/contrib/postgres/search.txt b/docs/ref/contrib/postgres/search.txt\nindex e36f4028fe..2e2877a750 100644\n--- a/docs/ref/contrib/postgres/search.txt\n+++ b/docs/ref/contrib/postgres/search.txt\n@@ -286,9 +286,9 @@ Trigram similarity\n ==================\n \n Another approach to searching is trigram similarity. A trigram is a group of\n-three consecutive characters. In addition to the :lookup:`trigram_similar` and\n-:lookup:`trigram_word_similar` lookups, you can use a couple of other\n-expressions.\n+three consecutive characters. In addition to the :lookup:`trigram_similar`,\n+:lookup:`trigram_word_similar`, and :lookup:`trigram_strict_word_similar`\n+lookups, you can use a couple of other expressions.\n \n To use them, you need to activate the `pg_trgm extension\n <https://www.postgresql.org/docs/current/pgtrgm.html>`_ on PostgreSQL. You can\n@@ -334,6 +334,18 @@ Usage example::\n     ... ).filter(similarity__gt=0.3).order_by('-similarity')\n     [<Author: Katy Stevens>]\n \n+``TrigramStrictWordSimilarity``\n+-------------------------------\n+\n+.. class:: TrigramStrictWordSimilarity(string, expression, **extra)\n+\n+.. versionadded:: 4.2\n+\n+Accepts a string or expression, and a field name or expression. Returns the\n+trigram strict word similarity between the two arguments. Similar to\n+:class:`TrigramWordSimilarity() <TrigramWordSimilarity>`, except that it forces\n+extent boundaries to match word boundaries.\n+\n ``TrigramDistance``\n -------------------\n \n@@ -371,3 +383,13 @@ Usage example::\n     ...     distance=TrigramWordDistance(test, 'name'),\n     ... ).filter(distance__lte=0.7).order_by('distance')\n     [<Author: Katy Stevens>]\n+\n+``TrigramStrictWordDistance``\n+-----------------------------\n+\n+.. class:: TrigramStrictWordDistance(string, expression, **extra)\n+\n+.. versionadded:: 4.2\n+\n+Accepts a string or expression, and a field name or expression. Returns the\n+trigram strict word distance between the two arguments.\ndiff --git a/docs/releases/4.2.txt b/docs/releases/4.2.txt\nindex d43d391408..124470cf5b 100644\n--- a/docs/releases/4.2.txt\n+++ b/docs/releases/4.2.txt\n@@ -65,7 +65,12 @@ Minor features\n :mod:`django.contrib.postgres`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ...\n+* The new :lookup:`trigram_strict_word_similar` lookup, and the\n+  :class:`TrigramStrictWordSimilarity()\n+  <django.contrib.postgres.search.TrigramStrictWordSimilarity>` and\n+  :class:`TrigramStrictWordDistance()\n+  <django.contrib.postgres.search.TrigramStrictWordDistance>` expressions allow\n+  using trigram strict word similarity.\n \n :mod:`django.contrib.redirects`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndiff --git a/tests/postgres_tests/test_trigram.py b/tests/postgres_tests/test_trigram.py\nindex 6870e80737..2d7549fb4b 100644\n--- a/tests/postgres_tests/test_trigram.py\n+++ b/tests/postgres_tests/test_trigram.py\n@@ -7,6 +7,8 @@ try:\n     from django.contrib.postgres.search import (\n         TrigramDistance,\n         TrigramSimilarity,\n+        TrigramStrictWordDistance,\n+        TrigramStrictWordSimilarity,\n         TrigramWordDistance,\n         TrigramWordSimilarity,\n     )\n@@ -43,6 +45,25 @@ class TrigramTest(PostgreSQLTestCase):\n             self.Model.objects.filter(field__trigram_word_similar=\"Middlesborough\"),\n             [obj],\n         )\n+        self.assertSequenceEqual(\n+            self.Model.objects.filter(field__trigram_word_similar=\"Middle\"),\n+            [obj],\n+        )\n+\n+    def test_trigram_strict_word_search_matched(self):\n+        obj = self.Model.objects.create(\n+            field=\"Gumby rides on the path of Middlesbrough\",\n+        )\n+        self.assertSequenceEqual(\n+            self.Model.objects.filter(\n+                field__trigram_strict_word_similar=\"Middlesborough\"\n+            ),\n+            [obj],\n+        )\n+        self.assertSequenceEqual(\n+            self.Model.objects.filter(field__trigram_strict_word_similar=\"Middle\"),\n+            [],\n+        )\n \n     def test_trigram_similarity(self):\n         search = \"Bat sat on cat.\"\n@@ -75,6 +96,19 @@ class TrigramTest(PostgreSQLTestCase):\n             ],\n         )\n \n+    def test_trigram_strict_word_similarity(self):\n+        search = \"matt\"\n+        self.assertSequenceEqual(\n+            self.Model.objects.filter(field__trigram_word_similar=search)\n+            .annotate(word_similarity=TrigramStrictWordSimilarity(search, \"field\"))\n+            .values(\"field\", \"word_similarity\")\n+            .order_by(\"-word_similarity\"),\n+            [\n+                {\"field\": \"Cat sat on mat.\", \"word_similarity\": 0.5},\n+                {\"field\": \"Matthew\", \"word_similarity\": 0.44444445},\n+            ],\n+        )\n+\n     def test_trigram_similarity_alternate(self):\n         # Round result of distance because PostgreSQL uses greater precision.\n         self.assertQuerysetEqual(\n@@ -104,6 +138,20 @@ class TrigramTest(PostgreSQLTestCase):\n             ],\n         )\n \n+    def test_trigram_strict_word_distance(self):\n+        self.assertSequenceEqual(\n+            self.Model.objects.annotate(\n+                word_distance=TrigramStrictWordDistance(\"matt\", \"field\"),\n+            )\n+            .filter(word_distance__lte=0.7)\n+            .values(\"field\", \"word_distance\")\n+            .order_by(\"word_distance\"),\n+            [\n+                {\"field\": \"Cat sat on mat.\", \"word_distance\": 0.5},\n+                {\"field\": \"Matthew\", \"word_distance\": 0.5555556},\n+            ],\n+        )\n+\n \n class TrigramTextFieldTest(TrigramTest):\n     \"\"\"\ndiff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..abc6f79a15 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -286,10 +286,10 @@ class BaseCommand:\n         Create and return the ``ArgumentParser`` which will be used to\n         parse the arguments to this command.\n         \"\"\"\n+        kwargs.setdefault(\"formatter_class\", DjangoHelpFormatter)\n         parser = CommandParser(\n             prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n             description=self.help or None,\n-            formatter_class=DjangoHelpFormatter,\n             missing_args_message=getattr(self, \"missing_args_message\", None),\n             called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n             **kwargs,\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.5.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220617091430) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220617091430) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.5.2->Django==4.2.dev20220617091430) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.2.dev20220617091430-0.editable-py3-none-any.whl size=27083 sha256=696451f48aaeaf556196ade5f212234d4e586e6e2277af2aab8e306710b2c969\n  Stored in directory: /tmp/pip-ephem-wheel-cache-2w7wzfid/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.2.dev20220617091430\n    Uninstalling Django-4.2.dev20220617091430:\n      Successfully uninstalled Django-4.2.dev20220617091430\nSuccessfully installed Django-4.2.dev20220617091430\nTesting against Django installed in '/testbed/django'\nImporting application user_commands\nFound 44 test(s).\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n", {}]