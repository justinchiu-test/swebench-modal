[{"repo": "pydata/xarray", "instance_id": "pydata__xarray-4493", "base_commit": "a5f53e203c52a7605d5db799864046471115d04f", "patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -120,6 +120,16 @@ def as_variable(obj, name=None) -> \"Union[Variable, IndexVariable]\":\n     if isinstance(obj, Variable):\n         obj = obj.copy(deep=False)\n     elif isinstance(obj, tuple):\n+        if isinstance(obj[1], DataArray):\n+            # TODO: change into TypeError\n+            warnings.warn(\n+                (\n+                    \"Using a DataArray object to construct a variable is\"\n+                    \" ambiguous, please extract the data using the .data property.\"\n+                    \" This will raise a TypeError in 0.19.0.\"\n+                ),\n+                DeprecationWarning,\n+            )\n         try:\n             obj = Variable(*obj)\n         except (TypeError, ValueError) as error:\n", "test_patch": "diff --git a/xarray/tests/test_dask.py b/xarray/tests/test_dask.py\n--- a/xarray/tests/test_dask.py\n+++ b/xarray/tests/test_dask.py\n@@ -1233,7 +1233,7 @@ def test_map_blocks_to_array(map_ds):\n         lambda x: x.drop_vars(\"x\"),\n         lambda x: x.expand_dims(k=[1, 2, 3]),\n         lambda x: x.expand_dims(k=3),\n-        lambda x: x.assign_coords(new_coord=(\"y\", x.y * 2)),\n+        lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n         lambda x: x.astype(np.int32),\n         lambda x: x.x,\n     ],\ndiff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -4959,13 +4959,13 @@ def test_reduce_keepdims(self):\n         # Coordinates involved in the reduction should be removed\n         actual = ds.mean(keepdims=True)\n         expected = Dataset(\n-            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, keepdims=True))}, coords={\"c\": ds.c}\n+            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, keepdims=True).data)}, coords={\"c\": ds.c}\n         )\n         assert_identical(expected, actual)\n \n         actual = ds.mean(\"x\", keepdims=True)\n         expected = Dataset(\n-            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, axis=0, keepdims=True))},\n+            {\"a\": ([\"x\", \"y\"], np.mean(ds.a, axis=0, keepdims=True).data)},\n             coords={\"y\": ds.y, \"c\": ds.c},\n         )\n         assert_identical(expected, actual)\ndiff --git a/xarray/tests/test_interp.py b/xarray/tests/test_interp.py\n--- a/xarray/tests/test_interp.py\n+++ b/xarray/tests/test_interp.py\n@@ -190,7 +190,7 @@ def func(obj, dim, new_x):\n             \"w\": xdest[\"w\"],\n             \"z2\": xdest[\"z2\"],\n             \"y\": da[\"y\"],\n-            \"x\": ((\"z\", \"w\"), xdest),\n+            \"x\": ((\"z\", \"w\"), xdest.data),\n             \"x2\": ((\"z\", \"w\"), func(da[\"x2\"], \"x\", xdest)),\n         },\n     )\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -8,7 +8,7 @@\n import pytest\n import pytz\n \n-from xarray import Coordinate, Dataset, IndexVariable, Variable, set_options\n+from xarray import Coordinate, DataArray, Dataset, IndexVariable, Variable, set_options\n from xarray.core import dtypes, duck_array_ops, indexing\n from xarray.core.common import full_like, ones_like, zeros_like\n from xarray.core.indexing import (\n@@ -1081,6 +1081,9 @@ def test_as_variable(self):\n         td = np.array([timedelta(days=x) for x in range(10)])\n         assert as_variable(td, \"time\").dtype.kind == \"m\"\n \n+        with pytest.warns(DeprecationWarning):\n+            as_variable((\"x\", DataArray([])))\n+\n     def test_repr(self):\n         v = Variable([\"time\", \"x\"], [[1, 2, 3], [4, 5, 6]], {\"foo\": \"bar\"})\n         expected = dedent(\n", "problem_statement": "DataSet.update causes chunked dask DataArray to evalute its values eagerly \n**What happened**:\r\nUsed `DataSet.update` to update a chunked dask DataArray, but the DataArray is no longer chunked after the update.\r\n\r\n**What you expected to happen**:\r\nThe chunked DataArray should still be chunked after the update\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\n```python\r\nfoo = xr.DataArray(np.random.randn(3, 3), dims=(\"x\", \"y\")).chunk()  # foo is chunked\r\nds = xr.Dataset({\"foo\": foo, \"bar\": (\"x\", [1, 2, 3])})  # foo is still chunked here\r\nds  # you can verify that foo is chunked\r\n```\r\n```python\r\nupdate_dict = {\"foo\": ((\"x\", \"y\"), ds.foo[1:, :]), \"bar\": (\"x\", ds.bar[1:])}\r\nupdate_dict[\"foo\"][1]  # foo is still chunked\r\n```\r\n```python\r\nds.update(update_dict)\r\nds  # now foo is no longer chunked\r\n```\r\n\r\n**Environment**:\r\n\r\n<details><summary>Output of <tt>xr.show_versions()</tt></summary>\r\n\r\n```\r\ncommit: None\r\npython: 3.8.3 (default, Jul  2 2020, 11:26:31) \r\n[Clang 10.0.0 ]\r\npython-bits: 64\r\nOS: Darwin\r\nOS-release: 19.6.0\r\nmachine: x86_64\r\nprocessor: i386\r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: en_US.UTF-8\r\nlibhdf5: 1.10.6\r\nlibnetcdf: None\r\n\r\nxarray: 0.16.0\r\npandas: 1.0.5\r\nnumpy: 1.18.5\r\nscipy: 1.5.0\r\nnetCDF4: None\r\npydap: None\r\nh5netcdf: None\r\nh5py: 2.10.0\r\nNio: None\r\nzarr: None\r\ncftime: None\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: None\r\ndask: 2.20.0\r\ndistributed: 2.20.0\r\nmatplotlib: 3.2.2\r\ncartopy: None\r\nseaborn: None\r\nnumbagg: None\r\npint: None\r\nsetuptools: 49.2.0.post20200714\r\npip: 20.1.1\r\nconda: None\r\npytest: 5.4.3\r\nIPython: 7.16.1\r\nsphinx: None\r\n```\r\n\r\n</details>\nDataset constructor with DataArray triggers computation\nIs it intentional that creating a Dataset with a DataArray and dimension names for a single variable causes computation of that variable?  In other words, why does ```xr.Dataset(dict(a=('d0', xr.DataArray(da.random.random(10)))))``` cause the dask array to compute?\r\n\r\nA longer example:\r\n\r\n```python\r\nimport dask.array as da\r\nimport xarray as xr\r\nx = da.random.randint(1, 10, size=(100, 25))\r\nds = xr.Dataset(dict(a=xr.DataArray(x, dims=('x', 'y'))))\r\ntype(ds.a.data)\r\ndask.array.core.Array\r\n\r\n# Recreate the dataset with the same array, but also redefine the dimensions\r\nds2 = xr.Dataset(dict(a=(('x', 'y'), ds.a))\r\ntype(ds2.a.data)\r\nnumpy.ndarray\r\n```\r\n\r\n\n", "hints_text": "that's because `xarray.core.variable.as_compatible_data` doesn't consider `DataArray` objects: https://github.com/pydata/xarray/blob/333e8dba55f0165ccadf18f2aaaee9257a4d716b/xarray/core/variable.py#L202-L203 and thus falls back to `DataArray.values`: https://github.com/pydata/xarray/blob/333e8dba55f0165ccadf18f2aaaee9257a4d716b/xarray/core/variable.py#L219 I think that's a bug and it should be fine to use\r\n```python\r\n    if isinstance(data, (DataArray, Variable)):\r\n        return data.data\r\n```\r\nbut I didn't check if that would break anything. Are you up for sending in a PR?\r\n\r\nFor now, you can work around that by manually retrieving `data`:\r\n```python\r\nIn [2]: foo = xr.DataArray(np.random.randn(3, 3), dims=(\"x\", \"y\")).chunk()  # foo is chunked\r\n   ...: ds = xr.Dataset({\"foo\": foo, \"bar\": (\"x\", [1, 2, 3])})  # foo is still chunked here\r\n   ...: ds\r\nOut[2]: \r\n<xarray.Dataset>\r\nDimensions:  (x: 3, y: 3)\r\nDimensions without coordinates: x, y\r\nData variables:\r\n    foo      (x, y) float64 dask.array<chunksize=(3, 3), meta=np.ndarray>\r\n    bar      (x) int64 1 2 3\r\n\r\nIn [3]: ds2 = ds.assign(\r\n   ...:     {\r\n   ...:         \"foo\": lambda ds: ((\"x\", \"y\"), ds.foo[1:, :].data),\r\n   ...:         \"bar\": lambda ds: (\"x\", ds.bar[1:]),\r\n   ...:     }\r\n   ...: )\r\n   ...: ds2\r\nOut[3]: \r\n<xarray.Dataset>\r\nDimensions:  (x: 2, y: 3)\r\nDimensions without coordinates: x, y\r\nData variables:\r\n    foo      (x, y) float64 dask.array<chunksize=(2, 3), meta=np.ndarray>\r\n    bar      (x) int64 2 3\r\n```\n> xarray.core.variable.as_compatible_data doesn't consider DataArray objects:\r\n\r\nI don't think DataArrays are expected at that level though. BUT I'm probably wrong.\r\n\r\n> {\"foo\": ((\"x\", \"y\"), ds.foo[1:, :]), \"bar\": (\"x\", ds.bar[1:])}\r\n\r\nThis syntax is weird. You should be able to do `update_dict = {\"foo\": ds.foo[1:, :], \"bar\": ds.bar[1:]}` . \r\n\r\nFor the simple example,  `ds.update(update_dict)` and `ds.assign(update_dict)` both fail because you can't align dimensions without labels when the dimension size is different between variables (I find this confusing). \r\n\r\n@chunhochow What are you trying to do? Overwrite the existing `foo` and `bar` variables?\n> when the dimension size is different between variables (I find this confusing).\r\n\r\nI guess the issue is that the dataset has `x` at a certain size and by reassigning we're trying to set `x` to a different size. I *think* the failure is expected in this case, and it could be solved by assigning labels to `x`.\r\n\r\nThinking about the initial problem some more, it might be better to simply point to `isel`:\r\n```python\r\nds2 = ds.isel(x=slice(1, None))\r\nds2\r\n```\r\nshould do the same, but without having to worry about manually reconstructing a valid dataset. \nYes, I'm trying to drop the last \"bin\" of data (the edge has problems) along all the DataArrays along the dimension `x`, But I couldn't figure out the syntax for how to do it from reading the documentation. Thank you! I will try `isel` next week when I get back to it!\n", "created_at": "2020-10-06T22:00:41Z", "version": "0.12", "FAIL_TO_PASS": "[\"xarray/tests/test_variable.py::TestVariable::test_as_variable\"]", "PASS_TO_PASS": "[\"xarray/tests/test_dask.py::test_raise_if_dask_computes\", \"xarray/tests/test_dask.py::TestVariable::test_basics\", \"xarray/tests/test_dask.py::TestVariable::test_copy\", \"xarray/tests/test_dask.py::TestVariable::test_chunk\", \"xarray/tests/test_dask.py::TestVariable::test_indexing\", \"xarray/tests/test_dask.py::TestVariable::test_squeeze\", \"xarray/tests/test_dask.py::TestVariable::test_equals\", \"xarray/tests/test_dask.py::TestVariable::test_transpose\", \"xarray/tests/test_dask.py::TestVariable::test_shift\", \"xarray/tests/test_dask.py::TestVariable::test_roll\", \"xarray/tests/test_dask.py::TestVariable::test_unary_op\", \"xarray/tests/test_dask.py::TestVariable::test_binary_op\", \"xarray/tests/test_dask.py::TestVariable::test_repr\", \"xarray/tests/test_dask.py::TestVariable::test_pickle\", \"xarray/tests/test_dask.py::TestVariable::test_reduce\", \"xarray/tests/test_dask.py::TestVariable::test_missing_values\", \"xarray/tests/test_dask.py::TestVariable::test_concat\", \"xarray/tests/test_dask.py::TestVariable::test_missing_methods\", \"xarray/tests/test_dask.py::TestVariable::test_univariate_ufunc\", \"xarray/tests/test_dask.py::TestVariable::test_bivariate_ufunc\", \"xarray/tests/test_dask.py::TestVariable::test_compute\", \"xarray/tests/test_dask.py::TestVariable::test_persist\", \"xarray/tests/test_dask.py::TestVariable::test_tokenize_duck_dask_array\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_rechunk\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_new_chunk\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_lazy_dataset\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_lazy_array\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_compute\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_persist\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_concat_loads_variables\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_rolling\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby_first\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_reindex\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_to_dataset_roundtrip\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_merge\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_ufuncs\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_where_dispatching\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_simultaneous_compute\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dot\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_repr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_repr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_pickle\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_pickle\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_getattr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_getattr\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_values\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_from_dask_variable\", \"xarray/tests/test_dask.py::TestDataArrayAndDataset::test_tokenize_duck_dask_array\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_2D\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_coordinates\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_not_daskarray\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_no_coordinate\", \"xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_dim_order\", \"xarray/tests/test_dask.py::test_dask_kwargs_variable[load]\", \"xarray/tests/test_dask.py::test_dask_kwargs_variable[compute]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataarray[load]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataarray[compute]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataarray[persist]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataset[load]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataset[compute]\", \"xarray/tests/test_dask.py::test_dask_kwargs_dataset[persist]\", \"xarray/tests/test_dask.py::test_persist_Dataset[<lambda>0]\", \"xarray/tests/test_dask.py::test_persist_DataArray[<lambda>0]\", \"xarray/tests/test_dask.py::test_persist_DataArray[<lambda>1]\", \"xarray/tests/test_dask.py::test_dataarray_with_dask_coords\", \"xarray/tests/test_dask.py::test_basic_compute\", \"xarray/tests/test_dask.py::test_dask_layers_and_dependencies\", \"xarray/tests/test_dask.py::test_unify_chunks\", \"xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>0-obj0]\", \"xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>0-obj1]\", \"xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>1-obj0]\", \"xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>1-obj1]\", \"xarray/tests/test_dask.py::test_auto_chunk_da[obj0]\", \"xarray/tests/test_dask.py::test_make_meta\", \"xarray/tests/test_dask.py::test_identical_coords_no_computes\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj0]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj1]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj2]\", \"xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj3]\", \"xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj0]\", \"xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj1]\", \"xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj2]\", \"xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj3]\", \"xarray/tests/test_dask.py::test_token_changes_when_buffer_changes[obj0]\", \"xarray/tests/test_dask.py::test_token_changes_when_buffer_changes[obj1]\", \"xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>0]\", \"xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>1]\", \"xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>2]\", \"xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>0]\", \"xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>1]\", \"xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>2]\", \"xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>0]\", \"xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>1]\", \"xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>2]\", \"xarray/tests/test_dask.py::test_recursive_token\", \"xarray/tests/test_dask.py::test_normalize_token_with_backend\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[broadcast_equals]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[equals]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_variables[no_conflicts]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_merge[broadcast_equals]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_merge[equals]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_merge[identical]\", \"xarray/tests/test_dask.py::test_lazy_array_equiv_merge[no_conflicts]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>0-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>0-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>1-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>1-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>2-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>2-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>3-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>3-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>4-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>4-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>5-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>5-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>6-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>6-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>7-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>7-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>8-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>8-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>9-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>9-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>10-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>10-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>11-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>11-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>12-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>12-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>13-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>13-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>14-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>14-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>15-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>15-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>16-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>16-obj1]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>17-obj0]\", \"xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>17-obj1]\", \"xarray/tests/test_dask.py::test_more_transforms_pass_lazy_array_equiv\", \"xarray/tests/test_dask.py::test_optimize\", \"xarray/tests/test_dataset.py::TestDataset::test_repr\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_period_index\", \"xarray/tests/test_dataset.py::TestDataset::test_unicode_data\", \"xarray/tests/test_dataset.py::TestDataset::test_repr_nep18\", \"xarray/tests/test_dataset.py::TestDataset::test_info\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_1d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_0d\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_deprecated\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_compat\", \"xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_asarray\", \"xarray/tests/test_dataset.py::TestDataset::test_get_index\", \"xarray/tests/test_dataset.py::TestDataset::test_attr_access\", \"xarray/tests/test_dataset.py::TestDataset::test_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_modify_inplace\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_modify\", \"xarray/tests/test_dataset.py::TestDataset::test_update_index\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_set\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge\", \"xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape\", \"xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical\", \"xarray/tests/test_dataset.py::TestDataset::test_equals_failures\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals\", \"xarray/tests/test_dataset.py::TestDataset::test_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_chunk\", \"xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_index\", \"xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_head\", \"xarray/tests/test_dataset.py::TestDataset::test_tail\", \"xarray/tests/test_dataset.py::TestDataset::test_thin\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_fancy\", \"xarray/tests/test_dataset.py::TestDataset::test_sel_method\", \"xarray/tests/test_dataset.py::TestDataset::test_loc\", \"xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_warning\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_method\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_align\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exact\", \"xarray/tests/test_dataset.py::TestDataset::test_align_override\", \"xarray/tests/test_dataset.py::TestDataset::test_align_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_align_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_align_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_align_non_unique\", \"xarray/tests/test_dataset.py::TestDataset::test_align_str_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude\", \"xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned\", \"xarray/tests/test_dataset.py::TestDataset::test_variable_indexing\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_variables\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_position\", \"xarray/tests/test_dataset.py::TestDataset::test_drop_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_copy\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data\", \"xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_rename\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_old_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type\", \"xarray/tests/test_dataset.py::TestDataset::test_swap_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord\", \"xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus\", \"xarray/tests/test_dataset.py::TestDataset::test_set_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index\", \"xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reorder_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_stack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value\", \"xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast\", \"xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset\", \"xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension\", \"xarray/tests/test_dataset.py::TestDataset::test_update\", \"xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_update_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem\", \"xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name\", \"xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_time_season\", \"xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[str]\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[bytes]\", \"xarray/tests/test_dataset.py::TestDataset::test_assign\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index\", \"xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level\", \"xarray/tests/test_dataset.py::TestDataset::test_delitem\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze\", \"xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_returns_new_type\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_iter\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_math\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_math_virtual\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_nan\", \"xarray/tests/test_dataset.py::TestDataset::test_groupby_order\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_and_first\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_min_count\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_with_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_loffset\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_discarding_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_by_last_discarding_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_old_api\", \"xarray/tests/test_dataset.py::TestDataset::test_resample_ds_da_are_the_same\", \"xarray/tests/test_dataset.py::TestDataset::test_ds_resample_apply_func_args\", \"xarray/tests/test_dataset.py::TestDataset::test_to_array\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_unsorted_levels\", \"xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns\", \"xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat\", \"xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_pickle\", \"xarray/tests/test_dataset.py::TestDataset::test_lazy_load\", \"xarray/tests/test_dataset.py::TestDataset::test_dropna\", \"xarray/tests/test_dataset.py::TestDataset::test_fillna\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>0]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>1]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[absolute]\", \"xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[abs]\", \"xarray/tests/test_dataset.py::TestDataset::test_where\", \"xarray/tests/test_dataset.py::TestDataset::test_where_other\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty\", \"xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_strings\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis\", \"xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]\", \"xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]\", \"xarray/tests/test_dataset.py::TestDataset::test_rank\", \"xarray/tests/test_dataset.py::TestDataset::test_count\", \"xarray/tests/test_dataset.py::TestDataset::test_map\", \"xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math\", \"xarray/tests/test_dataset.py::TestDataset::test_unary_ops\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg\", \"xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]\", \"xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value3]\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_coords_none\", \"xarray/tests/test_dataset.py::TestDataset::test_roll_multidim\", \"xarray/tests/test_dataset.py::TestDataset::test_real_and_imag\", \"xarray/tests/test_dataset.py::TestDataset::test_setattr_raises\", \"xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes\", \"xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting\", \"xarray/tests/test_dataset.py::TestDataset::test_full_like\", \"xarray/tests/test_dataset.py::TestDataset::test_combine_first\", \"xarray/tests/test_dataset.py::TestDataset::test_sortby\", \"xarray/tests/test_dataset.py::TestDataset::test_attribute_access\", \"xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion\", \"xarray/tests/test_dataset.py::TestDataset::test_polyfit_output\", \"xarray/tests/test_dataset.py::TestDataset::test_pad\", \"xarray/tests/test_dataset.py::TestDataset::test_astype_attrs\", \"xarray/tests/test_dataset.py::test_isin[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements0]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements1]\", \"xarray/tests/test_dataset.py::test_isin_dask[test_elements2]\", \"xarray/tests/test_dataset.py::test_isin_dataset\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]\", \"xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]\", \"xarray/tests/test_dataset.py::test_error_message_on_set_supplied\", \"xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]\", \"xarray/tests/test_dataset.py::test_dir_expected_attrs[None]\", \"xarray/tests/test_dataset.py::test_dir_non_string[None]\", \"xarray/tests/test_dataset.py::test_dir_unicode[None]\", \"xarray/tests/test_dataset.py::test_coarsen_absent_dims_error[1]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-trim-left-False]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-True]\", \"xarray/tests/test_dataset.py::test_coarsen[1-pad-right-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-True]\", \"xarray/tests/test_dataset.py::test_coarsen_coords[1-False]\", \"xarray/tests/test_dataset.py::test_coarsen_coords_cftime\", \"xarray/tests/test_dataset.py::test_coarsen_keep_attrs\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[reduce-argument0]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[mean-argument1]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[construct-argument2]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs[count-argument3]\", \"xarray/tests/test_dataset.py::test_rolling_keep_attrs_deprecated\", \"xarray/tests/test_dataset.py::test_rolling_properties[1]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-median]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-sum]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-mean]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-std]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-var]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-min]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-max]\", \"xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-median]\", \"xarray/tests/test_dataset.py::test_rolling_exp[1]\", \"xarray/tests/test_dataset.py::test_rolling_exp_keep_attrs[1]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-False]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-True]\", \"xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[1-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[2-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[3-False]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-True]\", \"xarray/tests/test_dataset.py::test_rolling_construct[4-False]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-2]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-1]\", \"xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-True-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-False-2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-center2]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-True]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-False]\", \"xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-center2]\", \"xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[2]\", \"xarray/tests/test_dataset.py::test_differentiate[1-False]\", \"xarray/tests/test_dataset.py::test_differentiate[2-False]\", \"xarray/tests/test_dataset.py::test_differentiate_datetime[False]\", \"xarray/tests/test_dataset.py::test_differentiate_cftime[False]\", \"xarray/tests/test_dataset.py::test_integrate[True]\", \"xarray/tests/test_dataset.py::test_integrate[False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[np-False]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]\", \"xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]\", \"xarray/tests/test_dataset.py::test_no_dict\", \"xarray/tests/test_dataset.py::test_subclass_slots\", \"xarray/tests/test_dataset.py::test_weakref\", \"xarray/tests/test_dataset.py::test_deepcopy_obj_array\", \"xarray/tests/test_interp.py::test_keywargs\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-x-linear]\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-x-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-y-linear]\", \"xarray/tests/test_interp.py::test_interpolate_1d[0-y-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d[1-x-linear]\", \"xarray/tests/test_interp.py::test_interpolate_1d[1-x-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d[1-y-linear]\", \"xarray/tests/test_interp.py::test_interpolate_1d[1-y-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d_methods[cubic]\", \"xarray/tests/test_interp.py::test_interpolate_1d_methods[zero]\", \"xarray/tests/test_interp.py::test_interpolate_vectorize[False]\", \"xarray/tests/test_interp.py::test_interpolate_vectorize[True]\", \"xarray/tests/test_interp.py::test_interpolate_nd[3]\", \"xarray/tests/test_interp.py::test_interpolate_nd[4]\", \"xarray/tests/test_interp.py::test_interpolate_nd_nd\", \"xarray/tests/test_interp.py::test_interpolate_nd_with_nan\", \"xarray/tests/test_interp.py::test_interpolate_scalar[0-linear]\", \"xarray/tests/test_interp.py::test_interpolate_scalar[1-linear]\", \"xarray/tests/test_interp.py::test_interpolate_nd_scalar[3-linear]\", \"xarray/tests/test_interp.py::test_interpolate_nd_scalar[4-linear]\", \"xarray/tests/test_interp.py::test_nans[True]\", \"xarray/tests/test_interp.py::test_nans[False]\", \"xarray/tests/test_interp.py::test_errors[True]\", \"xarray/tests/test_interp.py::test_errors[False]\", \"xarray/tests/test_interp.py::test_dtype\", \"xarray/tests/test_interp.py::test_sorted\", \"xarray/tests/test_interp.py::test_dimension_wo_coords\", \"xarray/tests/test_interp.py::test_dataset\", \"xarray/tests/test_interp.py::test_interpolate_dimorder[0]\", \"xarray/tests/test_interp.py::test_interpolate_dimorder[3]\", \"xarray/tests/test_interp.py::test_interp_like\", \"xarray/tests/test_interp.py::test_datetime[x_new0-expected0]\", \"xarray/tests/test_interp.py::test_datetime[x_new1-expected1]\", \"xarray/tests/test_interp.py::test_datetime[x_new2-expected2]\", \"xarray/tests/test_interp.py::test_datetime[x_new3-expected3]\", \"xarray/tests/test_interp.py::test_datetime[x_new4-0.5]\", \"xarray/tests/test_interp.py::test_datetime_single_string\", \"xarray/tests/test_interp.py::test_cftime\", \"xarray/tests/test_interp.py::test_cftime_type_error\", \"xarray/tests/test_interp.py::test_cftime_list_of_strings\", \"xarray/tests/test_interp.py::test_cftime_single_string\", \"xarray/tests/test_interp.py::test_datetime_to_non_datetime_error\", \"xarray/tests/test_interp.py::test_cftime_to_non_cftime_error\", \"xarray/tests/test_interp.py::test_datetime_interp_noerror\", \"xarray/tests/test_interp.py::test_3641\", \"xarray/tests/test_interp.py::test_decompose[nearest]\", \"xarray/tests/test_interp.py::test_decompose[linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-nearest]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-zero]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-slinear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-quadratic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-cubic]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_advanced[linear]\", \"xarray/tests/test_interp.py::test_interpolate_chunk_advanced[nearest]\", \"xarray/tests/test_variable.py::TestVariable::test_properties\", \"xarray/tests/test_variable.py::TestVariable::test_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_dict\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_1d\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_int\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_float\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_string\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_object\", \"xarray/tests/test_variable.py::TestVariable::test_0d_object_array_with_list\", \"xarray/tests/test_variable.py::TestVariable::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_0d_time_data\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_object_conversion\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_data\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestVariable::test_1d_math\", \"xarray/tests/test_variable.py::TestVariable::test_1d_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_array_interface\", \"xarray/tests/test_variable.py::TestVariable::test___array__\", \"xarray/tests/test_variable.py::TestVariable::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_eq_all_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestVariable::test_concat\", \"xarray/tests/test_variable.py::TestVariable::test_concat_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestVariable::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestVariable::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestVariable::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestVariable::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index\", \"xarray/tests/test_variable.py::TestVariable::test_copy_with_data\", \"xarray/tests/test_variable.py::TestVariable::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestVariable::test_replace\", \"xarray/tests/test_variable.py::TestVariable::test_real_and_imag\", \"xarray/tests/test_variable.py::TestVariable::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestVariable::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestVariable::test_multiindex\", \"xarray/tests/test_variable.py::TestVariable::test_load\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_advanced\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_uint\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_error\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-mean]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-edge]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-maximum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-minimum]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-symmetric]\", \"xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-wrap]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg0-np_arg0]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg1-np_arg1]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg2-np_arg2]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg3-np_arg3]\", \"xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg4-np_arg4]\", \"xarray/tests/test_variable.py::TestVariable::test_rolling_window\", \"xarray/tests/test_variable.py::TestVariable::test_data_and_values\", \"xarray/tests/test_variable.py::TestVariable::test_numpy_same_methods\", \"xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion_scalar\", \"xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion_scalar\", \"xarray/tests/test_variable.py::TestVariable::test_0d_str\", \"xarray/tests/test_variable.py::TestVariable::test_0d_datetime\", \"xarray/tests/test_variable.py::TestVariable::test_0d_timedelta\", \"xarray/tests/test_variable.py::TestVariable::test_equals_and_identical\", \"xarray/tests/test_variable.py::TestVariable::test_broadcast_equals\", \"xarray/tests/test_variable.py::TestVariable::test_no_conflicts\", \"xarray/tests/test_variable.py::TestVariable::test_repr\", \"xarray/tests/test_variable.py::TestVariable::test_repr_lazy_data\", \"xarray/tests/test_variable.py::TestVariable::test_detect_indexer_type\", \"xarray/tests/test_variable.py::TestVariable::test_indexer_type\", \"xarray/tests/test_variable.py::TestVariable::test_items\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_basic\", \"xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_2d_input\", \"xarray/tests/test_variable.py::TestVariable::test_isel\", \"xarray/tests/test_variable.py::TestVariable::test_index_0d_numpy_string\", \"xarray/tests/test_variable.py::TestVariable::test_indexing_0d_unicode\", \"xarray/tests/test_variable.py::TestVariable::test_shift[fill_value0]\", \"xarray/tests/test_variable.py::TestVariable::test_shift[2]\", \"xarray/tests/test_variable.py::TestVariable::test_shift[2.0]\", \"xarray/tests/test_variable.py::TestVariable::test_shift2d\", \"xarray/tests/test_variable.py::TestVariable::test_roll\", \"xarray/tests/test_variable.py::TestVariable::test_roll_consistency\", \"xarray/tests/test_variable.py::TestVariable::test_transpose\", \"xarray/tests/test_variable.py::TestVariable::test_transpose_0d\", \"xarray/tests/test_variable.py::TestVariable::test_squeeze\", \"xarray/tests/test_variable.py::TestVariable::test_get_axis_num\", \"xarray/tests/test_variable.py::TestVariable::test_set_dims\", \"xarray/tests/test_variable.py::TestVariable::test_set_dims_object_dtype\", \"xarray/tests/test_variable.py::TestVariable::test_stack\", \"xarray/tests/test_variable.py::TestVariable::test_stack_errors\", \"xarray/tests/test_variable.py::TestVariable::test_unstack\", \"xarray/tests/test_variable.py::TestVariable::test_unstack_errors\", \"xarray/tests/test_variable.py::TestVariable::test_unstack_2d\", \"xarray/tests/test_variable.py::TestVariable::test_stack_unstack_consistency\", \"xarray/tests/test_variable.py::TestVariable::test_broadcasting_math\", \"xarray/tests/test_variable.py::TestVariable::test_broadcasting_failures\", \"xarray/tests/test_variable.py::TestVariable::test_inplace_math\", \"xarray/tests/test_variable.py::TestVariable::test_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-True]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-False]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-0.25]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-0.25]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_chunked_dim_error\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[-0.1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[1.1]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q2]\", \"xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q3]\", \"xarray/tests/test_variable.py::TestVariable::test_rank_dask_raises\", \"xarray/tests/test_variable.py::TestVariable::test_rank\", \"xarray/tests/test_variable.py::TestVariable::test_big_endian_reduce\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_funcs\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims_dask\", \"xarray/tests/test_variable.py::TestVariable::test_reduce_keep_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_binary_ops_keep_attrs\", \"xarray/tests/test_variable.py::TestVariable::test_count\", \"xarray/tests/test_variable.py::TestVariable::test_setitem\", \"xarray/tests/test_variable.py::TestVariable::test_setitem_fancy\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen_2d\", \"xarray/tests/test_variable.py::TestVariable::test_coarsen_keep_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_properties\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_dict\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_int\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_float\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_string\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_object\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_0d_time_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_object_conversion\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_1d_math\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_1d_reduce\", \"xarray/tests/test_variable.py::TestVariableWithDask::test___array__\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_attrs\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_replace\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_real_and_imag\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_multiindex\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_load\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_advanced\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_error\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-mean]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-edge]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-maximum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-minimum]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-symmetric]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-wrap]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg0-np_arg0]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg1-np_arg1]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg2-np_arg2]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg3-np_arg3]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg4-np_arg4]\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_fancy\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestVariableWithSparse::test_as_sparse\", \"xarray/tests/test_variable.py::TestIndexVariable::test_properties\", \"xarray/tests/test_variable.py::TestIndexVariable::test_attrs\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_dict\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d_fancy\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_size_zero\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_nd_indexer\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_int\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_float\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_string\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_datetime\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_timedelta64\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_not_a_time\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_object\", \"xarray/tests/test_variable.py::TestIndexVariable::test_0d_object_array_with_list\", \"xarray/tests/test_variable.py::TestIndexVariable::test_index_and_concat_datetime\", \"xarray/tests/test_variable.py::TestIndexVariable::test_0d_time_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_timedelta64_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_object_conversion\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_valid_range\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_period_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_1d_math\", \"xarray/tests/test_variable.py::TestIndexVariable::test_1d_reduce\", \"xarray/tests/test_variable.py::TestIndexVariable::test_array_interface\", \"xarray/tests/test_variable.py::TestIndexVariable::test___array__\", \"xarray/tests/test_variable.py::TestIndexVariable::test_equals_all_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_eq_all_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_encoding_preserved\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_attrs\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_fixed_len_str\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_number_strings\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_mixed_dtypes\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-True]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-False]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data_errors\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data_errors\", \"xarray/tests/test_variable.py::TestIndexVariable::test_replace\", \"xarray/tests/test_variable.py::TestIndexVariable::test_real_and_imag\", \"xarray/tests/test_variable.py::TestIndexVariable::test_aggregate_complex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_cateogrical_dtype\", \"xarray/tests/test_variable.py::TestIndexVariable::test_pandas_datetime64_with_tz\", \"xarray/tests/test_variable.py::TestIndexVariable::test_multiindex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_load\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_uint_1d\", \"xarray/tests/test_variable.py::TestIndexVariable::test_getitem_0d_array\", \"xarray/tests/test_variable.py::TestIndexVariable::test_init\", \"xarray/tests/test_variable.py::TestIndexVariable::test_to_index\", \"xarray/tests/test_variable.py::TestIndexVariable::test_multiindex_default_level_names\", \"xarray/tests/test_variable.py::TestIndexVariable::test_data\", \"xarray/tests/test_variable.py::TestIndexVariable::test_name\", \"xarray/tests/test_variable.py::TestIndexVariable::test_level_names\", \"xarray/tests/test_variable.py::TestIndexVariable::test_get_level_variable\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_periods\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_multiindex\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[str]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[bytes]\", \"xarray/tests/test_variable.py::TestIndexVariable::test_coordinate_alias\", \"xarray/tests/test_variable.py::TestIndexVariable::test_datetime64\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_unchanged_types\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_converted_types\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_masked_array\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_datetime\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_zeros_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_ones_like\", \"xarray/tests/test_variable.py::TestAsCompatibleData::test_unsupported_type\", \"xarray/tests/test_variable.py::test_raise_no_warning_for_nan_in_binary_ops\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_NumpyIndexingAdapter\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_LazilyOuterIndexedArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_CopyOnWriteArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_MemoryCachedArray\", \"xarray/tests/test_variable.py::TestBackendIndexing::test_DaskIndexingAdapter\"]", "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   xarray/core/variable.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit a5f53e203c52a7605d5db799864046471115d04f\nAuthor: keewis <keewis@users.noreply.github.com>\nDate:   Sun Feb 7 23:34:48 2021 +0100\n\n    don't skip the doctests CI (#4869)\n    \n    * don't skip the doctests CI with skip-ci\n    \n    * empty commit [skip-ci]\n\ndiff --git a/.github/workflows/ci-additional.yaml b/.github/workflows/ci-additional.yaml\nindex fdc61f2f..3579e18d 100644\n--- a/.github/workflows/ci-additional.yaml\n+++ b/.github/workflows/ci-additional.yaml\n@@ -121,8 +121,6 @@ jobs:\n   doctest:\n     name: Doctests\n     runs-on: \"ubuntu-latest\"\n-    needs: detect-ci-trigger\n-    if: needs.detect-ci-trigger.outputs.triggered == 'false'\n     defaults:\n       run:\n         shell: bash -l {0}\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 64c1895d..9c371ee9 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -120,6 +120,16 @@ def as_variable(obj, name=None) -> \"Union[Variable, IndexVariable]\":\n     if isinstance(obj, Variable):\n         obj = obj.copy(deep=False)\n     elif isinstance(obj, tuple):\n+        if isinstance(obj[1], DataArray):\n+            # TODO: change into TypeError\n+            warnings.warn(\n+                (\n+                    \"Using a DataArray object to construct a variable is\"\n+                    \" ambiguous, please extract the data using the .data property.\"\n+                    \" This will raise a TypeError in 0.19.0.\"\n+                ),\n+                DeprecationWarning,\n+            )\n         try:\n             obj = Variable(*obj)\n         except (TypeError, ValueError) as error:\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: numpy>=1.15 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.16.3.dev100+ga5f53e20.d20220101) (1.23.0)\nRequirement already satisfied: pandas>=0.25 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.16.3.dev100+ga5f53e20.d20220101) (1.5.3)\nRequirement already satisfied: setuptools>=40.4 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==0.16.3.dev100+ga5f53e20.d20220101) (68.0.0)\nRequirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.25->xarray==0.16.3.dev100+ga5f53e20.d20220101) (2.8.2)\nRequirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=0.25->xarray==0.16.3.dev100+ga5f53e20.d20220101) (2023.3)\nRequirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=0.25->xarray==0.16.3.dev100+ga5f53e20.d20220101) (1.16.0)\nInstalling collected packages: xarray\n  Attempting uninstall: xarray\n    Found existing installation: xarray 0.16.3.dev100+ga5f53e20\n    Uninstalling xarray-0.16.3.dev100+ga5f53e20:\n      Successfully uninstalled xarray-0.16.3.dev100+ga5f53e20\n  Running setup.py develop for xarray\nSuccessfully installed xarray\n============================= test session starts ==============================\nplatform linux -- Python 3.10.15, pytest-7.4.0, pluggy-1.5.0\nrootdir: /testbed\nconfigfile: setup.cfg\nplugins: hypothesis-6.112.4, cov-5.0.0, env-1.1.5, xdist-3.6.1\ncollected 1853 items\n\nxarray/tests/test_dask.py .........................................s.... [  2%]\n.......x.............F...........FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF.. [  6%]\n........................................................................ [ 10%]\n...................                                                      [ 11%]\nxarray/tests/test_dataset.py ........................................... [ 13%]\n.FF..F.................................................xX............... [ 17%]\n.....................................................................F.. [ 21%]\n........................................................................ [ 25%]\n..........F............................................................. [ 29%]\n........................................................................ [ 33%]\n........................................................................ [ 36%]\n........................................................................ [ 40%]\n..........................ssssssssssssssss.............................. [ 44%]\n........................................................................ [ 48%]\n........................................................................ [ 52%]\n........................................................................ [ 56%]\n........................................................................ [ 60%]\n................XX..................                                     [ 62%]\nxarray/tests/test_interp.py .....................................x...... [ 64%]\n........................................................................ [ 68%]\n........................................................................ [ 72%]\n.......................................................                  [ 75%]\nxarray/tests/test_variable.py ......................x................... [ 77%]\n....................XX.X.....XX.X.....XX.X.....XX.X.....XX.X............ [ 81%]\n........................................................................ [ 85%]\n.....................................x.................................. [ 89%]\n.xX.X.....xX.X.....xx.X.....xx.X.....xx.X..........xxxx................. [ 93%]\n.........x...............................................xxxxxxxxxxxxxxx [ 96%]\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...............                 [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_persist_Dataset[<lambda>1] ________________________\n\npersist = <function <lambda> at 0x7ecdd156e290>\n\n    @pytest.mark.parametrize(\n        \"persist\", [lambda x: x.persist(), lambda x: dask.persist(x)[0]]\n    )\n    def test_persist_Dataset(persist):\n        ds = Dataset({\"foo\": (\"x\", range(5)), \"bar\": (\"x\", range(5))}).chunk()\n        ds = ds + 1\n        n = len(ds.foo.data.dask)\n    \n>       ds2 = persist(ds)\n\n/testbed/xarray/tests/test_dask.py:925: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/tests/test_dask.py:918: in <lambda>\n    \"persist\", [lambda x: x.persist(), lambda x: dask.persist(x)[0]]\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/base.py:903: in persist\n    results2 = [r({k: d[k] for k in ks}, *s) for r, ks, s in postpersists]\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/base.py:903: in <listcomp>\n    results2 = [r({k: d[k] for k in ks}, *s) for r, ks, s in postpersists]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndsk = {('add-0203cdbd3c7f4eb7f5197092973862f7', 0): array([1, 2, 3, 4, 5]), ('add-297d8ca87453770ab88542277b85e72f', 0): array([1, 2, 3, 4, 5])}\ninfo = [(True, 'foo', (<function Variable._dask_finalize at 0x7ecddf7f4ee0>, (<bound method Array._rebuild of dask.array<add,...rebuild of dask.array<add, shape=(5,), dtype=int64, chunksize=(5,), chunktype=numpy.ndarray>>, (), ('x',), {}, None)))]\nargs = (set(), {'x': 5}, None, {}, None, None), variables = {}\nis_persist = True, is_dask = True\n\n    @staticmethod\n    def _dask_postpersist(dsk, info, *args):\n        variables = {}\n        # postpersist is called in both dask.optimize and dask.persist\n        # When persisting, we want to filter out unrelated keys for\n        # each Variable's task graph.\n        is_persist = len(dsk) == len(info)\n        for is_dask, k, v in info:\n            if is_dask:\n                func, args2 = v\n                if is_persist:\n>                   name = args2[1][0]\nE                   IndexError: tuple index out of range\n\n/testbed/xarray/core/dataset.py:932: IndexError\n____________________________ test_map_blocks_error _____________________________\n\nmap_da = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    def test_map_blocks_error(map_da, map_ds):\n        def bad_func(darray):\n            return (darray * darray.x + 5 * darray.y)[:1, :1]\n    \n        with raises_regex(ValueError, \"Received dimension 'x' of length 1\"):\n>           xr.map_blocks(bad_func, map_da).compute()\n\n/testbed/xarray/tests/test_dask.py:1074: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd09f88b0>\n 0. xarray-<this-array>-40...1f33ff6ee76-cxy\n 6. bad_func-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. bad_func-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'bad_func-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n____________________________ test_map_blocks[obj0] _____________________________\n\nobj = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks(obj):\n        def func(obj):\n            result = obj + obj.x + 5 * obj.y\n            return result\n    \n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, obj)\n\n/testbed/xarray/tests/test_dask.py:1111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd1992470>\n 0. xarray-<this-array>-40...2f9b95c01f33ff6ee76-cxy\n 6. func-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. func-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'func-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n____________________________ test_map_blocks[obj1] _____________________________\n\nobj = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks(obj):\n        def func(obj):\n            result = obj + obj.x + 5 * obj.y\n            return result\n    \n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, obj)\n\n/testbed/xarray/tests/test_dask.py:1111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd1a44e20>\n 0. array-d5c4489194a0dbf...4a7cc809be62bece9-cxy\n 18. func-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. func-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'func-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n__________________ test_map_blocks_convert_args_to_list[obj0] __________________\n\nobj = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_convert_args_to_list(obj):\n        expected = obj + 10\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(operator.add, obj, [10])\n\n/testbed/xarray/tests/test_dask.py:1121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0f8dc30>\n 0. xarray-<this-array>-40...4788fa2f1cd7d22e01f9b-cxy\n 6. add-873c6a3ad544788fa2f1cd7d22e01f9b-ndcoord\n 7. add-873c6a3ad544788fa2f1cd7d22e01f9b-c2\n\nname = 'add-873c6a3ad544788fa2f1cd7d22e01f9b-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n__________________ test_map_blocks_convert_args_to_list[obj1] __________________\n\nobj = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_convert_args_to_list(obj):\n        expected = obj + 10\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(operator.add, obj, [10])\n\n/testbed/xarray/tests/test_dask.py:1121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0c4b040>\n 0. array-d5c4489194a0dbf...5bd3a944cd94792291c-cxy\n 18. add-f2971932b883a5bd3a944cd94792291c-ndcoord\n 19. add-f2971932b883a5bd3a944cd94792291c-c2\n\nname = 'add-f2971932b883a5bd3a944cd94792291c-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n__________________________ test_map_blocks_dask_args ___________________________\n\n    def test_map_blocks_dask_args():\n        da1 = xr.DataArray(\n            np.ones((10, 20)),\n            dims=[\"x\", \"y\"],\n            coords={\"x\": np.arange(10), \"y\": np.arange(20)},\n        ).chunk({\"x\": 5, \"y\": 4})\n    \n        # check that block shapes are the same\n        def sumda(da1, da2):\n            assert da1.shape == da2.shape\n            return da1 + da2\n    \n        da2 = da1 + 1\n        with raise_if_dask_computes():\n>           mapped = xr.map_blocks(sumda, da1, args=[da2])\n\n/testbed/xarray/tests/test_dask.py:1140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 4 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd18f2470>\n 0. xarray-<this-array>-c9...4a4fe18263086469cd8\n 2. sumda-cc2cd02fc48f575a60f6e31f56496fcb\n 3. sumda-cc2cd02fc48f575a60f6e31f56496fcb-<this-array>\n\nname = 'sumda-cc2cd02fc48f575a60f6e31f56496fcb-<this-array>'\nchunks = [(5, 5), (4, 4, 4, 4, 4)], dtype = dtype('float64')\nmeta = array(4.94e-321), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n_______________________ test_map_blocks_add_attrs[obj0] ________________________\n\nobj = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_add_attrs(obj):\n        def add_attrs(obj):\n            obj = obj.copy(deep=True)\n            obj.attrs[\"new\"] = \"new\"\n            obj.cxy.attrs[\"new2\"] = \"new2\"\n            return obj\n    \n        expected = add_attrs(obj)\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(add_attrs, obj)\n\n/testbed/xarray/tests/test_dask.py:1188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd1b0b610>\n 0. xarray-<this-array>-40...33ff6ee76-cxy\n 6. add_attrs-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. add_attrs-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'add_attrs-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n_______________________ test_map_blocks_add_attrs[obj1] ________________________\n\nobj = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_add_attrs(obj):\n        def add_attrs(obj):\n            obj = obj.copy(deep=True)\n            obj.attrs[\"new\"] = \"new\"\n            obj.cxy.attrs[\"new2\"] = \"new2\"\n            return obj\n    \n        expected = add_attrs(obj)\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(add_attrs, obj)\n\n/testbed/xarray/tests/test_dask.py:1188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd09f9c60>\n 0. array-d5c4489194a0dbf...62bece9-cxy\n 18. add_attrs-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. add_attrs-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'add_attrs-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n_________________________ test_map_blocks_change_name __________________________\n\nmap_da = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    def test_map_blocks_change_name(map_da):\n        def change_name(obj):\n            obj = obj.copy(deep=True)\n            obj.name = \"new\"\n            return obj\n    \n        expected = change_name(map_da)\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(change_name, map_da)\n\n/testbed/xarray/tests/test_dask.py:1206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd1b09450>\n 0. xarray-<this-array>-40...6ee76-cxy\n 6. change_name-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. change_name-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'change_name-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n_________________________ test_map_blocks_kwargs[obj0] _________________________\n\nobj = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_kwargs(obj):\n        expected = xr.full_like(obj, fill_value=np.nan)\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(xr.full_like, obj, kwargs=dict(fill_value=np.nan))\n\n/testbed/xarray/tests/test_dask.py:1215: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd15078b0>\n 0. xarray-<this-array>-40...284cae90c-cxy\n 6. full_like-57996f86e7f3d20bd960f4e284cae90c-ndcoord\n 7. full_like-57996f86e7f3d20bd960f4e284cae90c-c2\n\nname = 'full_like-57996f86e7f3d20bd960f4e284cae90c-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n_________________________ test_map_blocks_kwargs[obj1] _________________________\n\nobj = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_kwargs(obj):\n        expected = xr.full_like(obj, fill_value=np.nan)\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(xr.full_like, obj, kwargs=dict(fill_value=np.nan))\n\n/testbed/xarray/tests/test_dask.py:1215: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0755ba0>\n 0. array-d5c4489194a0dbf...716ba5f3bb1490f4-c\n 18. full_like-14631c303052ab81716ba5f3bb1490f4-b\n 19. full_like-14631c303052ab81716ba5f3bb1490f4-a\n\nname = 'full_like-14631c303052ab81716ba5f3bb1490f4-a'\nchunks = [(4, 4, 2), (5, 5, 5, 5)], dtype = dtype('float64'), meta = array(0.)\nshape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n___________________________ test_map_blocks_to_array ___________________________\n\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    def test_map_blocks_to_array(map_ds):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(lambda x: x.to_array(), map_ds)\n\n/testbed/xarray/tests/test_dask.py:1222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 16 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd1a7bc40>\n 0. array-d5c4489194a0dbf...c809be62bece9-cxy\n 14. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 15. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_da_transformations[<lambda>0] _________________\n\nfunc = <function <lambda> at 0x7ecdd156f7f0>\nmap_da = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.to_dataset(),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n            lambda x: x.astype(np.int32),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_da_transformations(func, map_da):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_da)\n\n/testbed/xarray/tests/test_dask.py:1243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0966aa0>\n 0. xarray-<this-array>-40...95c01f33ff6ee76-cxy\n 6. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_da_transformations[<lambda>1] _________________\n\nfunc = <function <lambda> at 0x7ecdd156f910>\nmap_da = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.to_dataset(),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n            lambda x: x.astype(np.int32),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_da_transformations(func, map_da):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_da)\n\n/testbed/xarray/tests/test_dask.py:1243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd1058ac0>\n 0. xarray-<this-array>-40...95c01f33ff6ee76-cxy\n 6. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_da_transformations[<lambda>2] _________________\n\nfunc = <function <lambda> at 0x7ecdd156f9a0>\nmap_da = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.to_dataset(),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n            lambda x: x.astype(np.int32),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_da_transformations(func, map_da):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_da)\n\n/testbed/xarray/tests/test_dask.py:1243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd184f880>\n 0. xarray-<this-array>-40...95c01f33ff6ee76-cxy\n 6. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_da_transformations[<lambda>3] _________________\n\nfunc = <function <lambda> at 0x7ecdd156fa30>\nmap_da = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.to_dataset(),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n            lambda x: x.astype(np.int32),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_da_transformations(func, map_da):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_da)\n\n/testbed/xarray/tests/test_dask.py:1243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd09d6c80>\n 0. xarray-<this-array>-40...95c01f33ff6ee76-cxy\n 6. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_da_transformations[<lambda>4] _________________\n\nfunc = <function <lambda> at 0x7ecdd156fac0>\nmap_da = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.to_dataset(),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n            lambda x: x.astype(np.int32),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_da_transformations(func, map_da):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_da)\n\n/testbed/xarray/tests/test_dask.py:1243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd09fcdc0>\n 0. xarray-<this-array>-40...95c01f33ff6ee76-cxy\n 6. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_da_transformations[<lambda>5] _________________\n\nfunc = <function <lambda> at 0x7ecdd156fb50>\nmap_da = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.to_dataset(),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n            lambda x: x.astype(np.int32),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_da_transformations(func, map_da):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_da)\n\n/testbed/xarray/tests/test_dask.py:1243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 9 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0b4e6b0>\n 0. xarray-<this-array>-40...95c01f33ff6ee76-cxy\n 7. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 8. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_da_transformations[<lambda>6] _________________\n\nfunc = <function <lambda> at 0x7ecdd156fbe0>\nmap_da = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.to_dataset(),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n            lambda x: x.astype(np.int32),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_da_transformations(func, map_da):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_da)\n\n/testbed/xarray/tests/test_dask.py:1243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd1a07610>\n 0. xarray-<this-array>-40...95c01f33ff6ee76-cxy\n 6. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_da_transformations[<lambda>7] _________________\n\nfunc = <function <lambda> at 0x7ecdd156fc70>\nmap_da = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.to_dataset(),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.assign_coords(new_coord=(\"y\", x.y.data * 2)),\n            lambda x: x.astype(np.int32),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_da_transformations(func, map_da):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_da)\n\n/testbed/xarray/tests/test_dask.py:1243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 7 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0867c70>\n 0. xarray-<this-array>-40...f6ee76-<this-array>\n 5. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 6. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_ds_transformations[<lambda>0] _________________\n\nfunc = <function <lambda> at 0x7ecdd156fd90>\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.drop_vars(\"cxy\"),\n            lambda x: x.drop_vars(\"a\"),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.rename({\"a\": \"new1\", \"b\": \"new2\"}),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_ds_transformations(func, map_ds):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_ds)\n\n/testbed/xarray/tests/test_dask.py:1263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0cd6260>\n 0. array-d5c4489194a0dbf...c809be62bece9-cxy\n 18. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_ds_transformations[<lambda>1] _________________\n\nfunc = <function <lambda> at 0x7ecdd156fe20>\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.drop_vars(\"cxy\"),\n            lambda x: x.drop_vars(\"a\"),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.rename({\"a\": \"new1\", \"b\": \"new2\"}),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_ds_transformations(func, map_ds):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_ds)\n\n/testbed/xarray/tests/test_dask.py:1263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 19 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd092b8e0>\n 0. array-d5c4489194a0dbf...7cc809be62bece9-a\n 17. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 18. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_ds_transformations[<lambda>2] _________________\n\nfunc = <function <lambda> at 0x7ecdd156feb0>\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.drop_vars(\"cxy\"),\n            lambda x: x.drop_vars(\"a\"),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.rename({\"a\": \"new1\", \"b\": \"new2\"}),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_ds_transformations(func, map_ds):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_ds)\n\n/testbed/xarray/tests/test_dask.py:1263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 19 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0755840>\n 0. array-d5c4489194a0dbf...c809be62bece9-cxy\n 17. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 18. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_ds_transformations[<lambda>3] _________________\n\nfunc = <function <lambda> at 0x7ecdd156ff40>\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.drop_vars(\"cxy\"),\n            lambda x: x.drop_vars(\"a\"),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.rename({\"a\": \"new1\", \"b\": \"new2\"}),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_ds_transformations(func, map_ds):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_ds)\n\n/testbed/xarray/tests/test_dask.py:1263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd184ee00>\n 0. array-d5c4489194a0dbf...c809be62bece9-cxy\n 18. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_ds_transformations[<lambda>4] _________________\n\nfunc = <function <lambda> at 0x7ecdd0f00040>\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.drop_vars(\"cxy\"),\n            lambda x: x.drop_vars(\"a\"),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.rename({\"a\": \"new1\", \"b\": \"new2\"}),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_ds_transformations(func, map_ds):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_ds)\n\n/testbed/xarray/tests/test_dask.py:1263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd09fca30>\n 0. array-d5c4489194a0dbf...c809be62bece9-cxy\n 18. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_ds_transformations[<lambda>5] _________________\n\nfunc = <function <lambda> at 0x7ecdd0f000d0>\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.drop_vars(\"cxy\"),\n            lambda x: x.drop_vars(\"a\"),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.rename({\"a\": \"new1\", \"b\": \"new2\"}),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_ds_transformations(func, map_ds):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_ds)\n\n/testbed/xarray/tests/test_dask.py:1263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd08a9f60>\n 0. array-d5c4489194a0dbf...c809be62bece9-cxy\n 18. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_ds_transformations[<lambda>6] _________________\n\nfunc = <function <lambda> at 0x7ecdd0f00160>\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.drop_vars(\"cxy\"),\n            lambda x: x.drop_vars(\"a\"),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.rename({\"a\": \"new1\", \"b\": \"new2\"}),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_ds_transformations(func, map_ds):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_ds)\n\n/testbed/xarray/tests/test_dask.py:1263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0cf82e0>\n 0. array-d5c4489194a0dbf...c809be62bece9-cxy\n 18. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n________________ test_map_blocks_ds_transformations[<lambda>7] _________________\n\nfunc = <function <lambda> at 0x7ecdd0f001f0>\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\n        \"func\",\n        [\n            lambda x: x,\n            lambda x: x.drop_vars(\"cxy\"),\n            lambda x: x.drop_vars(\"a\"),\n            lambda x: x.drop_vars(\"x\"),\n            lambda x: x.expand_dims(k=[1, 2, 3]),\n            lambda x: x.expand_dims(k=3),\n            lambda x: x.rename({\"a\": \"new1\", \"b\": \"new2\"}),\n            lambda x: x.x,\n        ],\n    )\n    def test_map_blocks_ds_transformations(func, map_ds):\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, map_ds)\n\n/testbed/xarray/tests/test_dask.py:1263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 14 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0d1ba00>\n 0. array-d5c4489194a0dbf...cc809be62bece9-c1\n 12. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 13. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n__________________ test_map_blocks_da_ds_with_template[obj0] ___________________\n\nobj = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_da_ds_with_template(obj):\n        func = lambda x: x.isel(x=[1])\n        template = obj.isel(x=[1, 5, 9])\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, obj, template=template)\n\n/testbed/xarray/tests/test_dask.py:1273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd1a07be0>\n 0. xarray-<this-array>-40...95c01f33ff6ee76-cxy\n 6. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n__________________ test_map_blocks_da_ds_with_template[obj1] ___________________\n\nobj = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_da_ds_with_template(obj):\n        func = lambda x: x.isel(x=[1])\n        template = obj.isel(x=[1, 5, 9])\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, obj, template=template)\n\n/testbed/xarray/tests/test_dask.py:1273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0cdc2e0>\n 0. array-d5c4489194a0dbf...c809be62bece9-cxy\n 18. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n___________________ test_map_blocks_template_convert_object ____________________\n\n    def test_map_blocks_template_convert_object():\n        da = make_da()\n        func = lambda x: x.to_dataset().isel(x=[1])\n        template = da.to_dataset().isel(x=[1, 5, 9])\n        with raise_if_dask_computes():\n>           actual = xr.map_blocks(func, da, template=template)\n\n/testbed/xarray/tests/test_dask.py:1286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd1a06ef0>\n 0. xarray-<this-array>-40...95c01f33ff6ee76-cxy\n 6. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n__________________ test_map_blocks_errors_bad_template[obj0] ___________________\n\nobj = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_errors_bad_template(obj):\n        with raises_regex(ValueError, \"unexpected coordinate variables\"):\n>           xr.map_blocks(lambda x: x.assign_coords(a=10), obj, template=obj).compute()\n\n/testbed/xarray/tests/test_dask.py:1300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0d05f90>\n 0. xarray-<this-array>-40...95c01f33ff6ee76-cxy\n 6. lambda-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. lambda-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'lambda-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n__________________ test_map_blocks_errors_bad_template[obj1] ___________________\n\nobj = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_errors_bad_template(obj):\n        with raises_regex(ValueError, \"unexpected coordinate variables\"):\n>           xr.map_blocks(lambda x: x.assign_coords(a=10), obj, template=obj).compute()\n\n/testbed/xarray/tests/test_dask.py:1300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0c97a00>\n 0. array-d5c4489194a0dbf...c809be62bece9-cxy\n 18. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n____________________ test_map_blocks_errors_bad_template_2 _____________________\n\nmap_ds = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    def test_map_blocks_errors_bad_template_2(map_ds):\n        with raises_regex(ValueError, \"unexpected data variables {'xyz'}\"):\n>           xr.map_blocks(lambda x: x.assign(xyz=1), map_ds, template=map_ds).compute()\n\n/testbed/xarray/tests/test_dask.py:1323: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0cbc970>\n 0. array-d5c4489194a0dbf...c809be62bece9-cxy\n 18. lambda-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. lambda-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'lambda-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n_____________________ test_map_blocks_object_method[obj0] ______________________\n\nobj = <xarray.DataArray 'a' (x: 10, y: 20)>\ndask.array<xarray-<this-array>, shape=(10, 20), dtype=float64, chunksize=(4, 5),...meta=np.ndarray>\n    cxy      (x, y) int64 dask.array<chunksize=(4, 5), meta=np.ndarray>\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_object_method(obj):\n        def func(obj):\n            result = obj + obj.x + 5 * obj.y\n            return result\n    \n        with raise_if_dask_computes():\n>           expected = xr.map_blocks(func, obj)\n\n/testbed/xarray/tests/test_dask.py:1333: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 8 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd184ceb0>\n 0. xarray-<this-array>-40...2f9b95c01f33ff6ee76-cxy\n 6. func-8eee801fd39372f9b95c01f33ff6ee76-ndcoord\n 7. func-8eee801fd39372f9b95c01f33ff6ee76-c2\n\nname = 'func-8eee801fd39372f9b95c01f33ff6ee76-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.5), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n_____________________ test_map_blocks_object_method[obj1] ______________________\n\nobj = <xarray.Dataset>\nDimensions:  (x: 10, y: 20, z: 4)\nCoordinates:\n  * x        (x) int64 0 1 2 3 4 5 6 7 8 9\n  * y      ...64 1 1 1 1\n    e        (x, y) int64 100 101 102 103 104 105 ... 123 124 125 126 127 128\nAttributes:\n    test:     test\n\n    @pytest.mark.parametrize(\"obj\", [make_da(), make_ds()])\n    def test_map_blocks_object_method(obj):\n        def func(obj):\n            result = obj + obj.x + 5 * obj.y\n            return result\n    \n        with raise_if_dask_computes():\n>           expected = xr.map_blocks(func, obj)\n\n/testbed/xarray/tests/test_dask.py:1333: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 20 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd0995de0>\n 0. array-d5c4489194a0dbf...4a7cc809be62bece9-cxy\n 18. func-0ae1601fb02daa74a7cc809be62bece9-ndcoord\n 19. func-0ae1601fb02daa74a7cc809be62bece9-c2\n\nname = 'func-0ae1601fb02daa74a7cc809be62bece9-c2', chunks = []\ndtype = dtype('float64'), meta = array(0.), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n__________________________ test_map_blocks_hlg_layers __________________________\n\n    def test_map_blocks_hlg_layers():\n        # regression test for #3599\n        ds = xr.Dataset(\n            {\n                \"x\": ((\"a\",), dask.array.ones(10, chunks=(5,))),\n                \"z\": ((\"b\",), dask.array.ones(10, chunks=(5,))),\n            }\n        )\n>       mapped = ds.map_blocks(lambda x: x)\n\n/testbed/xarray/tests/test_dask.py:1347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/testbed/xarray/core/dataset.py:6328: in map_blocks\n    return map_blocks(func, self, args, kwargs, template)\n/testbed/xarray/core/parallel.py:566: in map_blocks\n    data = dask.array.Array(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'dask.array.core.Array'>\ndask = HighLevelGraph with 4 layers.\n<dask.highlevelgraph.HighLevelGraph object at 0x7ecdd19ed360>\n 0. ones_like-9a75f6b391b8...e10a8248b5854f4e28feaad0a3\n 2. lambda-0bb316e10a8248b5854f4e28feaad0a3-z\n 3. lambda-0bb316e10a8248b5854f4e28feaad0a3-x\n\nname = 'lambda-0bb316e10a8248b5854f4e28feaad0a3-x', chunks = [(5, 5)]\ndtype = dtype('float64'), meta = array(2.5e-323), shape = None\n\n    def __new__(cls, dask, name, chunks, dtype=None, meta=None, shape=None):\n        self = super().__new__(cls)\n        assert isinstance(dask, Mapping)\n        if not isinstance(dask, HighLevelGraph):\n            dask = HighLevelGraph.from_collections(name, dask, dependencies=())\n        self.dask = dask\n        self._name = str(name)\n        meta = meta_from_array(meta, dtype=dtype)\n    \n        if (\n            isinstance(chunks, str)\n            or isinstance(chunks, tuple)\n            and chunks\n            and any(isinstance(c, str) for c in chunks)\n        ):\n            dt = meta.dtype\n        else:\n            dt = None\n        self._chunks = normalize_chunks(chunks, shape, dtype=dt)\n        if self.chunks is None:\n            raise ValueError(CHUNKS_NONE_ERROR_MESSAGE)\n        self._meta = meta_from_array(meta, ndim=self.ndim, dtype=dtype)\n    \n        for plugin in config.get(\"array_plugins\", ()):\n            result = plugin(self)\n            if result is not None:\n                self = result\n    \n        try:\n            layer = self.dask.layers[name]\n        except (AttributeError, KeyError):\n            # self is no longer an Array after applying the plugins, OR\n            # a plugin replaced the HighLevelGraph with a plain dict, OR\n            # name is not the top layer's name (this can happen after the layer is\n            # manipulated, to avoid a collision)\n            pass\n        else:\n>           if layer.collection_annotations is None:\nE           AttributeError: 'dict' object has no attribute 'collection_annotations'\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1359: AttributeError\n_______________________ TestDataset.test_sel_categorical _______________________\n\nself = <xarray.tests.test_dataset.TestDataset object at 0x7ecdd06037f0>\n\n    def test_sel_categorical(self):\n        ind = pd.Series([\"foo\", \"bar\"], dtype=\"category\")\n        df = pd.DataFrame({\"ind\": ind, \"values\": [1, 2]})\n>       ds = df.set_index(\"ind\").to_xarray()\n\n/testbed/xarray/tests/test_dataset.py:1432: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pandas/core/generic.py:3222: in to_xarray\n    xarray = import_optional_dependency(\"xarray\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = 'xarray', extra = '', errors = 'raise', min_version = None\n\n    def import_optional_dependency(\n        name: str,\n        extra: str = \"\",\n        errors: str = \"raise\",\n        min_version: str | None = None,\n    ):\n        \"\"\"\n        Import an optional dependency.\n    \n        By default, if a dependency is missing an ImportError with a nice\n        message will be raised. If a dependency is present, but too old,\n        we raise.\n    \n        Parameters\n        ----------\n        name : str\n            The module name.\n        extra : str\n            Additional text to include in the ImportError message.\n        errors : str {'raise', 'warn', 'ignore'}\n            What to do when a dependency is not found or its version is too old.\n    \n            * raise : Raise an ImportError\n            * warn : Only applicable when a module's version is to old.\n              Warns that the version is too old and returns None\n            * ignore: If the module is not installed, return None, otherwise,\n              return the module, even if the version is too old.\n              It's expected that users validate the version locally when\n              using ``errors=\"ignore\"`` (see. ``io/html.py``)\n        min_version : str, default None\n            Specify a minimum version that is different from the global pandas\n            minimum version required.\n        Returns\n        -------\n        maybe_module : Optional[ModuleType]\n            The imported module, when found and the version is correct.\n            None is returned when the package is not found and `errors`\n            is False, or when the package's version is too old and `errors`\n            is ``'warn'``.\n        \"\"\"\n    \n        assert errors in {\"warn\", \"raise\", \"ignore\"}\n    \n        package_name = INSTALL_MAPPING.get(name)\n        install_name = package_name if package_name is not None else name\n    \n        msg = (\n            f\"Missing optional dependency '{install_name}'. {extra} \"\n            f\"Use pip or conda to install {install_name}.\"\n        )\n        try:\n            module = importlib.import_module(name)\n        except ImportError:\n            if errors == \"raise\":\n                raise ImportError(msg)\n            else:\n                return None\n    \n        # Handle submodules: if we have submodule, grab parent module from sys.modules\n        parent = name.split(\".\")[0]\n        if parent != name:\n            install_name = parent\n            module_to_get = sys.modules[install_name]\n        else:\n            module_to_get = module\n        minimum_version = min_version if min_version is not None else VERSIONS.get(parent)\n        if minimum_version:\n            version = get_version(module_to_get)\n            if version and Version(version) < Version(minimum_version):\n                msg = (\n                    f\"Pandas requires version '{minimum_version}' or newer of '{parent}' \"\n                    f\"(version '{version}' currently installed).\"\n                )\n                if errors == \"warn\":\n                    warnings.warn(\n                        msg,\n                        UserWarning,\n                        stacklevel=find_stack_level(),\n                    )\n                    return None\n                elif errors == \"raise\":\n>                   raise ImportError(msg)\nE                   ImportError: Pandas requires version '0.19.0' or newer of 'xarray' (version '0.16.3.dev100+ga5f53e20.d20220101' currently installed).\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pandas/compat/_optional.py:171: ImportError\n____________________ TestDataset.test_sel_categorical_error ____________________\n\nself = <xarray.tests.test_dataset.TestDataset object at 0x7ecdd0603a00>\n\n    def test_sel_categorical_error(self):\n        ind = pd.Series([\"foo\", \"bar\"], dtype=\"category\")\n        df = pd.DataFrame({\"ind\": ind, \"values\": [1, 2]})\n>       ds = df.set_index(\"ind\").to_xarray()\n\n/testbed/xarray/tests/test_dataset.py:1440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pandas/core/generic.py:3222: in to_xarray\n    xarray = import_optional_dependency(\"xarray\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = 'xarray', extra = '', errors = 'raise', min_version = None\n\n    def import_optional_dependency(\n        name: str,\n        extra: str = \"\",\n        errors: str = \"raise\",\n        min_version: str | None = None,\n    ):\n        \"\"\"\n        Import an optional dependency.\n    \n        By default, if a dependency is missing an ImportError with a nice\n        message will be raised. If a dependency is present, but too old,\n        we raise.\n    \n        Parameters\n        ----------\n        name : str\n            The module name.\n        extra : str\n            Additional text to include in the ImportError message.\n        errors : str {'raise', 'warn', 'ignore'}\n            What to do when a dependency is not found or its version is too old.\n    \n            * raise : Raise an ImportError\n            * warn : Only applicable when a module's version is to old.\n              Warns that the version is too old and returns None\n            * ignore: If the module is not installed, return None, otherwise,\n              return the module, even if the version is too old.\n              It's expected that users validate the version locally when\n              using ``errors=\"ignore\"`` (see. ``io/html.py``)\n        min_version : str, default None\n            Specify a minimum version that is different from the global pandas\n            minimum version required.\n        Returns\n        -------\n        maybe_module : Optional[ModuleType]\n            The imported module, when found and the version is correct.\n            None is returned when the package is not found and `errors`\n            is False, or when the package's version is too old and `errors`\n            is ``'warn'``.\n        \"\"\"\n    \n        assert errors in {\"warn\", \"raise\", \"ignore\"}\n    \n        package_name = INSTALL_MAPPING.get(name)\n        install_name = package_name if package_name is not None else name\n    \n        msg = (\n            f\"Missing optional dependency '{install_name}'. {extra} \"\n            f\"Use pip or conda to install {install_name}.\"\n        )\n        try:\n            module = importlib.import_module(name)\n        except ImportError:\n            if errors == \"raise\":\n                raise ImportError(msg)\n            else:\n                return None\n    \n        # Handle submodules: if we have submodule, grab parent module from sys.modules\n        parent = name.split(\".\")[0]\n        if parent != name:\n            install_name = parent\n            module_to_get = sys.modules[install_name]\n        else:\n            module_to_get = module\n        minimum_version = min_version if min_version is not None else VERSIONS.get(parent)\n        if minimum_version:\n            version = get_version(module_to_get)\n            if version and Version(version) < Version(minimum_version):\n                msg = (\n                    f\"Pandas requires version '{minimum_version}' or newer of '{parent}' \"\n                    f\"(version '{version}' currently installed).\"\n                )\n                if errors == \"warn\":\n                    warnings.warn(\n                        msg,\n                        UserWarning,\n                        stacklevel=find_stack_level(),\n                    )\n                    return None\n                elif errors == \"raise\":\n>                   raise ImportError(msg)\nE                   ImportError: Pandas requires version '0.19.0' or newer of 'xarray' (version '0.16.3.dev100+ga5f53e20.d20220101' currently installed).\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pandas/compat/_optional.py:171: ImportError\n___________________ TestDataset.test_categorical_multiindex ____________________\n\nself = <xarray.tests.test_dataset.TestDataset object at 0x7ecdd0603760>\n\n    def test_categorical_multiindex(self):\n        i1 = pd.Series([0, 0])\n        cat = pd.CategoricalDtype(categories=[\"foo\", \"baz\", \"bar\"])\n        i2 = pd.Series([\"baz\", \"bar\"], dtype=cat)\n    \n        df = pd.DataFrame({\"i1\": i1, \"i2\": i2, \"values\": [1, 2]}).set_index(\n            [\"i1\", \"i2\"]\n        )\n>       actual = df.to_xarray()\n\n/testbed/xarray/tests/test_dataset.py:1487: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pandas/core/generic.py:3222: in to_xarray\n    xarray = import_optional_dependency(\"xarray\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = 'xarray', extra = '', errors = 'raise', min_version = None\n\n    def import_optional_dependency(\n        name: str,\n        extra: str = \"\",\n        errors: str = \"raise\",\n        min_version: str | None = None,\n    ):\n        \"\"\"\n        Import an optional dependency.\n    \n        By default, if a dependency is missing an ImportError with a nice\n        message will be raised. If a dependency is present, but too old,\n        we raise.\n    \n        Parameters\n        ----------\n        name : str\n            The module name.\n        extra : str\n            Additional text to include in the ImportError message.\n        errors : str {'raise', 'warn', 'ignore'}\n            What to do when a dependency is not found or its version is too old.\n    \n            * raise : Raise an ImportError\n            * warn : Only applicable when a module's version is to old.\n              Warns that the version is too old and returns None\n            * ignore: If the module is not installed, return None, otherwise,\n              return the module, even if the version is too old.\n              It's expected that users validate the version locally when\n              using ``errors=\"ignore\"`` (see. ``io/html.py``)\n        min_version : str, default None\n            Specify a minimum version that is different from the global pandas\n            minimum version required.\n        Returns\n        -------\n        maybe_module : Optional[ModuleType]\n            The imported module, when found and the version is correct.\n            None is returned when the package is not found and `errors`\n            is False, or when the package's version is too old and `errors`\n            is ``'warn'``.\n        \"\"\"\n    \n        assert errors in {\"warn\", \"raise\", \"ignore\"}\n    \n        package_name = INSTALL_MAPPING.get(name)\n        install_name = package_name if package_name is not None else name\n    \n        msg = (\n            f\"Missing optional dependency '{install_name}'. {extra} \"\n            f\"Use pip or conda to install {install_name}.\"\n        )\n        try:\n            module = importlib.import_module(name)\n        except ImportError:\n            if errors == \"raise\":\n                raise ImportError(msg)\n            else:\n                return None\n    \n        # Handle submodules: if we have submodule, grab parent module from sys.modules\n        parent = name.split(\".\")[0]\n        if parent != name:\n            install_name = parent\n            module_to_get = sys.modules[install_name]\n        else:\n            module_to_get = module\n        minimum_version = min_version if min_version is not None else VERSIONS.get(parent)\n        if minimum_version:\n            version = get_version(module_to_get)\n            if version and Version(version) < Version(minimum_version):\n                msg = (\n                    f\"Pandas requires version '{minimum_version}' or newer of '{parent}' \"\n                    f\"(version '{version}' currently installed).\"\n                )\n                if errors == \"warn\":\n                    warnings.warn(\n                        msg,\n                        UserWarning,\n                        stacklevel=find_stack_level(),\n                    )\n                    return None\n                elif errors == \"raise\":\n>                   raise ImportError(msg)\nE                   ImportError: Pandas requires version '0.19.0' or newer of 'xarray' (version '0.16.3.dev100+ga5f53e20.d20220101' currently installed).\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pandas/compat/_optional.py:171: ImportError\n_________________ TestDataset.test_from_dataframe_categorical __________________\n\nself = <xarray.tests.test_dataset.TestDataset object at 0x7ecdd0561c60>\n\n    def test_from_dataframe_categorical(self):\n        cat = pd.CategoricalDtype(\n            categories=[\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\"]\n        )\n        i1 = pd.Series([\"foo\", \"bar\", \"foo\"], dtype=cat)\n        i2 = pd.Series([\"bar\", \"bar\", \"baz\"], dtype=cat)\n    \n        df = pd.DataFrame({\"i1\": i1, \"i2\": i2, \"values\": [1, 2, 3]})\n>       ds = df.set_index(\"i1\").to_xarray()\n\n/testbed/xarray/tests/test_dataset.py:4131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pandas/core/generic.py:3222: in to_xarray\n    xarray = import_optional_dependency(\"xarray\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = 'xarray', extra = '', errors = 'raise', min_version = None\n\n    def import_optional_dependency(\n        name: str,\n        extra: str = \"\",\n        errors: str = \"raise\",\n        min_version: str | None = None,\n    ):\n        \"\"\"\n        Import an optional dependency.\n    \n        By default, if a dependency is missing an ImportError with a nice\n        message will be raised. If a dependency is present, but too old,\n        we raise.\n    \n        Parameters\n        ----------\n        name : str\n            The module name.\n        extra : str\n            Additional text to include in the ImportError message.\n        errors : str {'raise', 'warn', 'ignore'}\n            What to do when a dependency is not found or its version is too old.\n    \n            * raise : Raise an ImportError\n            * warn : Only applicable when a module's version is to old.\n              Warns that the version is too old and returns None\n            * ignore: If the module is not installed, return None, otherwise,\n              return the module, even if the version is too old.\n              It's expected that users validate the version locally when\n              using ``errors=\"ignore\"`` (see. ``io/html.py``)\n        min_version : str, default None\n            Specify a minimum version that is different from the global pandas\n            minimum version required.\n        Returns\n        -------\n        maybe_module : Optional[ModuleType]\n            The imported module, when found and the version is correct.\n            None is returned when the package is not found and `errors`\n            is False, or when the package's version is too old and `errors`\n            is ``'warn'``.\n        \"\"\"\n    \n        assert errors in {\"warn\", \"raise\", \"ignore\"}\n    \n        package_name = INSTALL_MAPPING.get(name)\n        install_name = package_name if package_name is not None else name\n    \n        msg = (\n            f\"Missing optional dependency '{install_name}'. {extra} \"\n            f\"Use pip or conda to install {install_name}.\"\n        )\n        try:\n            module = importlib.import_module(name)\n        except ImportError:\n            if errors == \"raise\":\n                raise ImportError(msg)\n            else:\n                return None\n    \n        # Handle submodules: if we have submodule, grab parent module from sys.modules\n        parent = name.split(\".\")[0]\n        if parent != name:\n            install_name = parent\n            module_to_get = sys.modules[install_name]\n        else:\n            module_to_get = module\n        minimum_version = min_version if min_version is not None else VERSIONS.get(parent)\n        if minimum_version:\n            version = get_version(module_to_get)\n            if version and Version(version) < Version(minimum_version):\n                msg = (\n                    f\"Pandas requires version '{minimum_version}' or newer of '{parent}' \"\n                    f\"(version '{version}' currently installed).\"\n                )\n                if errors == \"warn\":\n                    warnings.warn(\n                        msg,\n                        UserWarning,\n                        stacklevel=find_stack_level(),\n                    )\n                    return None\n                elif errors == \"raise\":\n>                   raise ImportError(msg)\nE                   ImportError: Pandas requires version '0.19.0' or newer of 'xarray' (version '0.16.3.dev100+ga5f53e20.d20220101' currently installed).\n\n/opt/miniconda3/envs/testbed/lib/python3.10/site-packages/pandas/compat/_optional.py:171: ImportError\n______________________ TestDataset.test_polyfit_warnings _______________________\n\nself = <xarray.tests.test_dataset.TestDataset object at 0x7ecdd052ebc0>\n\n    def test_polyfit_warnings(self):\n        ds = create_test_data(seed=1)\n    \n        with warnings.catch_warnings(record=True) as ws:\n            ds.var1.polyfit(\"dim2\", 10, full=False)\n>           assert len(ws) == 1\nE           assert 3 == 1\nE            +  where 3 = len([<warnings.WarningMessage object at 0x7ecdce865540>, <warnings.WarningMessage object at 0x7ecdce867160>, <warnings.WarningMessage object at 0x7ecdce865330>])\n\n/testbed/xarray/tests/test_dataset.py:5783: AssertionError\n=============================== warnings summary ===============================\nxarray/__init__.py:1\n  /testbed/xarray/__init__.py:1: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n    import pkg_resources\n\nxarray/core/dask_array_compat.py:61\nxarray/core/dask_array_compat.py:61\n  /testbed/xarray/core/dask_array_compat.py:61: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    if LooseVersion(dask_version) > LooseVersion(\"2.9.0\"):\n\nxarray/core/pdcompat.py:45\n  /testbed/xarray/core/pdcompat.py:45: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    if LooseVersion(pd.__version__) < \"0.25.0\":\n\n../opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345: 7 warnings\nxarray/tests/test_dataset.py: 4 warnings\nxarray/tests/test_variable.py: 13 warnings\n  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    other = LooseVersion(other)\n\nxarray/tests/__init__.py:59\nxarray/tests/__init__.py:59\nxarray/tests/__init__.py:59\nxarray/tests/__init__.py:59\nxarray/tests/__init__.py:59\nxarray/tests/__init__.py:59\nxarray/tests/__init__.py:59\n  /testbed/xarray/tests/__init__.py:59: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    return version.LooseVersion(vstring)\n\nxarray/tests/test_dask.py:587\n  /testbed/xarray/tests/test_dask.py:587: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    @pytest.mark.skipif(LooseVersion(dask.__version__) >= \"2.0\", reason=\"no meta\")\n\nxarray/tests/test_dask.py:605\n  /testbed/xarray/tests/test_dask.py:605: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    @pytest.mark.skipif(LooseVersion(dask.__version__) < \"2.0\", reason=\"needs meta\")\n\nxarray/tests/test_dask.py:623\n  /testbed/xarray/tests/test_dask.py:623: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    @pytest.mark.skipif(LooseVersion(dask.__version__) < \"2.0\", reason=\"needs meta\")\n\nxarray/tests/test_dask.py::TestVariable::test_chunk\n  /testbed/xarray/core/variable.py:1062: FutureWarning: None value for 'chunks' is deprecated. It will raise an error in the future. Use instead '{}'\n    warnings.warn(\n\nxarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby\nxarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby\nxarray/tests/test_dataset.py::TestDataset::test_groupby\nxarray/tests/test_dataset.py::TestDataset::test_groupby\nxarray/tests/test_dataset.py::TestDataset::test_groupby\nxarray/tests/test_dataset.py::TestDataset::test_groupby_math\nxarray/tests/test_dataset.py::TestDataset::test_groupby_math\n  /testbed/xarray/core/groupby.py:207: FutureWarning: is_monotonic is deprecated and will be removed in a future version. Use is_monotonic_increasing instead.\n    return index.is_unique and index.is_monotonic\n\nxarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single\n  /testbed/xarray/core/merge.py:394: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.\n    obj = dict(obj.iteritems())\n\nxarray/tests/test_dataset.py: 4 warnings\nxarray/tests/test_variable.py: 13 warnings\n  /testbed/xarray/core/variable.py:1088: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    if LooseVersion(dask.__version__) < \"2.0.0\":\n\nxarray/tests/test_dataset.py: 48 warnings\n  /testbed/xarray/core/dataset.py:3864: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    or LooseVersion(np.__version__) < LooseVersion(\"1.17\")\n\nxarray/tests/test_dataset.py::TestDataset::test_sel_method\nxarray/tests/test_dataset.py::TestDataset::test_sel_method\nxarray/tests/test_dataset.py::TestDataset::test_sel_method\nxarray/tests/test_interp.py::test_interpolate_dimorder[3]\n  /testbed/xarray/core/indexing.py:191: FutureWarning: Passing method to Float64Index.get_loc is deprecated and will raise in a future version. Use index.get_indexer([item], method=...) instead.\n    indexer = index.get_loc(label_value, method=method, tolerance=tolerance)\n\nxarray/tests/test_dataset.py::TestDataset::test_reindex_warning\nxarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops\nxarray/tests/test_variable.py::test_raise_no_warning_for_nan_in_binary_ops\n  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/_pytest/python.py:194: PytestRemovedIn8Warning: Passing None has been deprecated.\n  See https://docs.pytest.org/en/latest/how-to/capture-warnings.html#additional-use-cases-of-warnings-in-tests for alternatives in common use cases.\n    result = testfunction(**testargs)\n\nxarray/tests/test_dataset.py: 14 warnings\nxarray/tests/test_interp.py: 34 warnings\n  /testbed/xarray/coding/cftimeindex.py:122: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    if LooseVersion(cftime.__version__) < LooseVersion(\"1.0.4\"):\n\nxarray/tests/test_dataset.py: 54 warnings\nxarray/tests/test_interp.py: 10 warnings\n  /testbed/xarray/coding/cftime_offsets.py:242: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    if LooseVersion(cftime.__version__) < LooseVersion(\"1.0.4\"):\n\nxarray/tests/test_dataset.py: 13 warnings\n  /testbed/xarray/core/groupby.py:349: FutureWarning: is_monotonic is deprecated and will be removed in a future version. Use is_monotonic_increasing instead.\n    if not index.is_monotonic:\n\nxarray/tests/test_dataset.py::TestDataset::test_resample_loffset\n  /testbed/xarray/tests/test_dataset.py:3904: FutureWarning: 'loffset' in .resample() and in Grouper() is deprecated.\n  \n  >>> df.resample(freq=\"3s\", loffset=\"8H\")\n  \n  becomes:\n  \n  >>> from pandas.tseries.frequencies import to_offset\n  >>> df = df.resample(freq=\"3s\").mean()\n  >>> df.index = df.index.to_timestamp() + to_offset(\"8H\")\n  \n    ds.bar.to_series().resample(\"24H\", loffset=\"-12H\").mean()\n\nxarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords\nxarray/tests/test_interp.py::test_datetime[x_new0-expected0]\nxarray/tests/test_interp.py::test_datetime[x_new1-expected1]\nxarray/tests/test_interp.py::test_datetime[x_new2-expected2]\nxarray/tests/test_interp.py::test_datetime[x_new3-expected3]\nxarray/tests/test_interp.py::test_datetime[x_new4-0.5]\nxarray/tests/test_interp.py::test_datetime[2000-01-01T12:00-0.5]\nxarray/tests/test_interp.py::test_datetime_single_string\nxarray/tests/test_interp.py::test_datetime_interp_noerror\n  /testbed/xarray/core/missing.py:548: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    if np.issubdtype(new_x.dtype, np.datetime64) and LooseVersion(\n\nxarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords\nxarray/tests/test_interp.py::test_datetime[x_new0-expected0]\nxarray/tests/test_interp.py::test_datetime[x_new1-expected1]\nxarray/tests/test_interp.py::test_datetime[x_new2-expected2]\nxarray/tests/test_interp.py::test_datetime[x_new3-expected3]\nxarray/tests/test_interp.py::test_datetime[x_new4-0.5]\nxarray/tests/test_interp.py::test_datetime[2000-01-01T12:00-0.5]\nxarray/tests/test_interp.py::test_datetime_single_string\nxarray/tests/test_interp.py::test_datetime_interp_noerror\n  /testbed/xarray/core/missing.py:550: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    ) < LooseVersion(\"1.18\"):\n\nxarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords\nxarray/tests/test_interp.py::test_datetime[x_new0-expected0]\nxarray/tests/test_interp.py::test_datetime[x_new1-expected1]\nxarray/tests/test_interp.py::test_datetime[x_new2-expected2]\nxarray/tests/test_interp.py::test_datetime[x_new3-expected3]\nxarray/tests/test_interp.py::test_datetime[x_new4-0.5]\nxarray/tests/test_interp.py::test_datetime[2000-01-01T12:00-0.5]\nxarray/tests/test_interp.py::test_datetime_single_string\nxarray/tests/test_interp.py::test_datetime_interp_noerror\n  /testbed/xarray/core/missing.py:559: FutureWarning: Passing method to DatetimeIndex.get_loc is deprecated and will raise in a future version. Use index.get_indexer([item], method=...) instead.\n    imin = index.get_loc(minval, method=\"nearest\")\n\nxarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords\nxarray/tests/test_interp.py::test_datetime[x_new0-expected0]\nxarray/tests/test_interp.py::test_datetime[x_new1-expected1]\nxarray/tests/test_interp.py::test_datetime[x_new2-expected2]\nxarray/tests/test_interp.py::test_datetime[x_new3-expected3]\nxarray/tests/test_interp.py::test_datetime[x_new4-0.5]\nxarray/tests/test_interp.py::test_datetime[2000-01-01T12:00-0.5]\nxarray/tests/test_interp.py::test_datetime_single_string\nxarray/tests/test_interp.py::test_datetime_interp_noerror\n  /testbed/xarray/core/missing.py:560: FutureWarning: Passing method to DatetimeIndex.get_loc is deprecated and will raise in a future version. Use index.get_indexer([item], method=...) instead.\n    imax = index.get_loc(maxval, method=\"nearest\")\n\nxarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse\n  /testbed/xarray/core/dataset.py:5017: FutureWarning: MultiIndex.is_lexsorted is deprecated as a public function, users should use MultiIndex.is_monotonic_increasing instead.\n    is_sorted = idx.is_lexsorted()\n\nxarray/tests/test_dataset.py: 64 warnings\nxarray/tests/test_variable.py: 46 warnings\n  /testbed/xarray/core/variable.py:1952: DeprecationWarning: the `interpolation=` argument to nanquantile was renamed to `method=`, which has additional options.\n  Users of the modes 'nearest', 'lower', 'higher', or 'midpoint' are encouraged to review the method they used. (Deprecated NumPy 1.22)\n    return np.moveaxis(_quantile_func(npa, **kwargs), 0, -1)\n\nxarray/tests/test_dataset.py: 64 warnings\nxarray/tests/test_variable.py: 12 warnings\n  /testbed/xarray/core/variable.py:1952: DeprecationWarning: the `interpolation=` argument to quantile was renamed to `method=`, which has additional options.\n  Users of the modes 'nearest', 'lower', 'higher', or 'midpoint' are encouraged to review the method they used. (Deprecated NumPy 1.22)\n    return np.moveaxis(_quantile_func(npa, **kwargs), 0, -1)\n\nxarray/tests/test_dataset.py::test_coarsen_coords[1-True]\nxarray/tests/test_dataset.py::test_coarsen_coords[1-False]\n  /testbed/xarray/tests/test_dataset.py:6012: UserWarning: Parsing dates in DD/MM/YYYY format when dayfirst=False (the default) was specified. This may lead to inconsistently parsed dates! Specify a format to ensure consistent parsing.\n    coords={\"time\": pd.date_range(\"15/12/1999\", periods=364)},\n\nxarray/tests/test_dataset.py::test_trapz_datetime[np-True]\nxarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]\n  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/array/core.py:1706: FutureWarning: The `numpy.trapz` function is not implemented by Dask array. You may want to use the da.map_blocks function or something similar to silence this warning. Your code may stop working in a future release.\n    warnings.warn(\n\nxarray/tests/test_interp.py: 3767 warnings\n  /testbed/xarray/core/missing.py:559: FutureWarning: Passing method to Float64Index.get_loc is deprecated and will raise in a future version. Use index.get_indexer([item], method=...) instead.\n    imin = index.get_loc(minval, method=\"nearest\")\n\nxarray/tests/test_interp.py: 3697 warnings\n  /testbed/xarray/core/missing.py:560: FutureWarning: Passing method to Float64Index.get_loc is deprecated and will raise in a future version. Use index.get_indexer([item], method=...) instead.\n    imax = index.get_loc(maxval, method=\"nearest\")\n\nxarray/tests/test_interp.py: 20 warnings\n  /testbed/xarray/core/missing.py:559: FutureWarning: Passing method to Int64Index.get_loc is deprecated and will raise in a future version. Use index.get_indexer([item], method=...) instead.\n    imin = index.get_loc(minval, method=\"nearest\")\n\nxarray/tests/test_interp.py: 20 warnings\n  /testbed/xarray/core/missing.py:560: FutureWarning: Passing method to Int64Index.get_loc is deprecated and will raise in a future version. Use index.get_indexer([item], method=...) instead.\n    imax = index.get_loc(maxval, method=\"nearest\")\n\nxarray/tests/test_interp.py::test_cftime\nxarray/tests/test_interp.py::test_cftime\nxarray/tests/test_interp.py::test_cftime_type_error\nxarray/tests/test_interp.py::test_cftime_list_of_strings\nxarray/tests/test_interp.py::test_cftime_list_of_strings\nxarray/tests/test_interp.py::test_cftime_single_string\nxarray/tests/test_interp.py::test_cftime_single_string\nxarray/tests/test_interp.py::test_3641\nxarray/tests/test_interp.py::test_3641\n  /testbed/xarray/coding/cftimeindex.py:460: FutureWarning: Passing method to CFTimeIndex.get_loc is deprecated and will raise in a future version. Use index.get_indexer([item], method=...) instead.\n    return pd.Index.get_loc(self, key, method=method, tolerance=tolerance)\n\nxarray/tests/test_interp.py::test_interpolate_chunk_advanced[linear]\nxarray/tests/test_interp.py::test_interpolate_chunk_advanced[nearest]\n  /testbed/xarray/core/missing.py:637: PerformanceWarning: Increasing number of chunks by factor of 35\n    interped = interp_func(\n\nxarray/tests/test_interp.py::test_interpolate_chunk_advanced[linear]\nxarray/tests/test_interp.py::test_interpolate_chunk_advanced[nearest]\n  /testbed/xarray/core/missing.py:740: PerformanceWarning: Increasing number of chunks by factor of 35\n    return da.blockwise(\n\nxarray/tests/test_variable.py: 12 warnings\n  /testbed/xarray/core/computation.py:705: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n    if LooseVersion(dask_version) < LooseVersion(\"2.17.0\"):\n\nxarray/tests/test_variable.py::TestVariableWithDask::test_eq_all_dtypes\nxarray/tests/test_variable.py::TestVariableWithDask::test_eq_all_dtypes\nxarray/tests/test_variable.py::TestVariableWithDask::test_eq_all_dtypes\nxarray/tests/test_variable.py::TestVariableWithDask::test_eq_all_dtypes\n  /opt/miniconda3/envs/testbed/lib/python3.10/site-packages/dask/core.py:119: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n    return func(*(_execute_task(a, cache) for a in args))\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n==================================== PASSES ====================================\n____________________________ TestDataset.test_repr _____________________________\n----------------------------- Captured stdout call -----------------------------\n<xarray.Dataset>\nDimensions:  (dim1: 8, dim2: 9, dim3: 10, time: 20)\nCoordinates:\n  * time     (time) datetime64[ns] 2000-01-01 2000-01-02 ... 2000-01-20\n  * dim2     (dim2) float64 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0\n  * dim3     (dim3) <U1 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j'\n    numbers  (dim3) int64 0 1 2 0 0 1 1 2 2 3\nDimensions without coordinates: dim1\nData variables:\n    var1     (dim1, dim2) float64 -1.086 0.9973 0.283 ... 0.1995 0.4684 -0.8312\n    var2     (dim1, dim2) float64 1.162 -1.097 -2.123 ... 0.1302 1.267 0.3328\n    var3     (dim3, dim1) float64 0.5565 -0.2121 0.4563 ... -0.2452 -0.3616\nAttributes:\n    foo:      bar\n<xarray.Dataset>\nDimensions:  ()\nData variables:\n    *empty*\n<xarray.Dataset>\nDimensions:  ()\nData variables:\n    foo      float64 1.0\n_______________________ TestDataset.test_repr_multiindex _______________________\n----------------------------- Captured stdout call -----------------------------\n<xarray.Dataset>\nDimensions:  (x: 4)\nCoordinates:\n  * x        (x) MultiIndex\n  - level_1  (x) object 'a' 'a' 'b' 'b'\n  - level_2  (x) int64 1 2 1 2\nData variables:\n    *empty*\n<xarray.Dataset>\nDimensions:                  (x: 4)\nCoordinates:\n  * x                        (x) MultiIndex\n  - a_quite_long_level_name  (x) object 'a' 'a' 'b' 'b'\n  - level_2                  (x) int64 1 2 1 2\nData variables:\n    *empty*\n_______________________ TestDataset.test_constructor_0d ________________________\n----------------------------- Captured stdout call -----------------------------\nTrue\nNone\n3.4\nnan\nhello\nb'raw'\n2000-01-01\n2000-01-01 12:00:00\n2000-01-01 12:00:00\n<xarray.tests.test_dataset.TestDataset.test_constructor_0d.<locals>.Arbitrary object at 0x7ecdd1a06530>\n__________________ TestVariable.test_pandas_cateogrical_dtype __________________\n----------------------------- Captured stdout call -----------------------------\n<xarray.Variable (x: 10)>\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n_________________ TestVariable.test_pandas_datetime64_with_tz __________________\n----------------------------- Captured stdout call -----------------------------\n<xarray.Variable (x: 10)>\narray([946702800000000000, 946706400000000000, 946710000000000000,\n       946713600000000000, 946717200000000000, 946720800000000000,\n       946724400000000000, 946728000000000000, 946731600000000000,\n       946735200000000000], dtype=object)\n______________ TestVariableWithDask.test_pandas_cateogrical_dtype ______________\n----------------------------- Captured stdout call -----------------------------\n<xarray.Variable (x: 10)>\ndask.array<array, shape=(10,), dtype=int64, chunksize=(10,), chunktype=numpy.ndarray>\n_____________ TestVariableWithDask.test_pandas_datetime64_with_tz ______________\n----------------------------- Captured stdout call -----------------------------\n<xarray.Variable (x: 10)>\ndask.array<array, shape=(10,), dtype=object, chunksize=(10,), chunktype=numpy.ndarray>\n_______________ TestIndexVariable.test_pandas_cateogrical_dtype ________________\n----------------------------- Captured stdout call -----------------------------\n<xarray.IndexVariable 'x' (x: 10)>\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n_______________ TestIndexVariable.test_pandas_datetime64_with_tz _______________\n----------------------------- Captured stdout call -----------------------------\n<xarray.IndexVariable 'x' (x: 10)>\narray([946702800000000000, 946706400000000000, 946710000000000000,\n       946713600000000000, 946717200000000000, 946720800000000000,\n       946724400000000000, 946728000000000000, 946731600000000000,\n       946735200000000000], dtype=object)\n=========================== short test summary info ============================\nPASSED xarray/tests/test_dask.py::test_raise_if_dask_computes\nPASSED xarray/tests/test_dask.py::TestVariable::test_basics\nPASSED xarray/tests/test_dask.py::TestVariable::test_copy\nPASSED xarray/tests/test_dask.py::TestVariable::test_chunk\nPASSED xarray/tests/test_dask.py::TestVariable::test_indexing\nPASSED xarray/tests/test_dask.py::TestVariable::test_squeeze\nPASSED xarray/tests/test_dask.py::TestVariable::test_equals\nPASSED xarray/tests/test_dask.py::TestVariable::test_transpose\nPASSED xarray/tests/test_dask.py::TestVariable::test_shift\nPASSED xarray/tests/test_dask.py::TestVariable::test_roll\nPASSED xarray/tests/test_dask.py::TestVariable::test_unary_op\nPASSED xarray/tests/test_dask.py::TestVariable::test_binary_op\nPASSED xarray/tests/test_dask.py::TestVariable::test_repr\nPASSED xarray/tests/test_dask.py::TestVariable::test_pickle\nPASSED xarray/tests/test_dask.py::TestVariable::test_reduce\nPASSED xarray/tests/test_dask.py::TestVariable::test_missing_values\nPASSED xarray/tests/test_dask.py::TestVariable::test_concat\nPASSED xarray/tests/test_dask.py::TestVariable::test_missing_methods\nPASSED xarray/tests/test_dask.py::TestVariable::test_univariate_ufunc\nPASSED xarray/tests/test_dask.py::TestVariable::test_bivariate_ufunc\nPASSED xarray/tests/test_dask.py::TestVariable::test_compute\nPASSED xarray/tests/test_dask.py::TestVariable::test_persist\nPASSED xarray/tests/test_dask.py::TestVariable::test_tokenize_duck_dask_array\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_rechunk\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_new_chunk\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_lazy_dataset\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_lazy_array\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_compute\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_persist\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_concat_loads_variables\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_rolling\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby_first\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_reindex\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_to_dataset_roundtrip\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_merge\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_ufuncs\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_where_dispatching\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_simultaneous_compute\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dot\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_repr\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_repr\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_pickle\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_pickle\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_getattr\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_getattr\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_values\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_from_dask_variable\nPASSED xarray/tests/test_dask.py::TestDataArrayAndDataset::test_tokenize_duck_dask_array\nPASSED xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe\nPASSED xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_2D\nPASSED xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_coordinates\nPASSED xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_not_daskarray\nPASSED xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_no_coordinate\nPASSED xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_dim_order\nPASSED xarray/tests/test_dask.py::test_dask_kwargs_variable[load]\nPASSED xarray/tests/test_dask.py::test_dask_kwargs_variable[compute]\nPASSED xarray/tests/test_dask.py::test_dask_kwargs_dataarray[load]\nPASSED xarray/tests/test_dask.py::test_dask_kwargs_dataarray[compute]\nPASSED xarray/tests/test_dask.py::test_dask_kwargs_dataarray[persist]\nPASSED xarray/tests/test_dask.py::test_dask_kwargs_dataset[load]\nPASSED xarray/tests/test_dask.py::test_dask_kwargs_dataset[compute]\nPASSED xarray/tests/test_dask.py::test_dask_kwargs_dataset[persist]\nPASSED xarray/tests/test_dask.py::test_persist_Dataset[<lambda>0]\nPASSED xarray/tests/test_dask.py::test_persist_DataArray[<lambda>0]\nPASSED xarray/tests/test_dask.py::test_persist_DataArray[<lambda>1]\nPASSED xarray/tests/test_dask.py::test_dataarray_with_dask_coords\nPASSED xarray/tests/test_dask.py::test_basic_compute\nPASSED xarray/tests/test_dask.py::test_dask_layers_and_dependencies\nPASSED xarray/tests/test_dask.py::test_unify_chunks\nPASSED xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>0-obj0]\nPASSED xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>0-obj1]\nPASSED xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>1-obj0]\nPASSED xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>1-obj1]\nPASSED xarray/tests/test_dask.py::test_auto_chunk_da[obj0]\nPASSED xarray/tests/test_dask.py::test_make_meta\nPASSED xarray/tests/test_dask.py::test_identical_coords_no_computes\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj0]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj1]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj2]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj3]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj0]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj1]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj2]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj3]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj0]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj1]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj2]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj3]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj0]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj1]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj2]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj3]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj0]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj1]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj2]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj3]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj0]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj1]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj2]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj3]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj0]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj1]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj2]\nPASSED xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj3]\nPASSED xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj0]\nPASSED xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj1]\nPASSED xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj2]\nPASSED xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj3]\nPASSED xarray/tests/test_dask.py::test_token_changes_when_buffer_changes[obj0]\nPASSED xarray/tests/test_dask.py::test_token_changes_when_buffer_changes[obj1]\nPASSED xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>0]\nPASSED xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>1]\nPASSED xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>2]\nPASSED xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>0]\nPASSED xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>1]\nPASSED xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>2]\nPASSED xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>0]\nPASSED xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>1]\nPASSED xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>2]\nPASSED xarray/tests/test_dask.py::test_recursive_token\nPASSED xarray/tests/test_dask.py::test_normalize_token_with_backend\nPASSED xarray/tests/test_dask.py::test_lazy_array_equiv_variables[broadcast_equals]\nPASSED xarray/tests/test_dask.py::test_lazy_array_equiv_variables[equals]\nPASSED xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]\nPASSED xarray/tests/test_dask.py::test_lazy_array_equiv_variables[no_conflicts]\nPASSED xarray/tests/test_dask.py::test_lazy_array_equiv_merge[broadcast_equals]\nPASSED xarray/tests/test_dask.py::test_lazy_array_equiv_merge[equals]\nPASSED xarray/tests/test_dask.py::test_lazy_array_equiv_merge[identical]\nPASSED xarray/tests/test_dask.py::test_lazy_array_equiv_merge[no_conflicts]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>0-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>0-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>1-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>1-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>2-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>2-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>3-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>3-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>4-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>4-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>5-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>5-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>6-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>6-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>7-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>7-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>8-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>8-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>9-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>9-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>10-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>10-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>11-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>11-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>12-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>12-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>13-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>13-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>14-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>14-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>15-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>15-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>16-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>16-obj1]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>17-obj0]\nPASSED xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>17-obj1]\nPASSED xarray/tests/test_dask.py::test_more_transforms_pass_lazy_array_equiv\nPASSED xarray/tests/test_dask.py::test_optimize\nPASSED xarray/tests/test_dataset.py::TestDataset::test_repr\nPASSED xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex\nPASSED xarray/tests/test_dataset.py::TestDataset::test_repr_period_index\nPASSED xarray/tests/test_dataset.py::TestDataset::test_unicode_data\nPASSED xarray/tests/test_dataset.py::TestDataset::test_repr_nep18\nPASSED xarray/tests/test_dataset.py::TestDataset::test_info\nPASSED xarray/tests/test_dataset.py::TestDataset::test_constructor\nPASSED xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims\nPASSED xarray/tests/test_dataset.py::TestDataset::test_constructor_1d\nPASSED xarray/tests/test_dataset.py::TestDataset::test_constructor_0d\nPASSED xarray/tests/test_dataset.py::TestDataset::test_constructor_deprecated\nPASSED xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align\nPASSED xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence\nPASSED xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single\nPASSED xarray/tests/test_dataset.py::TestDataset::test_constructor_compat\nPASSED xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_properties\nPASSED xarray/tests/test_dataset.py::TestDataset::test_asarray\nPASSED xarray/tests/test_dataset.py::TestDataset::test_get_index\nPASSED xarray/tests/test_dataset.py::TestDataset::test_attr_access\nPASSED xarray/tests/test_dataset.py::TestDataset::test_variable\nPASSED xarray/tests/test_dataset.py::TestDataset::test_modify_inplace\nPASSED xarray/tests/test_dataset.py::TestDataset::test_coords_properties\nPASSED xarray/tests/test_dataset.py::TestDataset::test_coords_modify\nPASSED xarray/tests/test_dataset.py::TestDataset::test_update_index\nPASSED xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension\nPASSED xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex\nPASSED xarray/tests/test_dataset.py::TestDataset::test_coords_set\nPASSED xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset\nPASSED xarray/tests/test_dataset.py::TestDataset::test_coords_merge\nPASSED xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape\nPASSED xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties\nPASSED xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical\nPASSED xarray/tests/test_dataset.py::TestDataset::test_equals_failures\nPASSED xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals\nPASSED xarray/tests/test_dataset.py::TestDataset::test_attrs\nPASSED xarray/tests/test_dataset.py::TestDataset::test_chunk\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy\nPASSED xarray/tests/test_dataset.py::TestDataset::test_isel\nPASSED xarray/tests/test_dataset.py::TestDataset::test_isel_fancy\nPASSED xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray\nPASSED xarray/tests/test_dataset.py::TestDataset::test_sel\nPASSED xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray\nPASSED xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex\nPASSED xarray/tests/test_dataset.py::TestDataset::test_categorical_index\nPASSED xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex\nPASSED xarray/tests/test_dataset.py::TestDataset::test_sel_drop\nPASSED xarray/tests/test_dataset.py::TestDataset::test_isel_drop\nPASSED xarray/tests/test_dataset.py::TestDataset::test_head\nPASSED xarray/tests/test_dataset.py::TestDataset::test_tail\nPASSED xarray/tests/test_dataset.py::TestDataset::test_thin\nPASSED xarray/tests/test_dataset.py::TestDataset::test_sel_fancy\nPASSED xarray/tests/test_dataset.py::TestDataset::test_sel_method\nPASSED xarray/tests/test_dataset.py::TestDataset::test_loc\nPASSED xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex\nPASSED xarray/tests/test_dataset.py::TestDataset::test_broadcast_like\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_like\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_warning\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_method\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value3]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value3]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[str]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[bytes]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value3]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_exact\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_override\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_exclude\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_nocopy\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_indexes\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_non_unique\nPASSED xarray/tests/test_dataset.py::TestDataset::test_align_str_dtype\nPASSED xarray/tests/test_dataset.py::TestDataset::test_broadcast\nPASSED xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy\nPASSED xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude\nPASSED xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned\nPASSED xarray/tests/test_dataset.py::TestDataset::test_variable_indexing\nPASSED xarray/tests/test_dataset.py::TestDataset::test_drop_variables\nPASSED xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels\nPASSED xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword\nPASSED xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_position\nPASSED xarray/tests/test_dataset.py::TestDataset::test_drop_dims\nPASSED xarray/tests/test_dataset.py::TestDataset::test_copy\nPASSED xarray/tests/test_dataset.py::TestDataset::test_copy_with_data\nPASSED xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors\nPASSED xarray/tests/test_dataset.py::TestDataset::test_rename\nPASSED xarray/tests/test_dataset.py::TestDataset::test_rename_old_name\nPASSED xarray/tests/test_dataset.py::TestDataset::test_rename_same_name\nPASSED xarray/tests/test_dataset.py::TestDataset::test_rename_dims\nPASSED xarray/tests/test_dataset.py::TestDataset::test_rename_vars\nPASSED xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex\nPASSED xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type\nPASSED xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type\nPASSED xarray/tests/test_dataset.py::TestDataset::test_swap_dims\nPASSED xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error\nPASSED xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int\nPASSED xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord\nPASSED xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip\nPASSED xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus\nPASSED xarray/tests/test_dataset.py::TestDataset::test_set_index\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reset_index\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reorder_levels\nPASSED xarray/tests/test_dataset.py::TestDataset::test_stack\nPASSED xarray/tests/test_dataset.py::TestDataset::test_unstack\nPASSED xarray/tests/test_dataset.py::TestDataset::test_unstack_errors\nPASSED xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value\nPASSED xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse\nPASSED xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast\nPASSED xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension\nPASSED xarray/tests/test_dataset.py::TestDataset::test_update\nPASSED xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_update_auto_align\nPASSED xarray/tests/test_dataset.py::TestDataset::test_getitem\nPASSED xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable\nPASSED xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time\nPASSED xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name\nPASSED xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_multiindex\nPASSED xarray/tests/test_dataset.py::TestDataset::test_time_season\nPASSED xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[str]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[bytes]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_assign\nPASSED xarray/tests/test_dataset.py::TestDataset::test_assign_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_assign_attrs\nPASSED xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level\nPASSED xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level\nPASSED xarray/tests/test_dataset.py::TestDataset::test_delitem\nPASSED xarray/tests/test_dataset.py::TestDataset::test_squeeze\nPASSED xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop\nPASSED xarray/tests/test_dataset.py::TestDataset::test_groupby\nPASSED xarray/tests/test_dataset.py::TestDataset::test_groupby_returns_new_type\nPASSED xarray/tests/test_dataset.py::TestDataset::test_groupby_iter\nPASSED xarray/tests/test_dataset.py::TestDataset::test_groupby_errors\nPASSED xarray/tests/test_dataset.py::TestDataset::test_groupby_reduce\nPASSED xarray/tests/test_dataset.py::TestDataset::test_groupby_math\nPASSED xarray/tests/test_dataset.py::TestDataset::test_groupby_math_virtual\nPASSED xarray/tests/test_dataset.py::TestDataset::test_groupby_nan\nPASSED xarray/tests/test_dataset.py::TestDataset::test_groupby_order\nPASSED xarray/tests/test_dataset.py::TestDataset::test_resample_and_first\nPASSED xarray/tests/test_dataset.py::TestDataset::test_resample_min_count\nPASSED xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_with_keep_attrs\nPASSED xarray/tests/test_dataset.py::TestDataset::test_resample_loffset\nPASSED xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_discarding_attrs\nPASSED xarray/tests/test_dataset.py::TestDataset::test_resample_by_last_discarding_attrs\nPASSED xarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_resample_old_api\nPASSED xarray/tests/test_dataset.py::TestDataset::test_resample_ds_da_are_the_same\nPASSED xarray/tests/test_dataset.py::TestDataset::test_ds_resample_apply_func_args\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_array\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe\nPASSED xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe\nPASSED xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_multiindex\nPASSED xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_unsorted_levels\nPASSED xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns\nPASSED xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat\nPASSED xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs\nPASSED xarray/tests/test_dataset.py::TestDataset::test_pickle\nPASSED xarray/tests/test_dataset.py::TestDataset::test_lazy_load\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dropna\nPASSED xarray/tests/test_dataset.py::TestDataset::test_fillna\nPASSED xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>0]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>1]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[absolute]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[abs]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_where\nPASSED xarray/tests/test_dataset.py::TestDataset::test_where_other\nPASSED xarray/tests/test_dataset.py::TestDataset::test_where_drop\nPASSED xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty\nPASSED xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_strings\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis\nPASSED xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims\nPASSED xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_rank\nPASSED xarray/tests/test_dataset.py::TestDataset::test_count\nPASSED xarray/tests/test_dataset.py::TestDataset::test_map\nPASSED xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math\nPASSED xarray/tests/test_dataset.py::TestDataset::test_unary_ops\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg\nPASSED xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str\nPASSED xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_shift[2]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value3]\nPASSED xarray/tests/test_dataset.py::TestDataset::test_roll_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords\nPASSED xarray/tests/test_dataset.py::TestDataset::test_roll_coords_none\nPASSED xarray/tests/test_dataset.py::TestDataset::test_roll_multidim\nPASSED xarray/tests/test_dataset.py::TestDataset::test_real_and_imag\nPASSED xarray/tests/test_dataset.py::TestDataset::test_setattr_raises\nPASSED xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs\nPASSED xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes\nPASSED xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting\nPASSED xarray/tests/test_dataset.py::TestDataset::test_full_like\nPASSED xarray/tests/test_dataset.py::TestDataset::test_combine_first\nPASSED xarray/tests/test_dataset.py::TestDataset::test_sortby\nPASSED xarray/tests/test_dataset.py::TestDataset::test_attribute_access\nPASSED xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion\nPASSED xarray/tests/test_dataset.py::TestDataset::test_polyfit_output\nPASSED xarray/tests/test_dataset.py::TestDataset::test_pad\nPASSED xarray/tests/test_dataset.py::TestDataset::test_astype_attrs\nPASSED xarray/tests/test_dataset.py::test_isin[test_elements0]\nPASSED xarray/tests/test_dataset.py::test_isin[test_elements1]\nPASSED xarray/tests/test_dataset.py::test_isin[test_elements2]\nPASSED xarray/tests/test_dataset.py::test_isin_dask[test_elements0]\nPASSED xarray/tests/test_dataset.py::test_isin_dask[test_elements1]\nPASSED xarray/tests/test_dataset.py::test_isin_dask[test_elements2]\nPASSED xarray/tests/test_dataset.py::test_isin_dataset\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]\nPASSED xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]\nPASSED xarray/tests/test_dataset.py::test_error_message_on_set_supplied\nPASSED xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]\nPASSED xarray/tests/test_dataset.py::test_dir_expected_attrs[None]\nPASSED xarray/tests/test_dataset.py::test_dir_non_string[None]\nPASSED xarray/tests/test_dataset.py::test_dir_unicode[None]\nPASSED xarray/tests/test_dataset.py::test_coarsen_absent_dims_error[1]\nPASSED xarray/tests/test_dataset.py::test_coarsen[1-trim-left-True]\nPASSED xarray/tests/test_dataset.py::test_coarsen[1-trim-left-False]\nPASSED xarray/tests/test_dataset.py::test_coarsen[1-pad-right-True]\nPASSED xarray/tests/test_dataset.py::test_coarsen[1-pad-right-False]\nPASSED xarray/tests/test_dataset.py::test_coarsen_coords[1-True]\nPASSED xarray/tests/test_dataset.py::test_coarsen_coords[1-False]\nPASSED xarray/tests/test_dataset.py::test_coarsen_coords_cftime\nPASSED xarray/tests/test_dataset.py::test_coarsen_keep_attrs\nPASSED xarray/tests/test_dataset.py::test_rolling_keep_attrs[reduce-argument0]\nPASSED xarray/tests/test_dataset.py::test_rolling_keep_attrs[mean-argument1]\nPASSED xarray/tests/test_dataset.py::test_rolling_keep_attrs[construct-argument2]\nPASSED xarray/tests/test_dataset.py::test_rolling_keep_attrs[count-argument3]\nPASSED xarray/tests/test_dataset.py::test_rolling_keep_attrs_deprecated\nPASSED xarray/tests/test_dataset.py::test_rolling_properties[1]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-sum]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-mean]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-std]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-var]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-min]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-max]\nPASSED xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-median]\nPASSED xarray/tests/test_dataset.py::test_rolling_exp[1]\nPASSED xarray/tests/test_dataset.py::test_rolling_exp_keep_attrs[1]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_construct[1-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_construct[1-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_construct[2-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_construct[2-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_construct[3-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_construct[3-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_construct[4-True]\nPASSED xarray/tests/test_dataset.py::test_rolling_construct[4-False]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-2]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-1]\nPASSED xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-True-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-False-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-True-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-False-2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-True]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-False]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-center2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-True]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-False]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-center2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-True]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-False]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-center2]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-True]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-False]\nPASSED xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-center2]\nPASSED xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops\nPASSED xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[2]\nPASSED xarray/tests/test_dataset.py::test_differentiate[1-True]\nPASSED xarray/tests/test_dataset.py::test_differentiate[1-False]\nPASSED xarray/tests/test_dataset.py::test_differentiate[2-True]\nPASSED xarray/tests/test_dataset.py::test_differentiate[2-False]\nPASSED xarray/tests/test_dataset.py::test_differentiate_datetime[True]\nPASSED xarray/tests/test_dataset.py::test_differentiate_datetime[False]\nPASSED xarray/tests/test_dataset.py::test_differentiate_cftime[True]\nPASSED xarray/tests/test_dataset.py::test_differentiate_cftime[False]\nPASSED xarray/tests/test_dataset.py::test_integrate[True]\nPASSED xarray/tests/test_dataset.py::test_integrate[False]\nPASSED xarray/tests/test_dataset.py::test_trapz_datetime[np-True]\nPASSED xarray/tests/test_dataset.py::test_trapz_datetime[np-False]\nPASSED xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]\nPASSED xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]\nPASSED xarray/tests/test_dataset.py::test_no_dict\nPASSED xarray/tests/test_dataset.py::test_subclass_slots\nPASSED xarray/tests/test_dataset.py::test_weakref\nPASSED xarray/tests/test_dataset.py::test_deepcopy_obj_array\nPASSED xarray/tests/test_interp.py::test_keywargs\nPASSED xarray/tests/test_interp.py::test_interpolate_1d[0-x-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_1d[0-x-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_1d[0-y-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_1d[0-y-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_1d[1-x-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_1d[1-x-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_1d[1-y-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_1d[1-y-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_1d_methods[cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_1d_methods[zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_vectorize[False]\nPASSED xarray/tests/test_interp.py::test_interpolate_vectorize[True]\nPASSED xarray/tests/test_interp.py::test_interpolate_nd[3]\nPASSED xarray/tests/test_interp.py::test_interpolate_nd[4]\nPASSED xarray/tests/test_interp.py::test_interpolate_nd_nd\nPASSED xarray/tests/test_interp.py::test_interpolate_nd_with_nan\nPASSED xarray/tests/test_interp.py::test_interpolate_scalar[0-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_scalar[1-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_nd_scalar[3-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_nd_scalar[4-linear]\nPASSED xarray/tests/test_interp.py::test_nans[True]\nPASSED xarray/tests/test_interp.py::test_nans[False]\nPASSED xarray/tests/test_interp.py::test_errors[True]\nPASSED xarray/tests/test_interp.py::test_errors[False]\nPASSED xarray/tests/test_interp.py::test_dtype\nPASSED xarray/tests/test_interp.py::test_sorted\nPASSED xarray/tests/test_interp.py::test_dimension_wo_coords\nPASSED xarray/tests/test_interp.py::test_dataset\nPASSED xarray/tests/test_interp.py::test_interpolate_dimorder[0]\nPASSED xarray/tests/test_interp.py::test_interpolate_dimorder[3]\nPASSED xarray/tests/test_interp.py::test_interp_like\nPASSED xarray/tests/test_interp.py::test_datetime[x_new0-expected0]\nPASSED xarray/tests/test_interp.py::test_datetime[x_new1-expected1]\nPASSED xarray/tests/test_interp.py::test_datetime[x_new2-expected2]\nPASSED xarray/tests/test_interp.py::test_datetime[x_new3-expected3]\nPASSED xarray/tests/test_interp.py::test_datetime[x_new4-0.5]\nPASSED xarray/tests/test_interp.py::test_datetime_single_string\nPASSED xarray/tests/test_interp.py::test_cftime\nPASSED xarray/tests/test_interp.py::test_cftime_type_error\nPASSED xarray/tests/test_interp.py::test_cftime_list_of_strings\nPASSED xarray/tests/test_interp.py::test_cftime_single_string\nPASSED xarray/tests/test_interp.py::test_datetime_to_non_datetime_error\nPASSED xarray/tests/test_interp.py::test_cftime_to_non_cftime_error\nPASSED xarray/tests/test_interp.py::test_datetime_interp_noerror\nPASSED xarray/tests/test_interp.py::test_3641\nPASSED xarray/tests/test_interp.py::test_decompose[nearest]\nPASSED xarray/tests/test_interp.py::test_decompose[linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-nearest]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-zero]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-slinear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-quadratic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-cubic]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_advanced[linear]\nPASSED xarray/tests/test_interp.py::test_interpolate_chunk_advanced[nearest]\nPASSED xarray/tests/test_variable.py::TestVariable::test_properties\nPASSED xarray/tests/test_variable.py::TestVariable::test_attrs\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_dict\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_1d\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_1d_fancy\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_size_zero\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_nd_indexer\nPASSED xarray/tests/test_variable.py::TestVariable::test_index_0d_int\nPASSED xarray/tests/test_variable.py::TestVariable::test_index_0d_float\nPASSED xarray/tests/test_variable.py::TestVariable::test_index_0d_string\nPASSED xarray/tests/test_variable.py::TestVariable::test_index_0d_datetime\nPASSED xarray/tests/test_variable.py::TestVariable::test_index_0d_timedelta64\nPASSED xarray/tests/test_variable.py::TestVariable::test_index_0d_not_a_time\nPASSED xarray/tests/test_variable.py::TestVariable::test_index_0d_object\nPASSED xarray/tests/test_variable.py::TestVariable::test_0d_object_array_with_list\nPASSED xarray/tests/test_variable.py::TestVariable::test_index_and_concat_datetime\nPASSED xarray/tests/test_variable.py::TestVariable::test_0d_time_data\nPASSED xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion\nPASSED xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion\nPASSED xarray/tests/test_variable.py::TestVariable::test_object_conversion\nPASSED xarray/tests/test_variable.py::TestVariable::test_datetime64_valid_range\nPASSED xarray/tests/test_variable.py::TestVariable::test_pandas_data\nPASSED xarray/tests/test_variable.py::TestVariable::test_pandas_period_index\nPASSED xarray/tests/test_variable.py::TestVariable::test_1d_math\nPASSED xarray/tests/test_variable.py::TestVariable::test_1d_reduce\nPASSED xarray/tests/test_variable.py::TestVariable::test_array_interface\nPASSED xarray/tests/test_variable.py::TestVariable::test___array__\nPASSED xarray/tests/test_variable.py::TestVariable::test_equals_all_dtypes\nPASSED xarray/tests/test_variable.py::TestVariable::test_eq_all_dtypes\nPASSED xarray/tests/test_variable.py::TestVariable::test_encoding_preserved\nPASSED xarray/tests/test_variable.py::TestVariable::test_concat\nPASSED xarray/tests/test_variable.py::TestVariable::test_concat_attrs\nPASSED xarray/tests/test_variable.py::TestVariable::test_concat_fixed_len_str\nPASSED xarray/tests/test_variable.py::TestVariable::test_concat_number_strings\nPASSED xarray/tests/test_variable.py::TestVariable::test_concat_mixed_dtypes\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy[float-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy[float-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy[int-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy[int-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy[str-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy[str-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy_index\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy_with_data\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy_with_data_errors\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data\nPASSED xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data_errors\nPASSED xarray/tests/test_variable.py::TestVariable::test_replace\nPASSED xarray/tests/test_variable.py::TestVariable::test_real_and_imag\nPASSED xarray/tests/test_variable.py::TestVariable::test_aggregate_complex\nPASSED xarray/tests/test_variable.py::TestVariable::test_pandas_cateogrical_dtype\nPASSED xarray/tests/test_variable.py::TestVariable::test_pandas_datetime64_with_tz\nPASSED xarray/tests/test_variable.py::TestVariable::test_multiindex\nPASSED xarray/tests/test_variable.py::TestVariable::test_load\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_advanced\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_uint_1d\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_uint\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_0d_array\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_fancy\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_error\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-mean]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-edge]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-maximum]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-minimum]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-symmetric]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-wrap]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-mean]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-edge]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-maximum]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-minimum]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-symmetric]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-wrap]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-mean]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-edge]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-maximum]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-minimum]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-symmetric]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-wrap]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-mean]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-edge]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-maximum]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-minimum]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-symmetric]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-wrap]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-mean]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-edge]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-maximum]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-minimum]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-symmetric]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-wrap]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg0-np_arg0]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg1-np_arg1]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg2-np_arg2]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg3-np_arg3]\nPASSED xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg4-np_arg4]\nPASSED xarray/tests/test_variable.py::TestVariable::test_rolling_window\nPASSED xarray/tests/test_variable.py::TestVariable::test_data_and_values\nPASSED xarray/tests/test_variable.py::TestVariable::test_numpy_same_methods\nPASSED xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion_scalar\nPASSED xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion_scalar\nPASSED xarray/tests/test_variable.py::TestVariable::test_0d_str\nPASSED xarray/tests/test_variable.py::TestVariable::test_0d_datetime\nPASSED xarray/tests/test_variable.py::TestVariable::test_0d_timedelta\nPASSED xarray/tests/test_variable.py::TestVariable::test_equals_and_identical\nPASSED xarray/tests/test_variable.py::TestVariable::test_broadcast_equals\nPASSED xarray/tests/test_variable.py::TestVariable::test_no_conflicts\nPASSED xarray/tests/test_variable.py::TestVariable::test_as_variable\nPASSED xarray/tests/test_variable.py::TestVariable::test_repr\nPASSED xarray/tests/test_variable.py::TestVariable::test_repr_lazy_data\nPASSED xarray/tests/test_variable.py::TestVariable::test_detect_indexer_type\nPASSED xarray/tests/test_variable.py::TestVariable::test_indexer_type\nPASSED xarray/tests/test_variable.py::TestVariable::test_items\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_basic\nPASSED xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_2d_input\nPASSED xarray/tests/test_variable.py::TestVariable::test_isel\nPASSED xarray/tests/test_variable.py::TestVariable::test_index_0d_numpy_string\nPASSED xarray/tests/test_variable.py::TestVariable::test_indexing_0d_unicode\nPASSED xarray/tests/test_variable.py::TestVariable::test_shift[fill_value0]\nPASSED xarray/tests/test_variable.py::TestVariable::test_shift[2]\nPASSED xarray/tests/test_variable.py::TestVariable::test_shift[2.0]\nPASSED xarray/tests/test_variable.py::TestVariable::test_shift2d\nPASSED xarray/tests/test_variable.py::TestVariable::test_roll\nPASSED xarray/tests/test_variable.py::TestVariable::test_roll_consistency\nPASSED xarray/tests/test_variable.py::TestVariable::test_transpose\nPASSED xarray/tests/test_variable.py::TestVariable::test_transpose_0d\nPASSED xarray/tests/test_variable.py::TestVariable::test_squeeze\nPASSED xarray/tests/test_variable.py::TestVariable::test_get_axis_num\nPASSED xarray/tests/test_variable.py::TestVariable::test_set_dims\nPASSED xarray/tests/test_variable.py::TestVariable::test_set_dims_object_dtype\nPASSED xarray/tests/test_variable.py::TestVariable::test_stack\nPASSED xarray/tests/test_variable.py::TestVariable::test_stack_errors\nPASSED xarray/tests/test_variable.py::TestVariable::test_unstack\nPASSED xarray/tests/test_variable.py::TestVariable::test_unstack_errors\nPASSED xarray/tests/test_variable.py::TestVariable::test_unstack_2d\nPASSED xarray/tests/test_variable.py::TestVariable::test_stack_unstack_consistency\nPASSED xarray/tests/test_variable.py::TestVariable::test_broadcasting_math\nPASSED xarray/tests/test_variable.py::TestVariable::test_broadcasting_failures\nPASSED xarray/tests/test_variable.py::TestVariable::test_inplace_math\nPASSED xarray/tests/test_variable.py::TestVariable::test_reduce\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-True]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-False]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-0.25]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q1]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q2]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-0.25]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q1]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q2]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_chunked_dim_error\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[-0.1]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[1.1]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q2]\nPASSED xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q3]\nPASSED xarray/tests/test_variable.py::TestVariable::test_rank_dask_raises\nPASSED xarray/tests/test_variable.py::TestVariable::test_rank\nPASSED xarray/tests/test_variable.py::TestVariable::test_big_endian_reduce\nPASSED xarray/tests/test_variable.py::TestVariable::test_reduce_funcs\nPASSED xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims\nPASSED xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims_dask\nPASSED xarray/tests/test_variable.py::TestVariable::test_reduce_keep_attrs\nPASSED xarray/tests/test_variable.py::TestVariable::test_binary_ops_keep_attrs\nPASSED xarray/tests/test_variable.py::TestVariable::test_count\nPASSED xarray/tests/test_variable.py::TestVariable::test_setitem\nPASSED xarray/tests/test_variable.py::TestVariable::test_setitem_fancy\nPASSED xarray/tests/test_variable.py::TestVariable::test_coarsen\nPASSED xarray/tests/test_variable.py::TestVariable::test_coarsen_2d\nPASSED xarray/tests/test_variable.py::TestVariable::test_coarsen_keep_attrs\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_properties\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_attrs\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_dict\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_size_zero\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_int\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_float\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_string\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_datetime\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_timedelta64\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_not_a_time\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_object\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_index_and_concat_datetime\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_0d_time_data\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_conversion\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_timedelta64_conversion\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_object_conversion\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_valid_range\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_data\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_period_index\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_1d_math\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_1d_reduce\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test___array__\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_equals_all_dtypes\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_encoding_preserved\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_concat\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_concat_attrs\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_concat_fixed_len_str\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_concat_number_strings\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_concat_mixed_dtypes\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-True]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-False]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-True]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-False]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-True]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-False]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data_errors\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data_errors\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_replace\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_real_and_imag\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_aggregate_complex\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_cateogrical_dtype\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_datetime64_with_tz\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_multiindex\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_load\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_advanced\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint_1d\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_0d_array\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_error\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-mean]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-edge]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-maximum]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-minimum]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-symmetric]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-wrap]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-mean]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-edge]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-maximum]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-minimum]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-symmetric]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-wrap]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-mean]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-edge]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-maximum]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-minimum]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-symmetric]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-wrap]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-mean]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-edge]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-maximum]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-minimum]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-symmetric]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-wrap]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-mean]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-edge]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-maximum]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-minimum]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-symmetric]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-wrap]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg0-np_arg0]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg1-np_arg1]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg2-np_arg2]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg3-np_arg3]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg4-np_arg4]\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_fancy\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d_fancy\nPASSED xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_nd_indexer\nPASSED xarray/tests/test_variable.py::TestVariableWithSparse::test_as_sparse\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_properties\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_attrs\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_getitem_dict\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d_fancy\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_size_zero\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_nd_indexer\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_int\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_float\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_string\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_datetime\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_timedelta64\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_not_a_time\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_object\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_0d_object_array_with_list\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_index_and_concat_datetime\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_0d_time_data\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_conversion\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_timedelta64_conversion\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_object_conversion\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_valid_range\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_pandas_data\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_pandas_period_index\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_1d_math\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_1d_reduce\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_array_interface\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test___array__\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_equals_all_dtypes\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_eq_all_dtypes\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_encoding_preserved\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_concat\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_concat_attrs\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_concat_fixed_len_str\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_concat_number_strings\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_concat_mixed_dtypes\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-True]\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-False]\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-True]\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-False]\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-True]\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-False]\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy_index\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data_errors\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data_errors\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_replace\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_real_and_imag\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_aggregate_complex\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_pandas_cateogrical_dtype\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_pandas_datetime64_with_tz\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_multiindex\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_load\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_getitem_uint_1d\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_getitem_0d_array\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_init\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_to_index\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_multiindex_default_level_names\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_data\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_name\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_level_names\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_get_level_variable\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_concat_periods\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_concat_multiindex\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[str]\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[bytes]\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_coordinate_alias\nPASSED xarray/tests/test_variable.py::TestIndexVariable::test_datetime64\nPASSED xarray/tests/test_variable.py::TestAsCompatibleData::test_unchanged_types\nPASSED xarray/tests/test_variable.py::TestAsCompatibleData::test_converted_types\nPASSED xarray/tests/test_variable.py::TestAsCompatibleData::test_masked_array\nPASSED xarray/tests/test_variable.py::TestAsCompatibleData::test_datetime\nPASSED xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like\nPASSED xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask\nPASSED xarray/tests/test_variable.py::TestAsCompatibleData::test_zeros_like\nPASSED xarray/tests/test_variable.py::TestAsCompatibleData::test_ones_like\nPASSED xarray/tests/test_variable.py::TestAsCompatibleData::test_unsupported_type\nPASSED xarray/tests/test_variable.py::test_raise_no_warning_for_nan_in_binary_ops\nPASSED xarray/tests/test_variable.py::TestBackendIndexing::test_NumpyIndexingAdapter\nPASSED xarray/tests/test_variable.py::TestBackendIndexing::test_LazilyOuterIndexedArray\nPASSED xarray/tests/test_variable.py::TestBackendIndexing::test_CopyOnWriteArray\nPASSED xarray/tests/test_variable.py::TestBackendIndexing::test_MemoryCachedArray\nPASSED xarray/tests/test_variable.py::TestBackendIndexing::test_DaskIndexingAdapter\nSKIPPED [1] xarray/tests/test_dask.py:587: no meta\nSKIPPED [16] xarray/tests/test_dataset.py:6317: std with window == 1 is unstable in bottleneck\nXFAIL xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_2D_set_index\nXFAIL xarray/tests/test_dataset.py::TestDataset::test_copy_coords[True-expected_orig0]\nXFAIL xarray/tests/test_interp.py::test_datetime[2000-01-01T12:00-0.5]\nXFAIL xarray/tests/test_variable.py::TestVariable::test_timedelta64_valid_range - pandas issue 36615\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_timedelta64_valid_range - pandas issue 36615\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-median] - median is not implemented by Dask\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-median] - median is not implemented by Dask\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-median] - median is not implemented by Dask\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-reflect] - dask.array.pad bug\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-median] - median is not implemented by Dask\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-reflect] - dask.array.pad bug\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-median] - median is not implemented by Dask\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-reflect] - dask.array.pad bug\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_0d_object_array_with_list\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_array_interface\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index\nXFAIL xarray/tests/test_variable.py::TestVariableWithDask::test_eq_all_dtypes\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_timedelta64_valid_range - pandas issue 36615\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_getitem_error\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_getitem_advanced\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_getitem_fancy\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_getitem_uint\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg0-np_arg0-mean]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg0-np_arg0-median]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg0-np_arg0-reflect]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg0-np_arg0-edge]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg0-np_arg0-linear_ramp]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg0-np_arg0-maximum]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg0-np_arg0-minimum]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg0-np_arg0-symmetric]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg0-np_arg0-wrap]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg1-np_arg1-mean]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg1-np_arg1-median]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg1-np_arg1-reflect]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg1-np_arg1-edge]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg1-np_arg1-linear_ramp]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg1-np_arg1-maximum]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg1-np_arg1-minimum]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg1-np_arg1-symmetric]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg1-np_arg1-wrap]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg2-np_arg2-mean]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg2-np_arg2-median]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg2-np_arg2-reflect]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg2-np_arg2-edge]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg2-np_arg2-linear_ramp]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg2-np_arg2-maximum]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg2-np_arg2-minimum]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg2-np_arg2-symmetric]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg2-np_arg2-wrap]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg3-np_arg3-mean]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg3-np_arg3-median]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg3-np_arg3-reflect]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg3-np_arg3-edge]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg3-np_arg3-linear_ramp]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg3-np_arg3-maximum]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg3-np_arg3-minimum]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg3-np_arg3-symmetric]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg3-np_arg3-wrap]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg4-np_arg4-mean]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg4-np_arg4-median]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg4-np_arg4-reflect]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg4-np_arg4-edge]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg4-np_arg4-linear_ramp]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg4-np_arg4-maximum]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg4-np_arg4-minimum]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg4-np_arg4-symmetric]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad[xr_arg4-np_arg4-wrap]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad_constant_values[xr_arg0-np_arg0]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad_constant_values[xr_arg1-np_arg1]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad_constant_values[xr_arg2-np_arg2]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad_constant_values[xr_arg3-np_arg3]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_pad_constant_values[xr_arg4-np_arg4]\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_rolling_window\nXFAIL xarray/tests/test_variable.py::TestIndexVariable::test_coarsen_2d\nXPASS xarray/tests/test_dataset.py::TestDataset::test_copy_coords[False-expected_orig1] \nXPASS xarray/tests/test_dataset.py::test_raise_no_warning_dask_rolling_assert_close[mean-2] See https://github.com/pydata/xarray/pull/4369 or docstring\nXPASS xarray/tests/test_dataset.py::test_raise_no_warning_dask_rolling_assert_close[max-2] See https://github.com/pydata/xarray/pull/4369 or docstring\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-median] median is not implemented by Dask\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-reflect] dask.array.pad bug\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-linear_ramp] pint bug: https://github.com/hgrecco/pint/issues/1026\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-median] median is not implemented by Dask\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-reflect] dask.array.pad bug\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-linear_ramp] pint bug: https://github.com/hgrecco/pint/issues/1026\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-median] median is not implemented by Dask\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-reflect] dask.array.pad bug\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-linear_ramp] pint bug: https://github.com/hgrecco/pint/issues/1026\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-median] median is not implemented by Dask\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-reflect] dask.array.pad bug\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-linear_ramp] pint bug: https://github.com/hgrecco/pint/issues/1026\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-median] median is not implemented by Dask\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-reflect] dask.array.pad bug\nXPASS xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-linear_ramp] pint bug: https://github.com/hgrecco/pint/issues/1026\nXPASS xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-reflect] dask.array.pad bug\nXPASS xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-linear_ramp] pint bug: https://github.com/hgrecco/pint/issues/1026\nXPASS xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-reflect] dask.array.pad bug\nXPASS xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-linear_ramp] pint bug: https://github.com/hgrecco/pint/issues/1026\nXPASS xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-linear_ramp] pint bug: https://github.com/hgrecco/pint/issues/1026\nXPASS xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-linear_ramp] pint bug: https://github.com/hgrecco/pint/issues/1026\nXPASS xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-linear_ramp] pint bug: https://github.com/hgrecco/pint/issues/1026\nFAILED xarray/tests/test_dask.py::test_persist_Dataset[<lambda>1] - IndexErro...\nFAILED xarray/tests/test_dask.py::test_map_blocks_error - AttributeError: 'di...\nFAILED xarray/tests/test_dask.py::test_map_blocks[obj0] - AttributeError: 'di...\nFAILED xarray/tests/test_dask.py::test_map_blocks[obj1] - AttributeError: 'di...\nFAILED xarray/tests/test_dask.py::test_map_blocks_convert_args_to_list[obj0]\nFAILED xarray/tests/test_dask.py::test_map_blocks_convert_args_to_list[obj1]\nFAILED xarray/tests/test_dask.py::test_map_blocks_dask_args - AttributeError:...\nFAILED xarray/tests/test_dask.py::test_map_blocks_add_attrs[obj0] - Attribute...\nFAILED xarray/tests/test_dask.py::test_map_blocks_add_attrs[obj1] - Attribute...\nFAILED xarray/tests/test_dask.py::test_map_blocks_change_name - AttributeErro...\nFAILED xarray/tests/test_dask.py::test_map_blocks_kwargs[obj0] - AttributeErr...\nFAILED xarray/tests/test_dask.py::test_map_blocks_kwargs[obj1] - AttributeErr...\nFAILED xarray/tests/test_dask.py::test_map_blocks_to_array - AttributeError: ...\nFAILED xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>0]\nFAILED xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>1]\nFAILED xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>2]\nFAILED xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>3]\nFAILED xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>4]\nFAILED xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>5]\nFAILED xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>6]\nFAILED xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>7]\nFAILED xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>0]\nFAILED xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>1]\nFAILED xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>2]\nFAILED xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>3]\nFAILED xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>4]\nFAILED xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>5]\nFAILED xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>6]\nFAILED xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>7]\nFAILED xarray/tests/test_dask.py::test_map_blocks_da_ds_with_template[obj0]\nFAILED xarray/tests/test_dask.py::test_map_blocks_da_ds_with_template[obj1]\nFAILED xarray/tests/test_dask.py::test_map_blocks_template_convert_object - A...\nFAILED xarray/tests/test_dask.py::test_map_blocks_errors_bad_template[obj0]\nFAILED xarray/tests/test_dask.py::test_map_blocks_errors_bad_template[obj1]\nFAILED xarray/tests/test_dask.py::test_map_blocks_errors_bad_template_2 - Att...\nFAILED xarray/tests/test_dask.py::test_map_blocks_object_method[obj0] - Attri...\nFAILED xarray/tests/test_dask.py::test_map_blocks_object_method[obj1] - Attri...\nFAILED xarray/tests/test_dask.py::test_map_blocks_hlg_layers - AttributeError...\nFAILED xarray/tests/test_dataset.py::TestDataset::test_sel_categorical - Impo...\nFAILED xarray/tests/test_dataset.py::TestDataset::test_sel_categorical_error\nFAILED xarray/tests/test_dataset.py::TestDataset::test_categorical_multiindex\nFAILED xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_categorical\nFAILED xarray/tests/test_dataset.py::TestDataset::test_polyfit_warnings - ass...\n= 43 failed, 1694 passed, 17 skipped, 74 xfailed, 25 xpassed, 8005 warnings in 79.23s (0:01:19) =\n", {"xarray/tests/test_dask.py::test_raise_if_dask_computes": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_basics": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_copy": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_chunk": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_indexing": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_squeeze": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_equals": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_transpose": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_shift": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_roll": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_unary_op": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_binary_op": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_repr": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_pickle": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_reduce": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_missing_values": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_concat": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_missing_methods": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_univariate_ufunc": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_bivariate_ufunc": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_compute": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_persist": "PASSED", "xarray/tests/test_dask.py::TestVariable::test_tokenize_duck_dask_array": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_rechunk": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_new_chunk": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_lazy_dataset": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_lazy_array": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_compute": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_persist": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_concat_loads_variables": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_rolling": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_groupby_first": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_reindex": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_to_dataset_roundtrip": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_merge": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_ufuncs": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_where_dispatching": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_simultaneous_compute": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_stack": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dot": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_repr": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_repr": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_pickle": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_pickle": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataarray_getattr": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_dataset_getattr": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_values": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_from_dask_variable": "PASSED", "xarray/tests/test_dask.py::TestDataArrayAndDataset::test_tokenize_duck_dask_array": "PASSED", "xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe": "PASSED", "xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_2D": "PASSED", "xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_coordinates": "PASSED", "xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_not_daskarray": "PASSED", "xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_no_coordinate": "PASSED", "xarray/tests/test_dask.py::TestToDaskDataFrame::test_to_dask_dataframe_dim_order": "PASSED", "xarray/tests/test_dask.py::test_dask_kwargs_variable[load]": "PASSED", "xarray/tests/test_dask.py::test_dask_kwargs_variable[compute]": "PASSED", "xarray/tests/test_dask.py::test_dask_kwargs_dataarray[load]": "PASSED", "xarray/tests/test_dask.py::test_dask_kwargs_dataarray[compute]": "PASSED", "xarray/tests/test_dask.py::test_dask_kwargs_dataarray[persist]": "PASSED", "xarray/tests/test_dask.py::test_dask_kwargs_dataset[load]": "PASSED", "xarray/tests/test_dask.py::test_dask_kwargs_dataset[compute]": "PASSED", "xarray/tests/test_dask.py::test_dask_kwargs_dataset[persist]": "PASSED", "xarray/tests/test_dask.py::test_persist_Dataset[<lambda>0]": "PASSED", "xarray/tests/test_dask.py::test_persist_DataArray[<lambda>0]": "PASSED", "xarray/tests/test_dask.py::test_persist_DataArray[<lambda>1]": "PASSED", "xarray/tests/test_dask.py::test_dataarray_with_dask_coords": "PASSED", "xarray/tests/test_dask.py::test_basic_compute": "PASSED", "xarray/tests/test_dask.py::test_dask_layers_and_dependencies": "PASSED", "xarray/tests/test_dask.py::test_unify_chunks": "PASSED", "xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>0-obj0]": "PASSED", "xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>0-obj1]": "PASSED", "xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>1-obj0]": "PASSED", "xarray/tests/test_dask.py::test_unify_chunks_shallow_copy[<lambda>1-obj1]": "PASSED", "xarray/tests/test_dask.py::test_auto_chunk_da[obj0]": "PASSED", "xarray/tests/test_dask.py::test_make_meta": "PASSED", "xarray/tests/test_dask.py::test_identical_coords_no_computes": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj0]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj1]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj2]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>0-obj3]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj0]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj1]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj2]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>1-obj3]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj0]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj1]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj2]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>2-obj3]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj0]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj1]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj2]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>3-obj3]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj0]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj1]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj2]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>4-obj3]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj0]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj1]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj2]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>5-obj3]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj0]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj1]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj2]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_on_transform[<lambda>6-obj3]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj0]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj1]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj2]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_when_data_changes[obj3]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_when_buffer_changes[obj0]": "PASSED", "xarray/tests/test_dask.py::test_token_changes_when_buffer_changes[obj1]": "PASSED", "xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>0]": "PASSED", "xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>1]": "PASSED", "xarray/tests/test_dask.py::test_token_identical[obj0-<lambda>2]": "PASSED", "xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>0]": "PASSED", "xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>1]": "PASSED", "xarray/tests/test_dask.py::test_token_identical[obj1-<lambda>2]": "PASSED", "xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>0]": "PASSED", "xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>1]": "PASSED", "xarray/tests/test_dask.py::test_token_identical[obj2-<lambda>2]": "PASSED", "xarray/tests/test_dask.py::test_recursive_token": "PASSED", "xarray/tests/test_dask.py::test_normalize_token_with_backend": "PASSED", "xarray/tests/test_dask.py::test_lazy_array_equiv_variables[broadcast_equals]": "PASSED", "xarray/tests/test_dask.py::test_lazy_array_equiv_variables[equals]": "PASSED", "xarray/tests/test_dask.py::test_lazy_array_equiv_variables[identical]": "PASSED", "xarray/tests/test_dask.py::test_lazy_array_equiv_variables[no_conflicts]": "PASSED", "xarray/tests/test_dask.py::test_lazy_array_equiv_merge[broadcast_equals]": "PASSED", "xarray/tests/test_dask.py::test_lazy_array_equiv_merge[equals]": "PASSED", "xarray/tests/test_dask.py::test_lazy_array_equiv_merge[identical]": "PASSED", "xarray/tests/test_dask.py::test_lazy_array_equiv_merge[no_conflicts]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>0-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>0-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>1-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>1-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>2-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>2-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>3-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>3-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>4-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>4-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>5-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>5-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>6-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>6-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>7-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>7-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>8-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>8-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>9-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>9-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>10-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>10-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>11-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>11-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>12-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>12-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>13-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>13-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>14-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>14-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>15-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>15-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>16-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>16-obj1]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>17-obj0]": "PASSED", "xarray/tests/test_dask.py::test_transforms_pass_lazy_array_equiv[<lambda>17-obj1]": "PASSED", "xarray/tests/test_dask.py::test_more_transforms_pass_lazy_array_equiv": "PASSED", "xarray/tests/test_dask.py::test_optimize": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_repr": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_repr_multiindex": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_repr_period_index": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_unicode_data": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_repr_nep18": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_info": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_constructor": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_constructor_invalid_dims": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_constructor_1d": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_constructor_0d": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_constructor_deprecated": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_constructor_auto_align": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_sequence": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_constructor_pandas_single": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_constructor_compat": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_constructor_with_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_properties": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_asarray": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_get_index": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_attr_access": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_variable": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_modify_inplace": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_coords_properties": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_coords_modify": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_update_index": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_with_new_dimension": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_coords_setitem_multiindex": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_coords_set": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_coords_to_dataset": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_coords_merge": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_coords_merge_mismatched_shape": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_data_vars_properties": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_equals_and_identical": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_equals_failures": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_broadcast_equals": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_attrs": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_chunk": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dask_is_lazy": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_isel": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_isel_fancy": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_isel_dataarray": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_sel": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_sel_dataarray_mindex": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_categorical_index": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_categorical_reindex": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_sel_drop": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_isel_drop": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_head": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_tail": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_thin": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_sel_fancy": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_sel_method": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_loc": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_selection_multiindex": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_broadcast_like": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_like": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_warning": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_variables_copied": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_method": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value0]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[2.0]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_fill_value[fill_value3]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value0]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[2.0]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_like_fill_value[fill_value3]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[str]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reindex_str_dtype[bytes]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value0]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[2.0]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_fill_value[fill_value3]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_exact": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_override": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_exclude": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_nocopy": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_indexes": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_non_unique": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_align_str_dtype": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_broadcast": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_broadcast_nocopy": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_broadcast_exclude": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_broadcast_misaligned": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_variable_indexing": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_drop_variables": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_drop_index_labels": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_keyword": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_drop_labels_by_position": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_drop_dims": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_copy": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_copy_with_data": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_copy_with_data_errors": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_rename": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_rename_old_name": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_rename_same_name": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_rename_dims": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_rename_vars": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_rename_multiindex": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_CFTimeIndex_type": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_rename_does_not_change_DatetimeIndex_type": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_swap_dims": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_error": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_int": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_existing_scalar_coord": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_isel_expand_dims_roundtrip": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_mixed_int_and_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_expand_dims_kwargs_python36plus": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_set_index": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reset_index": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reset_index_keep_attrs": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reorder_levels": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_stack": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_unstack": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_unstack_errors": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_unstack_fill_value": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_unstack_sparse": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_fast": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_stack_unstack_slow": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_invalid_sample_dims": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_name": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_dtype_dims": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_stacked_array_to_unstacked_dataset_different_dimension": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_update": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_update_overwrite_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_update_auto_align": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_getitem": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_getitem_hashable": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_default_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_virtual_variables_time": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_same_name": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_virtual_variable_multiindex": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_time_season": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_slice_virtual_variable": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem_pandas": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem_auto_align": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem_dimension_override": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem_with_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem_align_new_indexes": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[str]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem_str_dtype[bytes]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_assign": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_assign_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_assign_attrs": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_assign_multiindex_level": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_merge_multiindex_level": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem_original_non_unique_index": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem_both_non_unique_index": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setitem_multiindex_level": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_delitem": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_squeeze": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_squeeze_drop": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_groupby": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_groupby_returns_new_type": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_groupby_iter": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_groupby_errors": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_groupby_reduce": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_groupby_math": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_groupby_math_virtual": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_groupby_nan": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_groupby_order": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_resample_and_first": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_resample_min_count": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_with_keep_attrs": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_resample_loffset": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_resample_by_mean_discarding_attrs": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_resample_by_last_discarding_attrs": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_resample_drop_nondim_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_resample_old_api": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_resample_ds_da_are_the_same": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_ds_resample_apply_func_args": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_array": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dataframe": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_sparse": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_empty_dataframe": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_multiindex": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_unsorted_levels": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_non_unique_columns": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_convert_dataframe_with_many_types_and_multiindex": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_time_dim": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_and_from_dict_with_nan_nat": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_to_dict_with_numpy_attrs": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_pickle": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_lazy_load": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dropna": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_fillna": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>0]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[<lambda>1]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[absolute]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_propagate_attrs[abs]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_where": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_where_other": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_where_drop": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_where_drop_empty": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_where_drop_no_indexes": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_mean_uint_dtype": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_bad_dim": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_cumsum_test_dims": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_non_numeric": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_strings": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_dtypes": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_keep_attrs": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_argmin": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_scalars": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_only_one_axis": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_no_axis": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_reduce_keepdims": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-True]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_quantile[0.25-False]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-True]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_quantile[q1-False]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-True]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_quantile[q2-False]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[True]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_quantile_skipna[False]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_rank": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_count": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_map": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_apply_pending_deprecated_map": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_number_math": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_unary_ops": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_array_math": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_dataset_math": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_math_auto_align": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_math_errors": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_transpose": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_ellipsis_transpose_different_ordered_vars": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_retains_period_index_on_transpose": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_simple": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1_label": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n1": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_n2": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_n_neg": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_dataset_diff_exception_label_str": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value0]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_shift[2]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_shift[2.0]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_shift[fill_value3]": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_roll_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_roll_no_coords": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_roll_coords_none": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_roll_multidim": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_real_and_imag": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_setattr_raises": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_filter_by_attrs": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_binary_op_propagate_indexes": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_binary_op_join_setting": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_full_like": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_combine_first": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_sortby": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_attribute_access": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_ipython_key_completion": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_polyfit_output": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_pad": "PASSED", "xarray/tests/test_dataset.py::TestDataset::test_astype_attrs": "PASSED", "xarray/tests/test_dataset.py::test_isin[test_elements0]": "PASSED", "xarray/tests/test_dataset.py::test_isin[test_elements1]": "PASSED", "xarray/tests/test_dataset.py::test_isin[test_elements2]": "PASSED", "xarray/tests/test_dataset.py::test_isin_dask[test_elements0]": "PASSED", "xarray/tests/test_dataset.py::test_isin_dask[test_elements1]": "PASSED", "xarray/tests/test_dataset.py::test_isin_dask[test_elements2]": "PASSED", "xarray/tests/test_dataset.py::test_isin_dataset": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords0]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords1]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords2]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords3]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords4]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords5]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords6]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords7]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords8]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords0-unaligned_coords9]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords0]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords1]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords2]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords3]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords4]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords5]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords6]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords7]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords8]": "PASSED", "xarray/tests/test_dataset.py::test_dataset_constructor_aligns_to_explicit_coords[coords1-unaligned_coords9]": "PASSED", "xarray/tests/test_dataset.py::test_error_message_on_set_supplied": "PASSED", "xarray/tests/test_dataset.py::test_constructor_raises_with_invalid_coords[unaligned_coords0]": "PASSED", "xarray/tests/test_dataset.py::test_dir_expected_attrs[None]": "PASSED", "xarray/tests/test_dataset.py::test_dir_non_string[None]": "PASSED", "xarray/tests/test_dataset.py::test_dir_unicode[None]": "PASSED", "xarray/tests/test_dataset.py::test_coarsen_absent_dims_error[1]": "PASSED", "xarray/tests/test_dataset.py::test_coarsen[1-trim-left-True]": "PASSED", "xarray/tests/test_dataset.py::test_coarsen[1-trim-left-False]": "PASSED", "xarray/tests/test_dataset.py::test_coarsen[1-pad-right-True]": "PASSED", "xarray/tests/test_dataset.py::test_coarsen[1-pad-right-False]": "PASSED", "xarray/tests/test_dataset.py::test_coarsen_coords[1-True]": "PASSED", "xarray/tests/test_dataset.py::test_coarsen_coords[1-False]": "PASSED", "xarray/tests/test_dataset.py::test_coarsen_coords_cftime": "PASSED", "xarray/tests/test_dataset.py::test_coarsen_keep_attrs": "PASSED", "xarray/tests/test_dataset.py::test_rolling_keep_attrs[reduce-argument0]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_keep_attrs[mean-argument1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_keep_attrs[construct-argument2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_keep_attrs[count-argument3]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_keep_attrs_deprecated": "PASSED", "xarray/tests/test_dataset.py::test_rolling_properties[1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-True-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-False-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-1-None-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-True-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-False-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z1-None-None-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-True-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-False-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-1-None-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-True-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-False-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-sum]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-mean]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-std]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-var]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-min]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-max]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_wrapped_bottleneck[1-z2-None-None-median]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_exp[1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_exp_keep_attrs[1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-None-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-1-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-2-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[1-3-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-None-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-1-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-2-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[2-3-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-None-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-1-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-2-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[3-3-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-None-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-1-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-2-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_pandas_compat[4-3-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_construct[1-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_construct[1-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_construct[2-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_construct[2-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_construct[3-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_construct[3-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_construct[4-True]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_construct[4-False]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-1-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-2-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-3-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[sum-4-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-1-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-2-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-3-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[mean-4-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-2-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-3-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[std-4-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-1-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-2-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-3-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[var-4-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-1-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-2-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-3-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[min-4-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-1-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-2-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-3-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[max-4-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-1-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-2-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-3-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-2-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-1]": "PASSED", "xarray/tests/test_dataset.py::test_rolling_reduce[median-4-3-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[True-sum-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[True-max-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[False-sum-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-None-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-True-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_reduce[False-max-1-False-2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-True]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-False]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[True-nan-center2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-True]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-False]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[True-0.0-center2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-True]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-False]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[False-nan-center2]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-True]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-False]": "PASSED", "xarray/tests/test_dataset.py::test_ndrolling_construct[False-0.0-center2]": "PASSED", "xarray/tests/test_dataset.py::test_raise_no_warning_for_nan_in_binary_ops": "PASSED", "xarray/tests/test_dataset.py::test_raise_no_warning_assert_close[2]": "PASSED", "xarray/tests/test_dataset.py::test_differentiate[1-True]": "PASSED", "xarray/tests/test_dataset.py::test_differentiate[1-False]": "PASSED", "xarray/tests/test_dataset.py::test_differentiate[2-True]": "PASSED", "xarray/tests/test_dataset.py::test_differentiate[2-False]": "PASSED", "xarray/tests/test_dataset.py::test_differentiate_datetime[True]": "PASSED", "xarray/tests/test_dataset.py::test_differentiate_datetime[False]": "PASSED", "xarray/tests/test_dataset.py::test_differentiate_cftime[True]": "PASSED", "xarray/tests/test_dataset.py::test_differentiate_cftime[False]": "PASSED", "xarray/tests/test_dataset.py::test_integrate[True]": "PASSED", "xarray/tests/test_dataset.py::test_integrate[False]": "PASSED", "xarray/tests/test_dataset.py::test_trapz_datetime[np-True]": "PASSED", "xarray/tests/test_dataset.py::test_trapz_datetime[np-False]": "PASSED", "xarray/tests/test_dataset.py::test_trapz_datetime[cftime-True]": "PASSED", "xarray/tests/test_dataset.py::test_trapz_datetime[cftime-False]": "PASSED", "xarray/tests/test_dataset.py::test_no_dict": "PASSED", "xarray/tests/test_dataset.py::test_subclass_slots": "PASSED", "xarray/tests/test_dataset.py::test_weakref": "PASSED", "xarray/tests/test_dataset.py::test_deepcopy_obj_array": "PASSED", "xarray/tests/test_interp.py::test_keywargs": "PASSED", "xarray/tests/test_interp.py::test_interpolate_1d[0-x-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_1d[0-x-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_1d[0-y-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_1d[0-y-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_1d[1-x-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_1d[1-x-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_1d[1-y-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_1d[1-y-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_1d_methods[cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_1d_methods[zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_vectorize[False]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_vectorize[True]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_nd[3]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_nd[4]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_nd_nd": "PASSED", "xarray/tests/test_interp.py::test_interpolate_nd_with_nan": "PASSED", "xarray/tests/test_interp.py::test_interpolate_scalar[0-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_scalar[1-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_nd_scalar[3-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_nd_scalar[4-linear]": "PASSED", "xarray/tests/test_interp.py::test_nans[True]": "PASSED", "xarray/tests/test_interp.py::test_nans[False]": "PASSED", "xarray/tests/test_interp.py::test_errors[True]": "PASSED", "xarray/tests/test_interp.py::test_errors[False]": "PASSED", "xarray/tests/test_interp.py::test_dtype": "PASSED", "xarray/tests/test_interp.py::test_sorted": "PASSED", "xarray/tests/test_interp.py::test_dimension_wo_coords": "PASSED", "xarray/tests/test_interp.py::test_dataset": "PASSED", "xarray/tests/test_interp.py::test_interpolate_dimorder[0]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_dimorder[3]": "PASSED", "xarray/tests/test_interp.py::test_interp_like": "PASSED", "xarray/tests/test_interp.py::test_datetime[x_new0-expected0]": "PASSED", "xarray/tests/test_interp.py::test_datetime[x_new1-expected1]": "PASSED", "xarray/tests/test_interp.py::test_datetime[x_new2-expected2]": "PASSED", "xarray/tests/test_interp.py::test_datetime[x_new3-expected3]": "PASSED", "xarray/tests/test_interp.py::test_datetime[x_new4-0.5]": "PASSED", "xarray/tests/test_interp.py::test_datetime_single_string": "PASSED", "xarray/tests/test_interp.py::test_cftime": "PASSED", "xarray/tests/test_interp.py::test_cftime_type_error": "PASSED", "xarray/tests/test_interp.py::test_cftime_list_of_strings": "PASSED", "xarray/tests/test_interp.py::test_cftime_single_string": "PASSED", "xarray/tests/test_interp.py::test_datetime_to_non_datetime_error": "PASSED", "xarray/tests/test_interp.py::test_cftime_to_non_cftime_error": "PASSED", "xarray/tests/test_interp.py::test_datetime_interp_noerror": "PASSED", "xarray/tests/test_interp.py::test_3641": "PASSED", "xarray/tests/test_interp.py::test_decompose[nearest]": "PASSED", "xarray/tests/test_interp.py::test_decompose[linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-0-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[1-1-1-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-0-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-1-1-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-0-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-1-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[2-2-2-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-0-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-1-1-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-0-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-1-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-2-2-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-0-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-1-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-2-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-True-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-nearest]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-zero]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-slinear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-quadratic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_1d[3-3-3-False-cubic]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_advanced[linear]": "PASSED", "xarray/tests/test_interp.py::test_interpolate_chunk_advanced[nearest]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_properties": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_attrs": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_dict": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_1d": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_1d_fancy": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_size_zero": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_nd_indexer": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_index_0d_int": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_index_0d_float": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_index_0d_string": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_index_0d_datetime": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_index_0d_timedelta64": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_index_0d_not_a_time": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_index_0d_object": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_0d_object_array_with_list": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_index_and_concat_datetime": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_0d_time_data": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_object_conversion": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_datetime64_valid_range": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pandas_data": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pandas_period_index": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_1d_math": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_1d_reduce": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_array_interface": "PASSED", "xarray/tests/test_variable.py::TestVariable::test___array__": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_equals_all_dtypes": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_eq_all_dtypes": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_encoding_preserved": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_concat": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_concat_attrs": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_concat_fixed_len_str": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_concat_number_strings": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_concat_mixed_dtypes": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy[float-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy[float-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy[int-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy[int-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy[str-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy[str-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy_index": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy_with_data": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy_with_data_errors": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_copy_index_with_data_errors": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_replace": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_real_and_imag": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_aggregate_complex": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pandas_cateogrical_dtype": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pandas_datetime64_with_tz": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_multiindex": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_load": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_advanced": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_uint_1d": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_uint": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_0d_array": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_fancy": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_error": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-mean]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-edge]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-maximum]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-minimum]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-symmetric]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg0-np_arg0-wrap]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-mean]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-edge]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-maximum]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-minimum]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-symmetric]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg1-np_arg1-wrap]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-mean]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-edge]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-maximum]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-minimum]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-symmetric]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg2-np_arg2-wrap]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-mean]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-edge]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-maximum]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-minimum]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-symmetric]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg3-np_arg3-wrap]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-mean]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-edge]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-maximum]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-minimum]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-symmetric]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad[xr_arg4-np_arg4-wrap]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg0-np_arg0]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg1-np_arg1]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg2-np_arg2]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg3-np_arg3]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_pad_constant_values[xr_arg4-np_arg4]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_rolling_window": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_data_and_values": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_numpy_same_methods": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_datetime64_conversion_scalar": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_timedelta64_conversion_scalar": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_0d_str": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_0d_datetime": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_0d_timedelta": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_equals_and_identical": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_broadcast_equals": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_no_conflicts": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_as_variable": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_repr": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_repr_lazy_data": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_detect_indexer_type": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_indexer_type": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_items": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_basic": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_getitem_with_mask_2d_input": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_isel": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_index_0d_numpy_string": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_indexing_0d_unicode": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_shift[fill_value0]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_shift[2]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_shift[2.0]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_shift2d": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_roll": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_roll_consistency": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_transpose": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_transpose_0d": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_squeeze": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_get_axis_num": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_set_dims": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_set_dims_object_dtype": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_stack": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_stack_errors": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_unstack": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_unstack_errors": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_unstack_2d": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_stack_unstack_consistency": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_broadcasting_math": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_broadcasting_failures": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_inplace_math": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_reduce": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-0.25-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q1-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[None-None-q2-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-0.25-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q1-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[0-x-q2-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-0.25-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q1-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis2-dim2-q2-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-0.25-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q1-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-True]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile[axis3-dim3-q2-False]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-0.25]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q1]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[1-y-q2]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-0.25]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q1]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_dask[axis1-dim1-q2]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_chunked_dim_error": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[-0.1]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[1.1]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q2]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_quantile_out_of_bounds[q3]": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_rank_dask_raises": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_rank": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_big_endian_reduce": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_reduce_funcs": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_reduce_keepdims_dask": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_reduce_keep_attrs": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_binary_ops_keep_attrs": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_count": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_setitem": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_setitem_fancy": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_coarsen": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_coarsen_2d": "PASSED", "xarray/tests/test_variable.py::TestVariable::test_coarsen_keep_attrs": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_properties": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_attrs": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_dict": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_size_zero": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_int": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_float": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_string": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_datetime": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_timedelta64": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_not_a_time": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_index_0d_object": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_index_and_concat_datetime": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_0d_time_data": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_conversion": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_timedelta64_conversion": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_object_conversion": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_datetime64_valid_range": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_data": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_period_index": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_1d_math": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_1d_reduce": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test___array__": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_equals_all_dtypes": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_encoding_preserved": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_concat": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_attrs": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_fixed_len_str": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_number_strings": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_concat_mixed_dtypes": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-True]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[float-False]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-True]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[int-False]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-True]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_copy[str-False]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_with_data_errors": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_copy_index_with_data_errors": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_replace": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_real_and_imag": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_aggregate_complex": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_cateogrical_dtype": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pandas_datetime64_with_tz": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_multiindex": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_load": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_advanced": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint_1d": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_uint": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_0d_array": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_error": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-mean]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-edge]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-maximum]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-minimum]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-symmetric]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg0-np_arg0-wrap]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-mean]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-edge]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-maximum]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-minimum]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-symmetric]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg1-np_arg1-wrap]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-mean]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-edge]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-maximum]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-minimum]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-symmetric]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg2-np_arg2-wrap]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-mean]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-edge]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-maximum]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-minimum]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-symmetric]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg3-np_arg3-wrap]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-mean]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-edge]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-maximum]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-minimum]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-symmetric]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad[xr_arg4-np_arg4-wrap]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg0-np_arg0]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg1-np_arg1]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg2-np_arg2]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg3-np_arg3]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_pad_constant_values[xr_arg4-np_arg4]": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_rolling_window": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_fancy": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_1d_fancy": "PASSED", "xarray/tests/test_variable.py::TestVariableWithDask::test_getitem_with_mask_nd_indexer": "PASSED", "xarray/tests/test_variable.py::TestVariableWithSparse::test_as_sparse": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_properties": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_attrs": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_dict": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_1d_fancy": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_size_zero": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_with_mask_nd_indexer": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_int": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_float": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_string": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_datetime": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_timedelta64": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_not_a_time": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_index_0d_object": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_0d_object_array_with_list": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_index_and_concat_datetime": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_0d_time_data": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_conversion": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_timedelta64_conversion": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_object_conversion": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_datetime64_valid_range": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_data": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_period_index": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_1d_math": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_1d_reduce": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_array_interface": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test___array__": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_equals_all_dtypes": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_eq_all_dtypes": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_encoding_preserved": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_concat": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_concat_attrs": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_concat_fixed_len_str": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_concat_number_strings": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_concat_mixed_dtypes": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-True]": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy[float-False]": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-True]": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy[int-False]": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-True]": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy[str-False]": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy_index": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy_with_data_errors": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_copy_index_with_data_errors": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_replace": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_real_and_imag": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_aggregate_complex": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_cateogrical_dtype": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_pandas_datetime64_with_tz": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_multiindex": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_load": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_uint_1d": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_getitem_0d_array": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_init": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_to_index": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_multiindex_default_level_names": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_data": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_name": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_level_names": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_get_level_variable": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_concat_periods": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_concat_multiindex": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[str]": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_concat_str_dtype[bytes]": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_coordinate_alias": "PASSED", "xarray/tests/test_variable.py::TestIndexVariable::test_datetime64": "PASSED", "xarray/tests/test_variable.py::TestAsCompatibleData::test_unchanged_types": "PASSED", "xarray/tests/test_variable.py::TestAsCompatibleData::test_converted_types": "PASSED", "xarray/tests/test_variable.py::TestAsCompatibleData::test_masked_array": "PASSED", "xarray/tests/test_variable.py::TestAsCompatibleData::test_datetime": "PASSED", "xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like": "PASSED", "xarray/tests/test_variable.py::TestAsCompatibleData::test_full_like_dask": "PASSED", "xarray/tests/test_variable.py::TestAsCompatibleData::test_zeros_like": "PASSED", "xarray/tests/test_variable.py::TestAsCompatibleData::test_ones_like": "PASSED", "xarray/tests/test_variable.py::TestAsCompatibleData::test_unsupported_type": "PASSED", "xarray/tests/test_variable.py::test_raise_no_warning_for_nan_in_binary_ops": "PASSED", "xarray/tests/test_variable.py::TestBackendIndexing::test_NumpyIndexingAdapter": "PASSED", "xarray/tests/test_variable.py::TestBackendIndexing::test_LazilyOuterIndexedArray": "PASSED", "xarray/tests/test_variable.py::TestBackendIndexing::test_CopyOnWriteArray": "PASSED", "xarray/tests/test_variable.py::TestBackendIndexing::test_MemoryCachedArray": "PASSED", "xarray/tests/test_variable.py::TestBackendIndexing::test_DaskIndexingAdapter": "PASSED", "[1]": "SKIPPED", "[16]": "SKIPPED", "xarray/tests/test_dask.py::test_persist_Dataset[<lambda>1]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_error": "FAILED", "xarray/tests/test_dask.py::test_map_blocks[obj0]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks[obj1]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_convert_args_to_list[obj0]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_convert_args_to_list[obj1]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_dask_args": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_add_attrs[obj0]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_add_attrs[obj1]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_change_name": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_kwargs[obj0]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_kwargs[obj1]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_to_array": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>0]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>1]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>2]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>3]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>4]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>5]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>6]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_da_transformations[<lambda>7]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>0]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>1]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>2]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>3]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>4]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>5]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>6]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_ds_transformations[<lambda>7]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_da_ds_with_template[obj0]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_da_ds_with_template[obj1]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_template_convert_object": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_errors_bad_template[obj0]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_errors_bad_template[obj1]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_errors_bad_template_2": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_object_method[obj0]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_object_method[obj1]": "FAILED", "xarray/tests/test_dask.py::test_map_blocks_hlg_layers": "FAILED", "xarray/tests/test_dataset.py::TestDataset::test_sel_categorical": "FAILED", "xarray/tests/test_dataset.py::TestDataset::test_sel_categorical_error": "FAILED", "xarray/tests/test_dataset.py::TestDataset::test_categorical_multiindex": "FAILED", "xarray/tests/test_dataset.py::TestDataset::test_from_dataframe_categorical": "FAILED", "xarray/tests/test_dataset.py::TestDataset::test_polyfit_warnings": "FAILED"}]