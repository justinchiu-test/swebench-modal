[{"repo": "pylint-dev/pylint", "instance_id": "pylint-dev__pylint-5859", "base_commit": "182cc539b8154c0710fcea7e522267e42eba8899", "patch": "diff --git a/pylint/checkers/misc.py b/pylint/checkers/misc.py\n--- a/pylint/checkers/misc.py\n+++ b/pylint/checkers/misc.py\n@@ -121,9 +121,9 @@ def open(self):\n \n         notes = \"|\".join(re.escape(note) for note in self.config.notes)\n         if self.config.notes_rgx:\n-            regex_string = rf\"#\\s*({notes}|{self.config.notes_rgx})\\b\"\n+            regex_string = rf\"#\\s*({notes}|{self.config.notes_rgx})(?=(:|\\s|\\Z))\"\n         else:\n-            regex_string = rf\"#\\s*({notes})\\b\"\n+            regex_string = rf\"#\\s*({notes})(?=(:|\\s|\\Z))\"\n \n         self._fixme_pattern = re.compile(regex_string, re.I)\n \n", "test_patch": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -68,6 +68,16 @@ def test_without_space_fixme(self) -> None:\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     @set_config(notes=[])\n     def test_absent_codetag(self) -> None:\n         code = \"\"\"a = 1\n", "problem_statement": "\"--notes\" option ignores note tags that are entirely punctuation\n### Bug description\n\nIf a note tag specified with the `--notes` option is entirely punctuation, pylint won't report a fixme warning (W0511).\r\n\r\n```python\r\n# YES: yes\r\n# ???: no\r\n```\r\n\r\n`pylint test.py --notes=\"YES,???\"` will return a fixme warning (W0511) for the first line, but not the second.\n\n### Configuration\n\n```ini\nDefault\n```\n\n\n### Command used\n\n```shell\npylint test.py --notes=\"YES,???\"\n```\n\n\n### Pylint output\n\n```shell\n************* Module test\r\ntest.py:1:1: W0511: YES: yes (fixme)\n```\n\n\n### Expected behavior\n\n```\r\n************* Module test\r\ntest.py:1:1: W0511: YES: yes (fixme)\r\ntest.py:2:1: W0511: ???: no (fixme)\r\n```\n\n### Pylint version\n\n```shell\npylint 2.12.2\r\nastroid 2.9.0\r\nPython 3.10.2 (main, Feb  2 2022, 05:51:25) [Clang 13.0.0 (clang-1300.0.29.3)]\n```\n\n\n### OS / Environment\n\nmacOS 11.6.1\n\n### Additional dependencies\n\n_No response_\n", "hints_text": "Did a little investigation, this is we're actually converting this option in a regular expression pattern (thereby making it awfully similar to the `notes-rgx` option). Since `?` is a special character in regex this doesn't get picked up. Using `\\?\\?\\?` in either `notes` or `notes-rgx` should work.", "created_at": "2022-03-04T00:01:54Z", "version": "2.13", "FAIL_TO_PASS": "[\"tests/checkers/unittest_misc.py::TestFixme::test_non_alphanumeric_codetag\"]", "PASS_TO_PASS": "[\"tests/checkers/unittest_misc.py::TestFixme::test_fixme_with_message\", \"tests/checkers/unittest_misc.py::TestFixme::test_todo_without_message\", \"tests/checkers/unittest_misc.py::TestFixme::test_xxx_without_space\", \"tests/checkers/unittest_misc.py::TestFixme::test_xxx_middle\", \"tests/checkers/unittest_misc.py::TestFixme::test_without_space_fixme\", \"tests/checkers/unittest_misc.py::TestFixme::test_absent_codetag\", \"tests/checkers/unittest_misc.py::TestFixme::test_other_present_codetag\", \"tests/checkers/unittest_misc.py::TestFixme::test_issue_2321_should_not_trigger\", \"tests/checkers/unittest_misc.py::TestFixme::test_issue_2321_should_trigger\", \"tests/checkers/unittest_misc.py::TestFixme::test_dont_trigger_on_todoist\"]", "environment_setup_commit": "3b2fbaec045697d53bdd4435e59dbfc2b286df4b"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   pylint/checkers/misc.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 182cc539b8154c0710fcea7e522267e42eba8899\nAuthor: Tim Martin <tim@asymptotic.co.uk>\nDate:   Wed Mar 2 21:58:26 2022 +0000\n\n    Use value directly instead of index in ``enumerate`` contexts (#5856)\n    \n    Refactoring to prevent warnings being issued on these lines from a new proposed\n    checker.\n\ndiff --git a/pylint/checkers/__init__.py b/pylint/checkers/__init__.py\nindex a79a38194..ab23b6b59 100644\n--- a/pylint/checkers/__init__.py\n+++ b/pylint/checkers/__init__.py\n@@ -124,8 +124,8 @@ def table_lines_from_stats(\n                 (\"error\", \"NC\"),\n             ]\n \n-    for index, _ in enumerate(new):\n-        new_value = new[index][1]\n+    for index, value in enumerate(new):\n+        new_value = value[1]\n         old_value = old[index][1]\n         diff_str = (\n             diff_string(old_value, new_value)\n@@ -134,7 +134,7 @@ def table_lines_from_stats(\n         )\n         new_str = f\"{new_value:.3f}\" if isinstance(new_value, float) else str(new_value)\n         old_str = f\"{old_value:.3f}\" if isinstance(old_value, float) else str(old_value)\n-        lines.extend((new[index][0].replace(\"_\", \" \"), new_str, old_str, diff_str))\n+        lines.extend((value[0].replace(\"_\", \" \"), new_str, old_str, diff_str))\n     return lines\n \n \ndiff --git a/pylint/checkers/refactoring/refactoring_checker.py b/pylint/checkers/refactoring/refactoring_checker.py\nindex 1bf75e77e..b727f1b63 100644\n--- a/pylint/checkers/refactoring/refactoring_checker.py\n+++ b/pylint/checkers/refactoring/refactoring_checker.py\n@@ -578,12 +578,12 @@ class RefactoringChecker(checkers.BaseTokenChecker):\n             token_string = token[1]\n             if token_string == \"elif\":\n                 # AST exists by the time process_tokens is called, so\n-                # it's safe to assume tokens[index+1]\n-                # exists. tokens[index+1][2] is the elif's position as\n+                # it's safe to assume tokens[index+1] exists.\n+                # tokens[index+1][2] is the elif's position as\n                 # reported by CPython and PyPy,\n-                # tokens[index][2] is the actual position and also is\n+                # token[2] is the actual position and also is\n                 # reported by IronPython.\n-                self._elifs.extend([tokens[index][2], tokens[index + 1][2]])\n+                self._elifs.extend([token[2], tokens[index + 1][2]])\n             elif _is_trailing_comma(tokens, index):\n                 if self.linter.is_message_enabled(\"trailing-comma-tuple\"):\n                     self.add_message(\"trailing-comma-tuple\", line=token.start[0])\ndiff --git a/pylint/checkers/misc.py b/pylint/checkers/misc.py\nindex 69149e61a..baec58fbb 100644\n--- a/pylint/checkers/misc.py\n+++ b/pylint/checkers/misc.py\n@@ -121,9 +121,9 @@ class EncodingChecker(BaseChecker):\n \n         notes = \"|\".join(re.escape(note) for note in self.config.notes)\n         if self.config.notes_rgx:\n-            regex_string = rf\"#\\s*({notes}|{self.config.notes_rgx})\\b\"\n+            regex_string = rf\"#\\s*({notes}|{self.config.notes_rgx})(?=(:|\\s|\\Z))\"\n         else:\n-            regex_string = rf\"#\\s*({notes})\\b\"\n+            regex_string = rf\"#\\s*({notes})(?=(:|\\s|\\Z))\"\n \n         self._fixme_pattern = re.compile(regex_string, re.I)\n \nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: dill>=0.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.13.0.dev0) (0.3.9)\nRequirement already satisfied: platformdirs>=2.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.13.0.dev0) (4.3.6)\nRequirement already satisfied: astroid<=2.10.0-dev0,>=2.9.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.13.0.dev0) (2.9.3)\nRequirement already satisfied: isort<6,>=4.2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.13.0.dev0) (5.10.1)\nRequirement already satisfied: mccabe<0.7,>=0.6 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.13.0.dev0) (0.6.1)\nRequirement already satisfied: toml>=0.9.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.13.0.dev0) (0.10.2)\nRequirement already satisfied: typing-extensions>=3.10.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pylint==2.13.0.dev0) (4.12.2)\nRequirement already satisfied: lazy-object-proxy>=1.4.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astroid<=2.10.0-dev0,>=2.9.2->pylint==2.13.0.dev0) (1.10.0)\nRequirement already satisfied: wrapt<1.14,>=1.11 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astroid<=2.10.0-dev0,>=2.9.2->pylint==2.13.0.dev0) (1.13.3)\nRequirement already satisfied: setuptools>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from astroid<=2.10.0-dev0,>=2.9.2->pylint==2.13.0.dev0) (75.1.0)\nInstalling collected packages: pylint\n  Attempting uninstall: pylint\n    Found existing installation: pylint 2.13.0.dev0\n    Uninstalling pylint-2.13.0.dev0:\n      Successfully uninstalled pylint-2.13.0.dev0\n  Running setup.py develop for pylint\nSuccessfully installed pylint\n============================= test session starts ==============================\nplatform linux -- Python 3.9.20, pytest-7.4.4, pluggy-1.5.0\nbenchmark: 3.4.1 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /testbed\nconfigfile: setup.cfg\nplugins: timeout-2.3.1, profiling-1.7.0, forked-1.6.0, cov-3.0.0, benchmark-3.4.1, xdist-2.5.0\ncollected 11 items\n\ntests/checkers/unittest_misc.py ...........                              [100%]\n\n=============================== warnings summary ===============================\n../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/astroid/interpreter/_import/util.py:7\n  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/astroid/interpreter/_import/util.py:7: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n    import pkg_resources\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n==================================== PASSES ====================================\n=========================== short test summary info ============================\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_fixme_with_message\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_todo_without_message\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_xxx_without_space\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_xxx_middle\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_without_space_fixme\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_non_alphanumeric_codetag\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_absent_codetag\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_other_present_codetag\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_issue_2321_should_not_trigger\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_issue_2321_should_trigger\nPASSED tests/checkers/unittest_misc.py::TestFixme::test_dont_trigger_on_todoist\n======================== 11 passed, 1 warning in 0.03s =========================\n", {"tests/checkers/unittest_misc.py::TestFixme::test_fixme_with_message": "PASSED", "tests/checkers/unittest_misc.py::TestFixme::test_todo_without_message": "PASSED", "tests/checkers/unittest_misc.py::TestFixme::test_xxx_without_space": "PASSED", "tests/checkers/unittest_misc.py::TestFixme::test_xxx_middle": "PASSED", "tests/checkers/unittest_misc.py::TestFixme::test_without_space_fixme": "PASSED", "tests/checkers/unittest_misc.py::TestFixme::test_non_alphanumeric_codetag": "PASSED", "tests/checkers/unittest_misc.py::TestFixme::test_absent_codetag": "PASSED", "tests/checkers/unittest_misc.py::TestFixme::test_other_present_codetag": "PASSED", "tests/checkers/unittest_misc.py::TestFixme::test_issue_2321_should_not_trigger": "PASSED", "tests/checkers/unittest_misc.py::TestFixme::test_issue_2321_should_trigger": "PASSED", "tests/checkers/unittest_misc.py::TestFixme::test_dont_trigger_on_todoist": "PASSED"}]