[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-20639", "base_commit": "eb926a1d0c1158bf43f01eaf673dc84416b5ebb1", "patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1902,12 +1902,12 @@ def _print_Mul(self, product):\n             return prettyForm.__mul__(*a)/prettyForm.__mul__(*b)\n \n     # A helper function for _print_Pow to print x**(1/n)\n-    def _print_nth_root(self, base, expt):\n+    def _print_nth_root(self, base, root):\n         bpretty = self._print(base)\n \n         # In very simple cases, use a single-char root sign\n         if (self._settings['use_unicode_sqrt_char'] and self._use_unicode\n-            and expt is S.Half and bpretty.height() == 1\n+            and root == 2 and bpretty.height() == 1\n             and (bpretty.width() == 1\n                  or (base.is_Integer and base.is_nonnegative))):\n             return prettyForm(*bpretty.left('\\N{SQUARE ROOT}'))\n@@ -1915,14 +1915,13 @@ def _print_nth_root(self, base, expt):\n         # Construct root sign, start with the \\/ shape\n         _zZ = xobj('/', 1)\n         rootsign = xobj('\\\\', 1) + _zZ\n-        # Make exponent number to put above it\n-        if isinstance(expt, Rational):\n-            exp = str(expt.q)\n-            if exp == '2':\n-                exp = ''\n-        else:\n-            exp = str(expt.args[0])\n-        exp = exp.ljust(2)\n+        # Constructing the number to put on root\n+        rpretty = self._print(root)\n+        # roots look bad if they are not a single line\n+        if rpretty.height() != 1:\n+            return self._print(base)**self._print(1/root)\n+        # If power is half, no number should appear on top of root sign\n+        exp = '' if root == 2 else str(rpretty).ljust(2)\n         if len(exp) > 2:\n             rootsign = ' '*(len(exp) - 2) + rootsign\n         # Stack the exponent\n@@ -1954,8 +1953,9 @@ def _print_Pow(self, power):\n             if e is S.NegativeOne:\n                 return prettyForm(\"1\")/self._print(b)\n             n, d = fraction(e)\n-            if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:\n-                return self._print_nth_root(b, e)\n+            if n is S.One and d.is_Atom and not e.is_Integer and (e.is_Rational or d.is_Symbol) \\\n+                    and self._settings['root_notation']:\n+                return self._print_nth_root(b, d)\n             if e.is_Rational and e < 0:\n                 return prettyForm(\"1\")/self._print(Pow(b, -e, evaluate=False))\n \n", "test_patch": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -5942,7 +5942,11 @@ def test_PrettyPoly():\n \n def test_issue_6285():\n     assert pretty(Pow(2, -5, evaluate=False)) == '1 \\n--\\n 5\\n2 '\n-    assert pretty(Pow(x, (1/pi))) == 'pi___\\n\\\\/ x '\n+    assert pretty(Pow(x, (1/pi))) == \\\n+    ' 1 \\n'\\\n+    ' --\\n'\\\n+    ' pi\\n'\\\n+    'x  '\n \n \n def test_issue_6359():\n@@ -7205,6 +7209,51 @@ def test_is_combining():\n         [False, True, False, False]\n \n \n+def test_issue_17616():\n+    assert pretty(pi**(1/exp(1))) == \\\n+   '  / -1\\\\\\n'\\\n+   '  \\e  /\\n'\\\n+   'pi     '\n+\n+    assert upretty(pi**(1/exp(1))) == \\\n+   ' \u239b -1\u239e\\n'\\\n+   ' \u239d\u212f  \u23a0\\n'\\\n+   '\u03c0     '\n+\n+    assert pretty(pi**(1/pi)) == \\\n+    '  1 \\n'\\\n+    '  --\\n'\\\n+    '  pi\\n'\\\n+    'pi  '\n+\n+    assert upretty(pi**(1/pi)) == \\\n+    ' 1\\n'\\\n+    ' \u2500\\n'\\\n+    ' \u03c0\\n'\\\n+    '\u03c0 '\n+\n+    assert pretty(pi**(1/EulerGamma)) == \\\n+    '      1     \\n'\\\n+    '  ----------\\n'\\\n+    '  EulerGamma\\n'\\\n+    'pi          '\n+\n+    assert upretty(pi**(1/EulerGamma)) == \\\n+    ' 1\\n'\\\n+    ' \u2500\\n'\\\n+    ' \u03b3\\n'\\\n+    '\u03c0 '\n+\n+    z = Symbol(\"x_17\")\n+    assert upretty(7**(1/z)) == \\\n+    'x\u2081\u2087___\\n'\\\n+    ' \u2572\u2571 7 '\n+\n+    assert pretty(7**(1/z)) == \\\n+    'x_17___\\n'\\\n+    '  \\\\/ 7 '\n+\n+\n def test_issue_17857():\n     assert pretty(Range(-oo, oo)) == '{..., -1, 0, 1, ...}'\n     assert pretty(Range(oo, -oo, -1)) == '{..., 1, 0, -1, ...}'\n", "problem_statement": "inaccurate rendering of pi**(1/E)\nThis claims to be version 1.5.dev; I just merged from the project master, so I hope this is current.  I didn't notice this bug among others in printing.pretty.\r\n\r\n```\r\nIn [52]: pi**(1/E)                                                               \r\nOut[52]: \r\n-1___\r\n\u2572\u2571 \u03c0 \r\n\r\n```\r\nLaTeX and str not fooled:\r\n```\r\nIn [53]: print(latex(pi**(1/E)))                                                 \r\n\\pi^{e^{-1}}\r\n\r\nIn [54]: str(pi**(1/E))                                                          \r\nOut[54]: 'pi**exp(-1)'\r\n```\r\n\n", "hints_text": "I can confirm this bug on master. Looks like it's been there a while\nhttps://github.com/sympy/sympy/blob/2d700c4b3c0871a26741456787b0555eed9d5546/sympy/printing/pretty/pretty.py#L1814\r\n\r\n`1/E` is `exp(-1)` which has totally different arg structure than something like `1/pi`:\r\n\r\n```\r\n>>> (1/E).args\r\n(-1,)\r\n>>> (1/pi).args\r\n(pi, -1)\r\n```\n@ethankward nice!  Also, the use of `str` there isn't correct:\r\n```\r\n>>> pprint(7**(1/(pi)))                                                                                                                                                          \r\npi___\r\n\u2572\u2571 7 \r\n\r\n>>> pprint(pi**(1/(pi)))                                                                                                                                                        \r\npi___\r\n\u2572\u2571 \u03c0 \r\n\r\n>>> pprint(pi**(1/(EulerGamma)))                                                                                                                                                \r\nEulerGamma___\r\n        \u2572\u2571 \u03c0 \r\n```\r\n(`pi` and `EulerGamma` were not pretty printed)\nI guess str is used because it's hard to put 2-D stuff in the corner of the radical like that. But I think it would be better to recursively call the pretty printer, and if it is multiline, or maybe even if it is a more complicated expression than just a single number or symbol name, then print it without the radical like\r\n\r\n```\r\n  1\r\n  \u2500\r\n  e\r\n\u03c0\r\n```\r\n\r\nor\r\n\r\n```\r\n \u239b -1\u239e\r\n \u239de  \u23a0\r\n\u03c0", "created_at": "2020-12-21T07:42:53Z", "version": "1.8", "FAIL_TO_PASS": "[\"test_issue_6285\", \"test_issue_17616\"]", "PASS_TO_PASS": "[\"test_pretty_ascii_str\", \"test_pretty_unicode_str\", \"test_upretty_greek\", \"test_upretty_multiindex\", \"test_upretty_sub_super\", \"test_upretty_subs_missing_in_24\", \"test_missing_in_2X_issue_9047\", \"test_upretty_modifiers\", \"test_pretty_Cycle\", \"test_pretty_Permutation\", \"test_pretty_basic\", \"test_negative_fractions\", \"test_issue_5524\", \"test_pretty_ordering\", \"test_EulerGamma\", \"test_GoldenRatio\", \"test_pretty_relational\", \"test_Assignment\", \"test_AugmentedAssignment\", \"test_pretty_rational\", \"test_pretty_functions\", \"test_pretty_sqrt\", \"test_pretty_sqrt_char_knob\", \"test_pretty_sqrt_longsymbol_no_sqrt_char\", \"test_pretty_KroneckerDelta\", \"test_pretty_product\", \"test_pretty_Lambda\", \"test_pretty_TransferFunction\", \"test_pretty_Series\", \"test_pretty_Parallel\", \"test_pretty_Feedback\", \"test_pretty_order\", \"test_pretty_derivatives\", \"test_pretty_integrals\", \"test_pretty_matrix\", \"test_pretty_ndim_arrays\", \"test_tensor_TensorProduct\", \"test_diffgeom_print_WedgeProduct\", \"test_Adjoint\", \"test_pretty_Trace_issue_9044\", \"test_MatrixSlice\", \"test_MatrixExpressions\", \"test_pretty_dotproduct\", \"test_pretty_piecewise\", \"test_pretty_ITE\", \"test_pretty_seq\", \"test_any_object_in_sequence\", \"test_print_builtin_set\", \"test_pretty_sets\", \"test_pretty_SetExpr\", \"test_pretty_ImageSet\", \"test_pretty_ConditionSet\", \"test_pretty_ComplexRegion\", \"test_pretty_Union_issue_10414\", \"test_pretty_Intersection_issue_10414\", \"test_ProductSet_exponent\", \"test_ProductSet_parenthesis\", \"test_ProductSet_prod_char_issue_10413\", \"test_pretty_sequences\", \"test_pretty_FourierSeries\", \"test_pretty_FormalPowerSeries\", \"test_pretty_limits\", \"test_pretty_ComplexRootOf\", \"test_pretty_RootSum\", \"test_GroebnerBasis\", \"test_pretty_UniversalSet\", \"test_pretty_Boolean\", \"test_pretty_Domain\", \"test_pretty_prec\", \"test_pprint\", \"test_pretty_class\", \"test_pretty_no_wrap_line\", \"test_settings\", \"test_pretty_sum\", \"test_units\", \"test_pretty_Subs\", \"test_gammas\", \"test_beta\", \"test_function_subclass_different_name\", \"test_SingularityFunction\", \"test_deltas\", \"test_hyper\", \"test_meijerg\", \"test_noncommutative\", \"test_pretty_special_functions\", \"test_pretty_geometry\", \"test_expint\", \"test_elliptic_functions\", \"test_RandomDomain\", \"test_PrettyPoly\", \"test_issue_6359\", \"test_issue_6739\", \"test_complicated_symbol_unchanged\", \"test_categories\", \"test_PrettyModules\", \"test_QuotientRing\", \"test_Homomorphism\", \"test_Tr\", \"test_pretty_Add\", \"test_issue_7179\", \"test_issue_7180\", \"test_pretty_Complement\", \"test_pretty_SymmetricDifference\", \"test_pretty_Contains\", \"test_issue_8292\", \"test_issue_4335\", \"test_issue_8344\", \"test_issue_6324\", \"test_issue_7927\", \"test_issue_6134\", \"test_issue_9877\", \"test_issue_13651\", \"test_pretty_primenu\", \"test_pretty_primeomega\", \"test_pretty_Mod\", \"test_issue_11801\", \"test_pretty_UnevaluatedExpr\", \"test_issue_10472\", \"test_MatrixElement_printing\", \"test_issue_12675\", \"test_MatrixSymbol_printing\", \"test_degree_printing\", \"test_vector_expr_pretty_printing\", \"test_pretty_print_tensor_expr\", \"test_pretty_print_tensor_partial_deriv\", \"test_issue_15560\", \"test_print_lerchphi\", \"test_issue_15583\", \"test_matrixSymbolBold\", \"test_center_accent\", \"test_imaginary_unit\", \"test_str_special_matrices\", \"test_pretty_misc_functions\", \"test_hadamard_power\", \"test_issue_17258\", \"test_is_combining\", \"test_issue_17857\", \"test_issue_18272\", \"test_Str\"]", "environment_setup_commit": "3ac1464b8840d5f8b618a654f9fbf09c452fe969"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   sympy/printing/pretty/pretty.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit eb926a1d0c1158bf43f01eaf673dc84416b5ebb1\nMerge: 2ffd68dce2 5480847f65\nAuthor: S.Y. Lee <sylee957@gmail.com>\nDate:   Sat Dec 19 02:39:22 2020 +0900\n\n    Merge pull request #20546 from Soumi7/Doc_Series\n    \n    Doc series\n\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex df7452ee87..fbe9edb632 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1902,12 +1902,12 @@ def _print_Mul(self, product):\n             return prettyForm.__mul__(*a)/prettyForm.__mul__(*b)\n \n     # A helper function for _print_Pow to print x**(1/n)\n-    def _print_nth_root(self, base, expt):\n+    def _print_nth_root(self, base, root):\n         bpretty = self._print(base)\n \n         # In very simple cases, use a single-char root sign\n         if (self._settings['use_unicode_sqrt_char'] and self._use_unicode\n-            and expt is S.Half and bpretty.height() == 1\n+            and root == 2 and bpretty.height() == 1\n             and (bpretty.width() == 1\n                  or (base.is_Integer and base.is_nonnegative))):\n             return prettyForm(*bpretty.left('\\N{SQUARE ROOT}'))\n@@ -1915,14 +1915,13 @@ def _print_nth_root(self, base, expt):\n         # Construct root sign, start with the \\/ shape\n         _zZ = xobj('/', 1)\n         rootsign = xobj('\\\\', 1) + _zZ\n-        # Make exponent number to put above it\n-        if isinstance(expt, Rational):\n-            exp = str(expt.q)\n-            if exp == '2':\n-                exp = ''\n-        else:\n-            exp = str(expt.args[0])\n-        exp = exp.ljust(2)\n+        # Constructing the number to put on root\n+        rpretty = self._print(root)\n+        # roots look bad if they are not a single line\n+        if rpretty.height() != 1:\n+            return self._print(base)**self._print(1/root)\n+        # If power is half, no number should appear on top of root sign\n+        exp = '' if root == 2 else str(rpretty).ljust(2)\n         if len(exp) > 2:\n             rootsign = ' '*(len(exp) - 2) + rootsign\n         # Stack the exponent\n@@ -1954,8 +1953,9 @@ def _print_Pow(self, power):\n             if e is S.NegativeOne:\n                 return prettyForm(\"1\")/self._print(b)\n             n, d = fraction(e)\n-            if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:\n-                return self._print_nth_root(b, e)\n+            if n is S.One and d.is_Atom and not e.is_Integer and (e.is_Rational or d.is_Symbol) \\\n+                    and self._settings['root_notation']:\n+                return self._print_nth_root(b, d)\n             if e.is_Rational and e < 0:\n                 return prettyForm(\"1\")/self._print(Pow(b, -e, evaluate=False))\n \nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.8.dev0) (1.3.0)\nInstalling collected packages: sympy\n  Attempting uninstall: sympy\n    Found existing installation: sympy 1.8.dev0\n    Uninstalling sympy-1.8.dev0:\n      Successfully uninstalled sympy-1.8.dev0\n  Running setup.py develop for sympy\nSuccessfully installed sympy\n============================= test process starts ==============================\nexecutable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]\narchitecture:       64-bit\ncache:              no\nground types:       python \nnumpy:              None\nrandom seed:        2154209\nhash randomization: off\n\nsympy/printing/pretty/tests/test_pretty.py[142] \ntest_pretty_ascii_str ok\ntest_pretty_unicode_str ok\ntest_upretty_greek ok\ntest_upretty_multiindex ok\ntest_upretty_sub_super ok\ntest_upretty_subs_missing_in_24 ok\ntest_missing_in_2X_issue_9047 ok\ntest_upretty_modifiers ok\ntest_pretty_Cycle ok\ntest_pretty_Permutation ok\ntest_pretty_basic ok\ntest_negative_fractions ok\ntest_issue_5524 ok\ntest_pretty_ordering ok\ntest_EulerGamma ok\ntest_GoldenRatio ok\ntest_pretty_relational ok\ntest_Assignment ok\ntest_AugmentedAssignment ok\ntest_pretty_rational ok\ntest_pretty_functions ok\ntest_pretty_sqrt ok\ntest_pretty_sqrt_char_knob ok\ntest_pretty_sqrt_longsymbol_no_sqrt_char ok\ntest_pretty_KroneckerDelta ok\ntest_pretty_product ok\ntest_pretty_Lambda ok\ntest_pretty_TransferFunction ok\ntest_pretty_Series ok\ntest_pretty_Parallel ok\ntest_pretty_Feedback ok\ntest_pretty_order ok\ntest_pretty_derivatives ok\ntest_pretty_integrals ok\ntest_pretty_matrix ok\ntest_pretty_ndim_arrays ok\ntest_tensor_TensorProduct ok\ntest_diffgeom_print_WedgeProduct ok\ntest_Adjoint ok\ntest_pretty_Trace_issue_9044 ok\ntest_MatrixSlice ok\ntest_MatrixExpressions ok\ntest_pretty_dotproduct ok\ntest_pretty_piecewise ok\ntest_pretty_ITE ok\ntest_pretty_seq ok\ntest_any_object_in_sequence ok\ntest_print_builtin_set ok\ntest_pretty_sets ok\ntest_pretty_SetExpr ok\ntest_pretty_ImageSet ok\ntest_pretty_ConditionSet ok\ntest_pretty_ComplexRegion ok\ntest_pretty_Union_issue_10414 ok\ntest_pretty_Intersection_issue_10414 ok\ntest_ProductSet_exponent ok\ntest_ProductSet_parenthesis ok\ntest_ProductSet_prod_char_issue_10413 ok\ntest_pretty_sequences ok\ntest_pretty_FourierSeries ok\ntest_pretty_FormalPowerSeries ok\ntest_pretty_limits ok\ntest_pretty_ComplexRootOf ok\ntest_pretty_RootSum ok\ntest_GroebnerBasis ok\ntest_pretty_UniversalSet ok\ntest_pretty_Boolean ok\ntest_pretty_Domain ok\ntest_pretty_prec ok\ntest_pprint ok\ntest_pretty_class ok\ntest_pretty_no_wrap_line ok\ntest_settings ok\ntest_pretty_sum ok\ntest_units ok\ntest_pretty_Subs ok\ntest_gammas ok\ntest_beta ok\ntest_function_subclass_different_name ok\ntest_SingularityFunction ok\ntest_deltas ok\ntest_hyper ok\ntest_meijerg ok\ntest_noncommutative ok\ntest_pretty_special_functions ok\ntest_pretty_geometry ok\ntest_expint ok\ntest_elliptic_functions ok\ntest_RandomDomain ok\ntest_PrettyPoly ok\ntest_issue_6285 ok\ntest_issue_6359 ok\ntest_issue_6739 ok\ntest_complicated_symbol_unchanged ok\ntest_categories ok\ntest_PrettyModules ok\ntest_QuotientRing ok\ntest_Homomorphism ok\ntest_Tr ok\ntest_pretty_Add ok\ntest_issue_7179 ok\ntest_issue_7180 ok\ntest_pretty_Complement ok\ntest_pretty_SymmetricDifference ok\ntest_pretty_Contains ok\ntest_issue_8292 ok\ntest_issue_4335 ok\ntest_issue_8344 ok\ntest_issue_6324 ok\ntest_issue_7927 ok\ntest_issue_6134 ok\ntest_issue_9877 ok\ntest_issue_13651 ok\ntest_pretty_primenu ok\ntest_pretty_primeomega ok\ntest_pretty_Mod ok\ntest_issue_11801 ok\ntest_pretty_UnevaluatedExpr ok\ntest_issue_10472 ok\ntest_MatrixElement_printing ok\ntest_issue_12675 ok\ntest_MatrixSymbol_printing ok\ntest_degree_printing ok\ntest_vector_expr_pretty_printing ok\ntest_pretty_print_tensor_expr ok\ntest_pretty_print_tensor_partial_deriv ok\ntest_issue_15560 ok\ntest_print_lerchphi ok\ntest_issue_15583 ok\ntest_matrixSymbolBold ok\ntest_center_accent ok\ntest_imaginary_unit ok\ntest_str_special_matrices ok\ntest_pretty_misc_functions ok\ntest_hadamard_power ok\ntest_issue_17258 ok\ntest_is_combining ok\ntest_issue_17616 ok\ntest_issue_17857 ok\ntest_issue_18272 ok\ntest_Str ok\ntest_diffgeom ok                                                            [OK]\n\n\n================= tests finished: 142 passed, in 4.04 seconds ==================\n", {"test_pretty_ascii_str": "PASSED", "test_pretty_unicode_str": "PASSED", "test_upretty_greek": "PASSED", "test_upretty_multiindex": "PASSED", "test_upretty_sub_super": "PASSED", "test_upretty_subs_missing_in_24": "PASSED", "test_missing_in_2X_issue_9047": "PASSED", "test_upretty_modifiers": "PASSED", "test_pretty_Cycle": "PASSED", "test_pretty_Permutation": "PASSED", "test_pretty_basic": "PASSED", "test_negative_fractions": "PASSED", "test_issue_5524": "PASSED", "test_pretty_ordering": "PASSED", "test_EulerGamma": "PASSED", "test_GoldenRatio": "PASSED", "test_pretty_relational": "PASSED", "test_Assignment": "PASSED", "test_AugmentedAssignment": "PASSED", "test_pretty_rational": "PASSED", "test_pretty_functions": "PASSED", "test_pretty_sqrt": "PASSED", "test_pretty_sqrt_char_knob": "PASSED", "test_pretty_sqrt_longsymbol_no_sqrt_char": "PASSED", "test_pretty_KroneckerDelta": "PASSED", "test_pretty_product": "PASSED", "test_pretty_Lambda": "PASSED", "test_pretty_TransferFunction": "PASSED", "test_pretty_Series": "PASSED", "test_pretty_Parallel": "PASSED", "test_pretty_Feedback": "PASSED", "test_pretty_order": "PASSED", "test_pretty_derivatives": "PASSED", "test_pretty_integrals": "PASSED", "test_pretty_matrix": "PASSED", "test_pretty_ndim_arrays": "PASSED", "test_tensor_TensorProduct": "PASSED", "test_diffgeom_print_WedgeProduct": "PASSED", "test_Adjoint": "PASSED", "test_pretty_Trace_issue_9044": "PASSED", "test_MatrixSlice": "PASSED", "test_MatrixExpressions": "PASSED", "test_pretty_dotproduct": "PASSED", "test_pretty_piecewise": "PASSED", "test_pretty_ITE": "PASSED", "test_pretty_seq": "PASSED", "test_any_object_in_sequence": "PASSED", "test_print_builtin_set": "PASSED", "test_pretty_sets": "PASSED", "test_pretty_SetExpr": "PASSED", "test_pretty_ImageSet": "PASSED", "test_pretty_ConditionSet": "PASSED", "test_pretty_ComplexRegion": "PASSED", "test_pretty_Union_issue_10414": "PASSED", "test_pretty_Intersection_issue_10414": "PASSED", "test_ProductSet_exponent": "PASSED", "test_ProductSet_parenthesis": "PASSED", "test_ProductSet_prod_char_issue_10413": "PASSED", "test_pretty_sequences": "PASSED", "test_pretty_FourierSeries": "PASSED", "test_pretty_FormalPowerSeries": "PASSED", "test_pretty_limits": "PASSED", "test_pretty_ComplexRootOf": "PASSED", "test_pretty_RootSum": "PASSED", "test_GroebnerBasis": "PASSED", "test_pretty_UniversalSet": "PASSED", "test_pretty_Boolean": "PASSED", "test_pretty_Domain": "PASSED", "test_pretty_prec": "PASSED", "test_pprint": "PASSED", "test_pretty_class": "PASSED", "test_pretty_no_wrap_line": "PASSED", "test_settings": "PASSED", "test_pretty_sum": "PASSED", "test_units": "PASSED", "test_pretty_Subs": "PASSED", "test_gammas": "PASSED", "test_beta": "PASSED", "test_function_subclass_different_name": "PASSED", "test_SingularityFunction": "PASSED", "test_deltas": "PASSED", "test_hyper": "PASSED", "test_meijerg": "PASSED", "test_noncommutative": "PASSED", "test_pretty_special_functions": "PASSED", "test_pretty_geometry": "PASSED", "test_expint": "PASSED", "test_elliptic_functions": "PASSED", "test_RandomDomain": "PASSED", "test_PrettyPoly": "PASSED", "test_issue_6285": "PASSED", "test_issue_6359": "PASSED", "test_issue_6739": "PASSED", "test_complicated_symbol_unchanged": "PASSED", "test_categories": "PASSED", "test_PrettyModules": "PASSED", "test_QuotientRing": "PASSED", "test_Homomorphism": "PASSED", "test_Tr": "PASSED", "test_pretty_Add": "PASSED", "test_issue_7179": "PASSED", "test_issue_7180": "PASSED", "test_pretty_Complement": "PASSED", "test_pretty_SymmetricDifference": "PASSED", "test_pretty_Contains": "PASSED", "test_issue_8292": "PASSED", "test_issue_4335": "PASSED", "test_issue_8344": "PASSED", "test_issue_6324": "PASSED", "test_issue_7927": "PASSED", "test_issue_6134": "PASSED", "test_issue_9877": "PASSED", "test_issue_13651": "PASSED", "test_pretty_primenu": "PASSED", "test_pretty_primeomega": "PASSED", "test_pretty_Mod": "PASSED", "test_issue_11801": "PASSED", "test_pretty_UnevaluatedExpr": "PASSED", "test_issue_10472": "PASSED", "test_MatrixElement_printing": "PASSED", "test_issue_12675": "PASSED", "test_MatrixSymbol_printing": "PASSED", "test_degree_printing": "PASSED", "test_vector_expr_pretty_printing": "PASSED", "test_pretty_print_tensor_expr": "PASSED", "test_pretty_print_tensor_partial_deriv": "PASSED", "test_issue_15560": "PASSED", "test_print_lerchphi": "PASSED", "test_issue_15583": "PASSED", "test_matrixSymbolBold": "PASSED", "test_center_accent": "PASSED", "test_imaginary_unit": "PASSED", "test_str_special_matrices": "PASSED", "test_pretty_misc_functions": "PASSED", "test_hadamard_power": "PASSED", "test_issue_17258": "PASSED", "test_is_combining": "PASSED", "test_issue_17616": "PASSED", "test_issue_17857": "PASSED", "test_issue_18272": "PASSED", "test_Str": "PASSED"}]