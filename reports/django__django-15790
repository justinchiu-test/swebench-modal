[{"repo": "django/django", "instance_id": "django__django-15790", "base_commit": "c627226d05dd52aef59447dcfb29cec2c2b11b8a", "patch": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -50,15 +50,15 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -66,7 +66,7 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(items)),\n                     ),\n                     id=E003.id,\n                 )\n", "test_patch": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -158,6 +158,19 @@ def test_template_tags_with_same_library_name(self):\n                 [self.error_same_tags],\n             )\n \n+    @override_settings(\n+        INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n+    )\n+    def test_template_tags_same_library_in_installed_apps_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n", "problem_statement": "check_for_template_tags_with_the_same_name with libraries in TEMPLATES\nDescription\n\t\nI didn't explore this thoroughly, but I think there might be an issue with the check_for_template_tags_with_the_same_name when you add a template tag library into TEMPLATES['OPTIONS']['librairies'].\nI'm getting an error like: \n(templates.E003) 'my_tags' is used for multiple template tag modules: 'someapp.templatetags.my_tags', 'someapp.templatetags.my_tags'\n", "hints_text": "Thanks for the report. It's a bug in the new system check (see 004b4620f6f4ad87261e149898940f2dcd5757ef and #32987).", "created_at": "2022-06-23T11:02:06Z", "version": "4.2", "FAIL_TO_PASS": "[\"test_template_tags_same_library_in_installed_apps_libraries (check_framework.test_templates.CheckTemplateTagLibrariesWithSameName)\"]", "PASS_TO_PASS": "[\"Error if template loaders are specified and APP_DIRS is True.\", \"test_app_dirs_removed (check_framework.test_templates.CheckTemplateSettingsAppDirsTest)\", \"test_loaders_removed (check_framework.test_templates.CheckTemplateSettingsAppDirsTest)\", \"test_string_if_invalid_both_are_strings (check_framework.test_templates.CheckTemplateStringIfInvalidTest)\", \"test_string_if_invalid_first_is_string (check_framework.test_templates.CheckTemplateStringIfInvalidTest)\", \"test_string_if_invalid_not_specified (check_framework.test_templates.CheckTemplateStringIfInvalidTest)\", \"test_string_if_invalid_not_string (check_framework.test_templates.CheckTemplateStringIfInvalidTest)\", \"test_template_tags_with_different_library_name (check_framework.test_templates.CheckTemplateTagLibrariesWithSameName)\", \"test_template_tags_with_different_name (check_framework.test_templates.CheckTemplateTagLibrariesWithSameName)\", \"test_template_tags_with_same_library_name (check_framework.test_templates.CheckTemplateTagLibrariesWithSameName)\", \"test_template_tags_with_same_library_name_and_module_name (check_framework.test_templates.CheckTemplateTagLibrariesWithSameName)\", \"test_template_tags_with_same_name (check_framework.test_templates.CheckTemplateTagLibrariesWithSameName)\"]", "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/core/checks/templates.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit c627226d05dd52aef59447dcfb29cec2c2b11b8a\nAuthor: DhruvaPatil98 <dhruvapatil98@gmail.com>\nDate:   Thu Jun 23 12:32:41 2022 +0530\n\n    Fixed #33799, Refs #31685 -- Added parameters for updating conflicts to QuerySeta.abulk_create().\n\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex a169d0c235..be0deb90b0 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -834,11 +834,22 @@ class QuerySet:\n \n         return objs\n \n-    async def abulk_create(self, objs, batch_size=None, ignore_conflicts=False):\n+    async def abulk_create(\n+        self,\n+        objs,\n+        batch_size=None,\n+        ignore_conflicts=False,\n+        update_conflicts=False,\n+        update_fields=None,\n+        unique_fields=None,\n+    ):\n         return await sync_to_async(self.bulk_create)(\n             objs=objs,\n             batch_size=batch_size,\n             ignore_conflicts=ignore_conflicts,\n+            update_conflicts=update_conflicts,\n+            update_fields=update_fields,\n+            unique_fields=unique_fields,\n         )\n \n     def bulk_update(self, objs, fields, batch_size=None):\ndiff --git a/tests/async_queryset/tests.py b/tests/async_queryset/tests.py\nindex 792797fb9d..1b6dddce1f 100644\n--- a/tests/async_queryset/tests.py\n+++ b/tests/async_queryset/tests.py\n@@ -6,7 +6,7 @@ from asgiref.sync import async_to_sync, sync_to_async\n \n from django.db import NotSupportedError, connection\n from django.db.models import Sum\n-from django.test import TestCase, skipUnlessDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import SimpleModel\n \n@@ -111,6 +111,22 @@ class AsyncQuerySetTest(TestCase):\n         qs = await SimpleModel.objects.abulk_create(instances)\n         self.assertEqual(len(qs), 10)\n \n+    @skipUnlessDBFeature(\"has_bulk_insert\", \"supports_update_conflicts\")\n+    @skipIfDBFeature(\"supports_update_conflicts_with_target\")\n+    @async_to_sync\n+    async def test_update_conflicts_unique_field_unsupported(self):\n+        msg = (\n+            \"This database backend does not support updating conflicts with specifying \"\n+            \"unique fields that can trigger the upsert.\"\n+        )\n+        with self.assertRaisesMessage(NotSupportedError, msg):\n+            await SimpleModel.objects.abulk_create(\n+                [SimpleModel(field=1), SimpleModel(field=2)],\n+                update_conflicts=True,\n+                update_fields=[\"field\"],\n+                unique_fields=[\"created\"],\n+            )\n+\n     async def test_abulk_update(self):\n         instances = SimpleModel.objects.all()\n         async for instance in instances:\ndiff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..692ec98203 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -50,15 +50,15 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -66,7 +66,7 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(items)),\n                     ),\n                     id=E003.id,\n                 )\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.5.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220623091235) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220623091235) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.5.2->Django==4.2.dev20220623091235) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.2.dev20220623091235-0.editable-py3-none-any.whl size=27102 sha256=8d1cf3139971ba98d046aef1b03dfa42ff8c68c03f978002e5c14547a7f6bd84\n  Stored in directory: /tmp/pip-ephem-wheel-cache-ioex44e5/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.2.dev20220623091235\n    Uninstalling Django-4.2.dev20220623091235:\n      Successfully uninstalled Django-4.2.dev20220623091235\nSuccessfully installed Django-4.2.dev20220623091235\nTesting against Django installed in '/testbed/django'\nImporting application check_framework\nFound 13 test(s).\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n", {}]