[{"repo": "django/django", "instance_id": "django__django-14787", "base_commit": "004b4620f6f4ad87261e149898940f2dcd5757ef", "patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -37,7 +37,7 @@ def _wrapper(self, *args, **kwargs):\n         # 'self' argument, but it's a closure over self so it can call\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = wraps(method)(partial(method.__get__(self, type(self))))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n", "test_patch": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -425,6 +425,29 @@ class Test:\n                 def __module__(cls):\n                     return \"tests\"\n \n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n \n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n", "problem_statement": "method_decorator() should preserve wrapper assignments\nDescription\n\t\nthe function that is passed to the decorator is a partial object and does not have any of the attributes expected from a function i.e. __name__, __module__ etc...\nconsider the following case\ndef logger(func):\n\t@wraps(func)\n\tdef inner(*args, **kwargs):\n\t\ttry:\n\t\t\tresult = func(*args, **kwargs)\n\t\texcept Exception as e:\n\t\t\tresult = str(e)\n\t\tfinally:\n\t\t\tlogger.debug(f\"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}\")\n\treturn inner\nclass Test:\n\t@method_decorator(logger)\n\tdef hello_world(self):\n\t\treturn \"hello\"\nTest().test_method()\nThis results in the following exception\nAttributeError: 'functools.partial' object has no attribute '__name__'\n", "hints_text": "", "created_at": "2021-08-23T12:59:59Z", "version": "4.1", "FAIL_TO_PASS": "[\"@method_decorator preserves wrapper assignments.\"]", "PASS_TO_PASS": "[\"test_cache_control_decorator_http_request (decorators.tests.CacheControlDecoratorTest)\", \"Ensures @xframe_options_deny properly sets the X-Frame-Options header.\", \"Ensures @xframe_options_exempt properly instructs the\", \"Ensures @xframe_options_sameorigin properly sets the X-Frame-Options\", \"Built-in decorators set certain attributes of the wrapped function.\", \"test_cache_page (decorators.tests.DecoratorsTest)\", \"Test for the require_safe decorator.\", \"The user_passes_test decorator can be applied multiple times (#9474).\", \"test_never_cache_decorator (decorators.tests.NeverCacheDecoratorTest)\", \"test_never_cache_decorator_http_request (decorators.tests.NeverCacheDecoratorTest)\", \"test_argumented (decorators.tests.MethodDecoratorTests)\", \"test_bad_iterable (decorators.tests.MethodDecoratorTests)\", \"@method_decorator can be used to decorate a class and its methods.\", \"test_descriptors (decorators.tests.MethodDecoratorTests)\", \"@method_decorator on a nonexistent method raises an error.\", \"@method_decorator on a non-callable attribute raises an error.\", \"A decorator that sets a new attribute on the method.\", \"test_preserve_attributes (decorators.tests.MethodDecoratorTests)\", \"test_preserve_signature (decorators.tests.MethodDecoratorTests)\", \"@method_decorator can accept a tuple of decorators.\"]", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9"}, "On branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   django/utils/decorators.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 004b4620f6f4ad87261e149898940f2dcd5757ef\nAuthor: Shreya Bamne <shreya.bamne@gmail.com>\nDate:   Tue Aug 3 15:20:49 2021 +0100\n\n    Fixed #32987 -- Added system check for template tag modules with the same name.\n    \n    Co-authored-by: Daniel Fairhead <daniel@dev.ngo>\n\ndiff --git a/AUTHORS b/AUTHORS\nindex 55e6579840..01adc8575a 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -223,6 +223,7 @@ answer newbie questions, and generally made Django that much better:\n     Daniel Alves Barbosa de Oliveira Vaz <danielvaz@gmail.com>\n     Daniel Duan <DaNmarner@gmail.com>\n     Daniele Procida <daniele@vurt.org>\n+    Daniel Fairhead <danthedeckie@gmail.com>\n     Daniel Greenfeld\n     dAniel hAhler\n     Daniel Jilg <daniel@breakthesystem.org>\n@@ -860,6 +861,7 @@ answer newbie questions, and generally made Django that much better:\n     Shai Berger <shai@platonix.com>\n     Shannon -jj Behrens <https://www.jjinux.com/>\n     Shawn Milochik <shawn@milochik.com>\n+    Shreya Bamne <shreya.bamne@gmail.com>\n     Silvan Spross <silvan.spross@gmail.com>\n     Simeon Visser <http://simeonvisser.com>\n     Simon Blanchard\ndiff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 8c4b7c172b..14325bd3e0 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -1,6 +1,8 @@\n import copy\n+from collections import defaultdict\n \n from django.conf import settings\n+from django.template.backends.django import get_template_tag_modules\n \n from . import Error, Tags, register\n \n@@ -13,6 +15,10 @@ E002 = Error(\n     \"'string_if_invalid' in TEMPLATES OPTIONS must be a string but got: {} ({}).\",\n     id=\"templates.E002\",\n )\n+E003 = Error(\n+    '{} is used for multiple template tag modules: {}',\n+    id='templates.E003',\n+)\n \n \n @register(Tags.templates)\n@@ -33,3 +39,29 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n             error.msg = error.msg.format(string_if_invalid, type(string_if_invalid).__name__)\n             errors.append(error)\n     return errors\n+\n+\n+@register(Tags.templates)\n+def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n+    errors = []\n+    libraries = defaultdict(list)\n+\n+    for conf in settings.TEMPLATES:\n+        custom_libraries = conf.get('OPTIONS', {}).get('libraries', {})\n+        for module_name, module_path in custom_libraries.items():\n+            libraries[module_name].append(module_path)\n+\n+    for module_name, module_path in get_template_tag_modules():\n+        libraries[module_name].append(module_path)\n+\n+    for library_name, items in libraries.items():\n+        if len(items) > 1:\n+            errors.append(Error(\n+                E003.msg.format(\n+                    repr(library_name),\n+                    ', '.join(repr(item) for item in items),\n+                ),\n+                id=E003.id,\n+            ))\n+\n+    return errors\ndiff --git a/docs/ref/checks.txt b/docs/ref/checks.txt\nindex 727d16b772..6c95b9376d 100644\n--- a/docs/ref/checks.txt\n+++ b/docs/ref/checks.txt\n@@ -541,6 +541,8 @@ configured:\n * **templates.E002**: ``string_if_invalid`` in :setting:`TEMPLATES`\n   :setting:`OPTIONS <TEMPLATES-OPTIONS>` must be a string but got: ``{value}``\n   (``{type}``).\n+* **templates.E003**:``<name>`` is used for multiple template tag modules:\n+  ``<module list>``.\n \n Translation\n -----------\ndiff --git a/tests/check_framework/template_test_apps/__init__.py b/tests/check_framework/template_test_apps/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/different_tags_app/__init__.py b/tests/check_framework/template_test_apps/different_tags_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/different_tags_app/apps.py b/tests/check_framework/template_test_apps/different_tags_app/apps.py\nnew file mode 100644\nindex 0000000000..90d54b3d50\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/different_tags_app/apps.py\n@@ -0,0 +1,5 @@\n+from django.apps import AppConfig\n+\n+\n+class DifferentTagsAppAppConfig(AppConfig):\n+    name = 'check_framework.template_test_apps.different_tags_app'\ndiff --git a/tests/check_framework/template_test_apps/different_tags_app/templatetags/__init__.py b/tests/check_framework/template_test_apps/different_tags_app/templatetags/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/different_tags_app/templatetags/different_tags.py b/tests/check_framework/template_test_apps/different_tags_app/templatetags/different_tags.py\nnew file mode 100644\nindex 0000000000..9bec93d8e5\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/different_tags_app/templatetags/different_tags.py\n@@ -0,0 +1,3 @@\n+from django.template import Library\n+\n+register = Library()\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_1/__init__.py b/tests/check_framework/template_test_apps/same_tags_app_1/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_1/apps.py b/tests/check_framework/template_test_apps/same_tags_app_1/apps.py\nnew file mode 100644\nindex 0000000000..44149177a0\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/same_tags_app_1/apps.py\n@@ -0,0 +1,5 @@\n+from django.apps import AppConfig\n+\n+\n+class SameTagsApp1AppConfig(AppConfig):\n+    name = 'check_framework.template_test_apps.same_tags_app_1'\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_1/templatetags/__init__.py b/tests/check_framework/template_test_apps/same_tags_app_1/templatetags/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_1/templatetags/same_tags.py b/tests/check_framework/template_test_apps/same_tags_app_1/templatetags/same_tags.py\nnew file mode 100644\nindex 0000000000..9bec93d8e5\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/same_tags_app_1/templatetags/same_tags.py\n@@ -0,0 +1,3 @@\n+from django.template import Library\n+\n+register = Library()\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_2/__init__.py b/tests/check_framework/template_test_apps/same_tags_app_2/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_2/apps.py b/tests/check_framework/template_test_apps/same_tags_app_2/apps.py\nnew file mode 100644\nindex 0000000000..d90c800d1f\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/same_tags_app_2/apps.py\n@@ -0,0 +1,5 @@\n+from django.apps import AppConfig\n+\n+\n+class SameTagsApp2AppConfig(AppConfig):\n+    name = 'check_framework.template_test_apps.same_tags_app_2'\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_2/templatetags/__init__.py b/tests/check_framework/template_test_apps/same_tags_app_2/templatetags/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/check_framework/template_test_apps/same_tags_app_2/templatetags/same_tags.py b/tests/check_framework/template_test_apps/same_tags_app_2/templatetags/same_tags.py\nnew file mode 100644\nindex 0000000000..9bec93d8e5\n--- /dev/null\n+++ b/tests/check_framework/template_test_apps/same_tags_app_2/templatetags/same_tags.py\n@@ -0,0 +1,3 @@\n+from django.template import Library\n+\n+register = Library()\ndiff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 955c863822..88c0479436 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -1,8 +1,9 @@\n from copy import copy, deepcopy\n \n+from django.core.checks import Error\n from django.core.checks.templates import (\n-    E001, E002, check_setting_app_dirs_loaders,\n-    check_string_if_invalid_is_string,\n+    E001, E002, E003, check_for_template_tags_with_the_same_name,\n+    check_setting_app_dirs_loaders, check_string_if_invalid_is_string,\n )\n from django.test import SimpleTestCase\n from django.test.utils import override_settings\n@@ -87,3 +88,85 @@ class CheckTemplateStringIfInvalidTest(SimpleTestCase):\n         del TEMPLATES[1]['OPTIONS']['string_if_invalid']\n         with self.settings(TEMPLATES=TEMPLATES):\n             self.assertEqual(check_string_if_invalid_is_string(None), [self.error1])\n+\n+\n+class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        cls.error_same_tags = Error(\n+            E003.msg.format(\n+                \"'same_tags'\",\n+                \"'check_framework.template_test_apps.same_tags_app_1.\"\n+                \"templatetags.same_tags', \"\n+                \"'check_framework.template_test_apps.same_tags_app_2.\"\n+                \"templatetags.same_tags'\",\n+            ),\n+            id=E003.id,\n+        )\n+\n+    @staticmethod\n+    def get_settings(module_name, module_path):\n+        return {\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'OPTIONS': {\n+                'libraries': {\n+                    module_name: f'check_framework.template_test_apps.{module_path}',\n+                },\n+            },\n+        }\n+\n+    @override_settings(INSTALLED_APPS=[\n+        'check_framework.template_test_apps.same_tags_app_1',\n+        'check_framework.template_test_apps.same_tags_app_2',\n+    ])\n+    def test_template_tags_with_same_name(self):\n+        self.assertEqual(\n+            check_for_template_tags_with_the_same_name(None),\n+            [self.error_same_tags],\n+        )\n+\n+    def test_template_tags_with_same_library_name(self):\n+        with self.settings(TEMPLATES=[\n+            self.get_settings('same_tags', 'same_tags_app_1.templatetags.same_tags'),\n+            self.get_settings('same_tags', 'same_tags_app_2.templatetags.same_tags'),\n+        ]):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [self.error_same_tags],\n+            )\n+\n+    @override_settings(INSTALLED_APPS=[\n+        'check_framework.template_test_apps.same_tags_app_1'\n+    ])\n+    def test_template_tags_with_same_library_name_and_module_name(self):\n+        with self.settings(TEMPLATES=[\n+            self.get_settings(\n+                'same_tags',\n+                'different_tags_app.templatetags.different_tags',\n+            ),\n+        ]):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [Error(\n+                E003.msg.format(\n+                    \"'same_tags'\",\n+                    \"'check_framework.template_test_apps.different_tags_app.\"\n+                    \"templatetags.different_tags', \"\n+                    \"'check_framework.template_test_apps.same_tags_app_1.\"\n+                    \"templatetags.same_tags'\",\n+                ),\n+                id=E003.id,\n+            )])\n+\n+    def test_template_tags_with_different_library_name(self):\n+        with self.settings(TEMPLATES=[\n+            self.get_settings('same_tags', 'same_tags_app_1.templatetags.same_tags'),\n+            self.get_settings('not_same_tags', 'same_tags_app_2.templatetags.same_tags'),\n+        ]):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n+    @override_settings(INSTALLED_APPS=[\n+        'check_framework.template_test_apps.same_tags_app_1',\n+        'check_framework.template_test_apps.different_tags_app',\n+    ])\n+    def test_template_tags_with_different_name(self):\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\ndiff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..69aca10a4d 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -37,7 +37,7 @@ def _multi_decorate(decorators, method):\n         # 'self' argument, but it's a closure over self so it can call\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = wraps(method)(partial(method.__get__(self, type(self))))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20211020091547) (3.8.1)\nRequirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20211020091547) (0.5.1)\nRequirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.3.2->Django==4.1.dev20211020091547) (4.12.2)\nBuilding wheels for collected packages: Django\n  Building editable for Django (pyproject.toml): started\n  Building editable for Django (pyproject.toml): finished with status 'done'\n  Created wheel for Django: filename=Django-4.1.dev20211020091547-0.editable-py3-none-any.whl size=26777 sha256=468e1485bd8551956820d43f210f9c2b0b2b0f1a806d1e016430b8787ddfc998\n  Stored in directory: /tmp/pip-ephem-wheel-cache-04x4r34t/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built Django\nInstalling collected packages: Django\n  Attempting uninstall: Django\n    Found existing installation: Django 4.1.dev20211020091547\n    Uninstalling Django-4.1.dev20211020091547:\n      Successfully uninstalled Django-4.1.dev20211020091547\nSuccessfully installed Django-4.1.dev20211020091547\nTesting against Django installed in '/testbed/django'\nImporting application decorators\nFound 21 test(s).\nSkipping setup of unused database(s): default, other.\nSystem check identified no issues (0 silenced).\n", {}]