[{"repo": "mwaskom/seaborn", "instance_id": "mwaskom__seaborn-2848", "base_commit": "94621cef29f80282436d73e8d2c0aa76dab81273", "patch": "diff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py\n--- a/seaborn/_oldcore.py\n+++ b/seaborn/_oldcore.py\n@@ -149,6 +149,13 @@ def _lookup_single(self, key):\n             # Use a value that's in the original data vector\n             value = self.lookup_table[key]\n         except KeyError:\n+\n+            if self.norm is None:\n+                # Currently we only get here in scatterplot with hue_order,\n+                # because scatterplot does not consider hue a grouping variable\n+                # So unused hue levels are in the data, but not the lookup table\n+                return (0, 0, 0, 0)\n+\n             # Use the colormap to interpolate between existing datapoints\n             # (e.g. in the context of making a continuous legend)\n             try:\n", "test_patch": "diff --git a/tests/test_relational.py b/tests/test_relational.py\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -9,6 +9,7 @@\n \n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n+from seaborn._oldcore import categorical_order\n \n from seaborn.relational import (\n     _RelationalPlotter,\n@@ -1623,6 +1624,16 @@ def test_supplied_color_array(self, long_df):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n+    def test_hue_order(self, long_df):\n+\n+        order = categorical_order(long_df[\"a\"])\n+        unused = order.pop()\n+\n+        ax = scatterplot(data=long_df, x=\"x\", y=\"y\", hue=\"a\", hue_order=order)\n+        points = ax.collections[0]\n+        assert (points.get_facecolors()[long_df[\"a\"] == unused] == 0).all()\n+        assert [t.get_text() for t in ax.legend_.texts] == order\n+\n     def test_linewidths(self, long_df):\n \n         f, ax = plt.subplots()\n", "problem_statement": "PairGrid errors with `hue` assigned in `map`\nIn seaborn version 0.9.0 I was able to use the following Code to plot scatterplots across a PairGrid with categorical hue. The reason I am not using the \"hue\" keyword in creating the PairGrid is, that I want one regression line (with regplot) and not one regression per hue-category.\r\n```python\r\nimport seaborn as sns\r\niris = sns.load_dataset(\"iris\")\r\ng = sns.PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"petal_width\"])\r\ng.map(sns.scatterplot, hue=iris[\"species\"])\r\ng.map(sns.regplot, scatter=False)\r\n```\r\n\r\nHowever, since I updated to searbon 0.11.1 the following Error message occurs:\r\n```\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/_core.py in _lookup_single(self, key)\r\n    143             # Use a value that's in the original data vector\r\n--> 144             value = self.lookup_table[key]\r\n    145         except KeyError:\r\n\r\nKeyError: 'setosa'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/_core.py in _lookup_single(self, key)\r\n    148             try:\r\n--> 149                 normed = self.norm(key)\r\n    150             except TypeError as err:\r\n\r\nTypeError: 'NoneType' object is not callable\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-3-46dd21e9c95a> in <module>\r\n      2 iris = sns.load_dataset(\"iris\")\r\n      3 g = sns.PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"species\"])\r\n----> 4 g.map(sns.scatterplot, hue=iris[\"species\"])\r\n      5 \r\n\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/axisgrid.py in map(self, func, **kwargs)\r\n   1263         row_indices, col_indices = np.indices(self.axes.shape)\r\n   1264         indices = zip(row_indices.flat, col_indices.flat)\r\n-> 1265         self._map_bivariate(func, indices, **kwargs)\r\n   1266 \r\n   1267         return self\r\n\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/axisgrid.py in _map_bivariate(self, func, indices, **kwargs)\r\n   1463             if ax is None:  # i.e. we are in corner mode\r\n   1464                 continue\r\n-> 1465             self._plot_bivariate(x_var, y_var, ax, func, **kws)\r\n   1466         self._add_axis_labels()\r\n   1467 \r\n\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/axisgrid.py in _plot_bivariate(self, x_var, y_var, ax, func, **kwargs)\r\n   1503         kwargs.setdefault(\"hue_order\", self._hue_order)\r\n   1504         kwargs.setdefault(\"palette\", self._orig_palette)\r\n-> 1505         func(x=x, y=y, **kwargs)\r\n   1506 \r\n   1507         self._update_legend_data(ax)\r\n\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/_decorators.py in inner_f(*args, **kwargs)\r\n     44             )\r\n     45         kwargs.update({k: arg for k, arg in zip(sig.parameters, args)})\r\n---> 46         return f(**kwargs)\r\n     47     return inner_f\r\n     48 \r\n\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/relational.py in scatterplot(x, y, hue, style, size, data, palette, hue_order, hue_norm, sizes, size_order, size_norm, markers, style_order, x_bins, y_bins, units, estimator, ci, n_boot, alpha, x_jitter, y_jitter, legend, ax, **kwargs)\r\n    818     p._attach(ax)\r\n    819 \r\n--> 820     p.plot(ax, kwargs)\r\n    821 \r\n    822     return ax\r\n\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/relational.py in plot(self, ax, kws)\r\n    626         # Apply the mapping from semantic variables to artist attributes\r\n    627         if \"hue\" in self.variables:\r\n--> 628             c = self._hue_map(data[\"hue\"])\r\n    629 \r\n    630         if \"size\" in self.variables:\r\n\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/_core.py in __call__(self, key, *args, **kwargs)\r\n     61         \"\"\"Get the attribute(s) values for the data key.\"\"\"\r\n     62         if isinstance(key, (list, np.ndarray, pd.Series)):\r\n---> 63             return [self._lookup_single(k, *args, **kwargs) for k in key]\r\n     64         else:\r\n     65             return self._lookup_single(key, *args, **kwargs)\r\n\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/_core.py in <listcomp>(.0)\r\n     61         \"\"\"Get the attribute(s) values for the data key.\"\"\"\r\n     62         if isinstance(key, (list, np.ndarray, pd.Series)):\r\n---> 63             return [self._lookup_single(k, *args, **kwargs) for k in key]\r\n     64         else:\r\n     65             return self._lookup_single(key, *args, **kwargs)\r\n\r\n~/.Software/miniforge3/envs/py3.9/lib/python3.8/site-packages/seaborn/_core.py in _lookup_single(self, key)\r\n    149                 normed = self.norm(key)\r\n    150             except TypeError as err:\r\n--> 151                 if np.isnan(key):\r\n    152                     value = (0, 0, 0, 0)\r\n    153                 else:\r\n\r\nTypeError: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n```\r\n\r\nMy further observations are:\r\n- the error does not occur when using the \"hue\" keyword when creating PairGrid\r\n- the error does not occur for numerical values for hue\r\n- changing the dtype to \"categorical\" does not help\r\n\r\nEdit:\r\nI tried all versions between 0.9.0 and the current release (0.11.1) and the error only occurs in the current release. If I use 0.11.0, the plot seems to work.\n", "hints_text": "The following workarounds seem to work:\r\n```\r\ng.map(sns.scatterplot, hue=iris[\"species\"], hue_order=iris[\"species\"].unique())\r\n```\r\nor\r\n```\r\ng.map(lambda x, y, **kwargs: sns.scatterplot(x=x, y=y, hue=iris[\"species\"]))\r\n```\n> ```\r\n> g.map(sns.scatterplot, hue=iris[\"species\"], hue_order=iris[\"species\"].unique())\r\n> ```\r\n\r\nThe workaround fixes the problem for me.\r\nThank you very much!\r\n\r\n@mwaskom Should I close the Issue or leave it open until the bug is fixed?\nThat's a good workaround, but it's still a bug. The problem is that `PairGrid` now lets `hue` at the grid-level delegate to the axes-level functions if they have `hue` in their signature. But it's not properly handling the case where `hue` is *not* set for the grid, but *is* specified for one mapped function. @jhncls's workaround suggests the fix.\r\n\r\nAn easier workaround would have been to set `PairGrid(..., hue=\"species\")` and then pass `.map(..., hue=None)` where you don't want to separate by species. But `regplot` is the one axis-level function that does not yet handle hue-mapping internally, so it doesn't work for this specific case. It would have if you wanted a single bivariate density over hue-mapped scatterplot points (i.e. [this example](http://seaborn.pydata.org/introduction.html#classes-and-functions-for-making-complex-graphics) or something similar.", "created_at": "2022-06-11T18:21:32Z", "version": "0.12", "FAIL_TO_PASS": "[\"tests/test_relational.py::TestScatterPlotter::test_hue_order\"]", "PASS_TO_PASS": "[\"tests/test_relational.py::TestRelationalPlotter::test_wide_df_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_wide_df_with_nonnumeric_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_wide_array_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_flat_array_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_flat_list_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_flat_series_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_series_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_arrays_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_list_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_series_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_arrays_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_lists_variables\", \"tests/test_relational.py::TestRelationalPlotter::test_relplot_complex\", \"tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[series]\", \"tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[numpy]\", \"tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[list]\", \"tests/test_relational.py::TestRelationalPlotter::test_relplot_wide\", \"tests/test_relational.py::TestRelationalPlotter::test_relplot_hues\", \"tests/test_relational.py::TestRelationalPlotter::test_relplot_sizes\", \"tests/test_relational.py::TestRelationalPlotter::test_relplot_styles\", \"tests/test_relational.py::TestRelationalPlotter::test_relplot_stringy_numerics\", \"tests/test_relational.py::TestRelationalPlotter::test_relplot_data\", \"tests/test_relational.py::TestRelationalPlotter::test_facet_variable_collision\", \"tests/test_relational.py::TestRelationalPlotter::test_ax_kwarg_removal\", \"tests/test_relational.py::TestLinePlotter::test_legend_data\", \"tests/test_relational.py::TestLinePlotter::test_plot\", \"tests/test_relational.py::TestLinePlotter::test_axis_labels\", \"tests/test_relational.py::TestScatterPlotter::test_color\", \"tests/test_relational.py::TestScatterPlotter::test_legend_data\", \"tests/test_relational.py::TestScatterPlotter::test_plot\", \"tests/test_relational.py::TestScatterPlotter::test_axis_labels\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_axes\", \"tests/test_relational.py::TestScatterPlotter::test_literal_attribute_vectors\", \"tests/test_relational.py::TestScatterPlotter::test_supplied_color_array\", \"tests/test_relational.py::TestScatterPlotter::test_linewidths\", \"tests/test_relational.py::TestScatterPlotter::test_size_norm_extrapolation\", \"tests/test_relational.py::TestScatterPlotter::test_datetime_scale\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics0]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics1]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics2]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics3]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics4]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics5]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics6]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics7]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics8]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics9]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics10]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics11]\", \"tests/test_relational.py::TestScatterPlotter::test_scatterplot_smoke\"]", "environment_setup_commit": "d25872b0fc99dbf7e666a91f59bd4ed125186aa1"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   seaborn/_oldcore.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 94621cef29f80282436d73e8d2c0aa76dab81273\nAuthor: Michael Waskom <mwaskom@users.noreply.github.com>\nDate:   Sat Jun 11 14:04:50 2022 -0400\n\n    Fix PairGrid with hue passed in map method (#2847)\n\ndiff --git a/doc/releases/v0.12.0.txt b/doc/releases/v0.12.0.txt\nindex c2e006a4..82881a3b 100644\n--- a/doc/releases/v0.12.0.txt\n+++ b/doc/releases/v0.12.0.txt\n@@ -59,6 +59,8 @@ Other updates\n \n - |Fix| Fixed a bug in :func:`violinplot` where inner boxes/points could be missing with unpaired split violins (:pr:`2814`).\n \n+- |Fix| Fixed a bug in :class:`PairGrid` where and error would be raised when defining `hue` only in the mapping methods (:pr:`2847`).\n+\n - |Fix| Subplot titles will no longer be reset when calling :meth:`FacetGrid.map` or :meth:`FacetGrid.map_dataframe` (:pr:`2705`).\n \n - |Fix| In :func:`lineplot`, allowed the `dashes` keyword to set the style of a line without mapping a `style` variable (:pr:`2449`).\ndiff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 7e513f03..8526f44b 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1565,9 +1565,10 @@ class PairGrid(Grid):\n         else:\n             hue = data.get(self._hue_var)\n \n-        kwargs.setdefault(\"hue\", hue)\n-        kwargs.setdefault(\"hue_order\", self._hue_order)\n-        kwargs.setdefault(\"palette\", self._orig_palette)\n+        if \"hue\" not in kwargs:\n+            kwargs.update({\n+                \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n+            })\n         func(x=x, y=y, **kwargs)\n \n         self._update_legend_data(ax)\ndiff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex 906aab0d..40d591f1 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -1170,6 +1170,14 @@ class TestPairGrid:\n \n         plt.close(\"all\")\n \n+    def test_hue_in_map(self, long_df):\n+\n+        g = ag.PairGrid(long_df, vars=[\"x\", \"y\"])\n+        g.map(scatterplot, hue=long_df[\"a\"])\n+        ax = g.axes.flat[0]\n+        points = ax.collections[0]\n+        assert len(set(map(tuple, points.get_facecolors()))) == 3\n+\n     def test_nondefault_index(self):\n \n         df = self.df.copy().set_index(\"b\")\ndiff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py\nindex c9218c1f..8821a5de 100644\n--- a/seaborn/_oldcore.py\n+++ b/seaborn/_oldcore.py\n@@ -149,6 +149,13 @@ class HueMapping(SemanticMapping):\n             # Use a value that's in the original data vector\n             value = self.lookup_table[key]\n         except KeyError:\n+\n+            if self.norm is None:\n+                # Currently we only get here in scatterplot with hue_order,\n+                # because scatterplot does not consider hue a grouping variable\n+                # So unused hue levels are in the data, but not the lookup table\n+                return (0, 0, 0, 0)\n+\n             # Use the colormap to interpolate between existing datapoints\n             # (e.g. in the context of making a continuous legend)\n             try:\nObtaining file:///testbed\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: numpy>=1.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.0.dev0) (1.25.2)\nRequirement already satisfied: pandas>=0.25 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.0.dev0) (2.0.0)\nRequirement already satisfied: matplotlib>=3.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.12.0.dev0) (3.7.2)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib>=3.1->seaborn==0.12.0.dev0) (1.1.0)\nRequirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib>=3.1->seaborn==0.12.0.dev0) (0.11.0)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib>=3.1->seaborn==0.12.0.dev0) (4.42.1)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib>=3.1->seaborn==0.12.0.dev0) (1.4.5)\nRequirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib>=3.1->seaborn==0.12.0.dev0) (23.1)\nRequirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib>=3.1->seaborn==0.12.0.dev0) (10.0.0)\nRequirement already satisfied: pyparsing<3.1,>=2.3.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib>=3.1->seaborn==0.12.0.dev0) (3.0.9)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib>=3.1->seaborn==0.12.0.dev0) (2.8.2)\nRequirement already satisfied: importlib-resources>=3.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib>=3.1->seaborn==0.12.0.dev0) (6.0.1)\nRequirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas>=0.25->seaborn==0.12.0.dev0) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas>=0.25->seaborn==0.12.0.dev0) (2023.1)\nRequirement already satisfied: zipp>=3.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from importlib-resources>=3.2.0->matplotlib>=3.1->seaborn==0.12.0.dev0) (3.16.2)\nRequirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib>=3.1->seaborn==0.12.0.dev0) (1.16.0)\nInstalling collected packages: seaborn\n  Attempting uninstall: seaborn\n    Found existing installation: seaborn 0.12.0.dev0\n    Uninstalling seaborn-0.12.0.dev0:\n      Successfully uninstalled seaborn-0.12.0.dev0\n  Running setup.py develop for seaborn\nSuccessfully installed seaborn\n============================= test session starts ==============================\ncollected 73 items\n\ntests/test_relational.py ............F.........F...F..F.FFFFFFFFFFFFFFFF [ 64%]\nF...........F.............                                               [100%]\n\n=================================== FAILURES ===================================\n__________________ TestRelationalPlotter.test_relplot_simple ___________________\n\nself = <tests.test_relational.TestRelationalPlotter object at 0x7f78bc161100>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\n\n    def test_relplot_simple(self, long_df):\n    \n        g = relplot(data=long_df, x=\"x\", y=\"y\", kind=\"scatter\")\n        x, y = g.ax.collections[0].get_offsets().T\n        assert_array_equal(x, long_df[\"x\"])\n        assert_array_equal(y, long_df[\"y\"])\n    \n>       g = relplot(data=long_df, x=\"x\", y=\"y\", kind=\"line\")\n\ntests/test_relational.py:453: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:976: in relplot\n    g.map_dataframe(func, **plot_kws)\nseaborn/axisgrid.py:773: in map_dataframe\n    self._facet_plot(func, ax, args, kwargs)\nseaborn/axisgrid.py:802: in _facet_plot\n    func(*plot_args, **plot_kwargs)\nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________________ TestRelationalPlotter.test_relplot_legend ___________________\n\nself = <tests.test_relational.TestRelationalPlotter object at 0x7f78bc182d60>\nlong_df =      x         y         z  a  b  c  ...  s    f  a_cat  s_cat s_str a_like_b\n0   12  0.449243  6.611886  b  p  0  ......8     8        n\n99  15  0.073484  1.036343  c  p  0  ...  8  0.2      c      8     8        o\n\n[100 rows x 14 columns]\n\n    def test_relplot_legend(self, long_df):\n    \n        g = relplot(data=long_df, x=\"x\", y=\"y\")\n        assert g._legend is None\n    \n        g = relplot(data=long_df, x=\"x\", y=\"y\", hue=\"a\")\n        texts = [t.get_text() for t in g._legend.texts]\n        expected_texts = long_df[\"a\"].unique()\n        assert_array_equal(texts, expected_texts)\n    \n        g = relplot(data=long_df, x=\"x\", y=\"y\", hue=\"s\", size=\"s\")\n        texts = [t.get_text() for t in g._legend.texts]\n        assert_array_equal(texts, np.sort(texts))\n    \n        g = relplot(data=long_df, x=\"x\", y=\"y\", hue=\"a\", legend=False)\n        assert g._legend is None\n    \n        palette = color_palette(\"deep\", len(long_df[\"b\"].unique()))\n        a_like_b = dict(zip(long_df[\"a\"].unique(), long_df[\"b\"].unique()))\n        long_df[\"a_like_b\"] = long_df[\"a\"].map(a_like_b)\n>       g = relplot(\n            data=long_df,\n            x=\"x\", y=\"y\", hue=\"b\", style=\"a_like_b\",\n            palette=palette, kind=\"line\", estimator=None,\n        )\n\ntests/test_relational.py:615: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:976: in relplot\n    g.map_dataframe(func, **plot_kws)\nseaborn/axisgrid.py:773: in map_dataframe\n    self._facet_plot(func, ax, args, kwargs)\nseaborn/axisgrid.py:802: in _facet_plot\n    func(*plot_args, **plot_kwargs)\nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________________________ TestLinePlotter.test_color __________________________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc17a820>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\n\n    def test_color(self, long_df):\n    \n        ax = plt.figure().subplots()\n>       self.func(data=long_df, x=\"x\", y=\"y\", ax=ax)\n\ntests/test_relational.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n________________________ TestLinePlotter.test_log_scale ________________________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc0509a0>\n\n    def test_log_scale(self):\n    \n        f, ax = plt.subplots()\n        ax.set_xscale(\"log\")\n    \n        x = [1, 10, 100]\n        y = [1, 2, 3]\n    \n>       lineplot(x=x, y=y)\n\ntests/test_relational.py:1078: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n____________________ TestLinePlotter.test_matplotlib_kwargs ____________________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc050f40>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\n\n    def test_matplotlib_kwargs(self, long_df):\n    \n        kws = {\n            \"linestyle\": \"--\",\n            \"linewidth\": 3,\n            \"color\": (1, .5, .2),\n            \"markeredgecolor\": (.2, .5, .2),\n            \"markeredgewidth\": 1,\n        }\n>       ax = lineplot(data=long_df, x=\"x\", y=\"y\", **kws)\n\ntests/test_relational.py:1125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n____________________ TestLinePlotter.test_nonmapped_dashes _____________________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc050460>\n\n    def test_nonmapped_dashes(self):\n    \n>       ax = lineplot(x=[1, 2], y=[1, 2], dashes=(2, 1))\n\ntests/test_relational.py:1134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n______________________ TestLinePlotter.test_lineplot_axes ______________________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc050880>\nwide_df =                    a         b         c\nwide_index                              \n10          1.449377  0.547052 -1.23...        -0.305246 -1.329569  0.624981\n46          0.272567 -0.936631 -0.986104\n48          0.813041 -1.076465  0.829330\n\n    def test_lineplot_axes(self, wide_df):\n    \n        f1, ax1 = plt.subplots()\n        f2, ax2 = plt.subplots()\n    \n>       ax = lineplot(data=wide_df)\n\ntests/test_relational.py:1144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics0] ___________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bbf89970>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'x': 'x', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics1] ___________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bbf89bb0>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'x': 't', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics2] ___________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bbf89340>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'x': 'a', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics3] ___________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bbf897f0>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'hue': 'y', 'x': 'x', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics4] ___________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc17a2e0>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'hue': 'a', 'x': 'x', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics5] ___________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc17a460>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'size': 'a', 'x': 'x', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics6] ___________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc17a880>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'style': 'a', 'x': 'x', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics7] ___________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc050370>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'hue': 's', 'x': 'x', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics8] ___________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc050d30>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'size': 's', 'x': 'x', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics9] ___________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc050a90>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'style': 's', 'x': 'x', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics10] __________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc054a00>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'hue': 'a', 'style': 'a', 'x': 'x', 'y': 'y'}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestLinePlotter.test_lineplot_vs_relplot[long_semantics11] __________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc054220>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\nlong_semantics = {'hue': 'a', 'size': 'b', 'style': 'b', 'x': 'x', ...}\n\n    def test_lineplot_vs_relplot(self, long_df, long_semantics):\n    \n>       ax = lineplot(data=long_df, **long_semantics)\n\ntests/test_relational.py:1152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n_____________________ TestLinePlotter.test_lineplot_smoke ______________________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc17a970>\nwide_df =                    a         b         c\nwide_index                              \n10          1.449377  0.547052 -1.23...        -0.305246 -1.329569  0.624981\n46          0.272567 -0.936631 -0.986104\n48          0.813041 -1.076465  0.829330\nwide_array = array([[ 1.44937693,  0.54705238, -1.23849421],\n       [ 0.0042397 ,  0.96104443, -0.06555753],\n       [-2.22010765,  ...2956902,  0.62498133],\n       [ 0.27256657, -0.93663117, -0.9861045 ],\n       [ 0.81304077, -1.07646527,  0.82932958]])\nwide_list_of_series = [0    -0.462414\n1    -0.663266\n2     0.272339\n3    -0.202488\n4    -1.320671\n5     2.182511\n6     0.416575\n7    -0.4067...2296\n9    -1.253690\n10   -0.611071\n11   -0.127162\n12    1.658410\n13    0.747224\n14   -0.571759\nName: b, dtype: float64]\nwide_list_of_arrays = [array([-0.46241397, -0.66326575,  0.27233885, -0.20248795, -1.3206712 ,\n        2.18251053,  0.41657504, -0.40679557,...94239,  1.42901482, -0.35229582, -1.25368957,\n       -0.61107077, -0.12716222,  1.65840991,  0.74722355, -0.57175876])]\nwide_list_of_lists = [[-0.4624139668622383, -0.6632657450083369, 0.27233885054394685, -0.2024879527524557, -1.3206712007140675, 2.182510529...64863895, 0.43494239175560634, 1.4290148188482537, -0.3522958175702248, -1.2536895712130631, -0.6110707708089032, ...]]\nflat_array = array([ 0.13830514, -0.10108545,  0.35369949, -0.58809377, -1.66542662,\n        1.67094557,  0.42036328,  1.78859975, ...010368, -1.14244064, -0.96140692,  0.11880587,\n       -0.15018541, -1.99302747, -0.00222044,  0.76400317,  0.12336583])\nflat_series = t\n10    0.138305\n11   -0.101085\n12    0.353699\n13   -0.588094\n14   -1.665427\n15    1.670946\n16    0.420363\n17    1.788...61407\n24    0.118806\n25   -0.150185\n26   -1.993027\n27   -0.002220\n28    0.764003\n29    0.123366\nName: s, dtype: float64\nflat_list = [0.13830514195442498, -0.1010854511471884, 0.35369948934987555, -0.5880937734015119, -1.6654266179669477, 1.6709455731532739, ...]\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0    6 -0.853013  0.551712  b  p  ...  2  0.3     b ...  2  0.2     a      2      2\n99   1  0.321599  0.274270  c  n  ...  2  0.3     c      2      2\n\n[100 rows x 13 columns]\nmissing_df =        x         y         z  a  b  ...    s    f a_cat  s_cat  s_str\n0    6.0 -0.853013  0.551712  b  p  ...  2.0  Na... 0.2     a      2      2\n99   1.0  0.321599  0.274270  c  n  ...  2.0  NaN     c      2      2\n\n[100 rows x 13 columns]\nobject_df =      x         y         z  a  b  ...  s    f a_cat s_cat s_str\n0    6 -0.853013  0.551712  b  p  ...  2  0.3     b   ... ...  2  0.2     a     2     2\n99   1  0.321599  0.274270  c  n  ...  2  0.3     c     2     2\n\n[100 rows x 13 columns]\n\n    def test_lineplot_smoke(\n        self,\n        wide_df, wide_array,\n        wide_list_of_series, wide_list_of_arrays, wide_list_of_lists,\n        flat_array, flat_series, flat_list,\n        long_df, missing_df, object_df\n    ):\n    \n        f, ax = plt.subplots()\n    \n        lineplot(x=[], y=[])\n        ax.clear()\n    \n>       lineplot(data=wide_df)\n\ntests/test_relational.py:1177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n_____________________ TestLinePlotter.test_ci_deprecation ______________________\n\nself = <tests.test_relational.TestLinePlotter object at 0x7f78bc17ae20>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\n\n    def test_ci_deprecation(self, long_df):\n    \n        axs = plt.figure().subplots(2)\n>       lineplot(data=long_df, x=\"x\", y=\"y\", errorbar=(\"ci\", 95), seed=0, ax=axs[0])\n\ntests/test_relational.py:1255: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nseaborn/relational.py:646: in lineplot\n    p.plot(ax, kwargs)\nseaborn/relational.py:422: in plot\n    for sub_vars, sub_data in self.iter_data(grouping_vars, from_comp_data=True):\nseaborn/_oldcore.py:1012: in iter_data\n    data = self.comp_data\nseaborn/_oldcore.py:1103: in comp_data\n    with pd.option_context('mode.use_inf_as_null', True):\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in __enter__\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:441: in <listcomp>\n    self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:135: in _get_option\n    key = _get_single_key(pat, silent)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npat = 'mode.use_inf_as_null', silent = True\n\n    def _get_single_key(pat: str, silent: bool) -> str:\n        keys = _select_options(pat)\n        if len(keys) == 0:\n            if not silent:\n                _warn_if_deprecated(pat)\n>           raise OptionError(f\"No such keys(s): {repr(pat)}\")\nE           pandas._config.config.OptionError: \"No such keys(s): 'mode.use_inf_as_null'\"\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/_config/config.py:121: OptionError\n__________ TestScatterPlotter.test_unfilled_marker_edgecolor_warning ___________\n\nself = <tests.test_relational.TestScatterPlotter object at 0x7f78bc11e610>\nlong_df =      x         y         z  a  b  ...  s    f a_cat  s_cat  s_str\n0   12  0.449243  6.611886  b  p  ...  2  0.2     b ...  8  0.3     a      8      8\n99  15  0.073484  1.036343  c  p  ...  8  0.2     c      8      8\n\n[100 rows x 13 columns]\n\n    def test_unfilled_marker_edgecolor_warning(self, long_df):  # GH2636\n    \n>       with pytest.warns(None) as record:\n\ntests/test_relational.py:1712: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = WarningsChecker(record=True), expected_warning = None, match_expr = None\n\n    def __init__(\n        self,\n        expected_warning: type[Warning] | tuple[type[Warning], ...] = Warning,\n        match_expr: str | Pattern[str] | None = None,\n        *,\n        _ispytest: bool = False,\n    ) -> None:\n        check_ispytest(_ispytest)\n        super().__init__(_ispytest=True)\n    \n        msg = \"exceptions must be derived from Warning, not %s\"\n        if isinstance(expected_warning, tuple):\n            for exc in expected_warning:\n                if not issubclass(exc, Warning):\n                    raise TypeError(msg % type(exc))\n            expected_warning_tup = expected_warning\n        elif isinstance(expected_warning, type) and issubclass(\n            expected_warning, Warning\n        ):\n            expected_warning_tup = (expected_warning,)\n        else:\n>           raise TypeError(msg % type(expected_warning))\nE           TypeError: exceptions must be derived from Warning, not <class 'NoneType'>\n\n/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/_pytest/recwarn.py:280: TypeError\n=============================== warnings summary ===============================\nseaborn/cm.py:1582\nseaborn/cm.py:1582\nseaborn/cm.py:1582\nseaborn/cm.py:1582\nseaborn/cm.py:1582\nseaborn/cm.py:1582\n  /testbed/seaborn/cm.py:1582: MatplotlibDeprecationWarning: The register_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps.register(name)`` instead.\n    mpl_cm.register_cmap(_name, _cmap)\n\nseaborn/cm.py:1583\nseaborn/cm.py:1583\nseaborn/cm.py:1583\nseaborn/cm.py:1583\nseaborn/cm.py:1583\nseaborn/cm.py:1583\n  /testbed/seaborn/cm.py:1583: MatplotlibDeprecationWarning: The register_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps.register(name)`` instead.\n    mpl_cm.register_cmap(_name + \"_r\", _cmap_r)\n\ntests/test_relational.py: 107 warnings\n  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/core/dtypes/cast.py:1429: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.\n  See https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)\n    return np.find_common_type(types, [])\n\ntests/test_relational.py::TestRelationalPlotter::test_wide_df_variables\ntests/test_relational.py::TestRelationalPlotter::test_wide_df_with_nonnumeric_variables\ntests/test_relational.py::TestRelationalPlotter::test_wide_array_variables\ntests/test_relational.py::TestRelationalPlotter::test_flat_array_variables\n  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/_pytest/python.py:159: DeprecationWarning: `product` is deprecated as of NumPy 1.25.0, and will be removed in NumPy 2.0. Please use `prod` instead.\n    result = testfunction(**testargs)\n\ntests/test_relational.py: 39 warnings\n  /testbed/seaborn/axisgrid.py:86: UserWarning: The figure layout has changed to tight\n    self._figure.tight_layout(*args, **kwargs)\n\ntests/test_relational.py::TestScatterPlotter::test_supplied_color_array\n  /testbed/tests/test_relational.py:1605: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n    cmap = mpl.cm.get_cmap(\"Blues\")\n\ntests/test_relational.py::TestScatterPlotter::test_size_norm_extrapolation\ntests/test_relational.py::TestScatterPlotter::test_size_norm_extrapolation\n  /testbed/tests/test_relational.py:1690: MatplotlibDeprecationWarning: The legendHandles attribute was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use legend_handles instead.\n    for label, handle in zip(legend.get_texts(), legend.legendHandles)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n==================================== PASSES ====================================\n=========================== short test summary info ============================\nPASSED tests/test_relational.py::TestRelationalPlotter::test_wide_df_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_wide_df_with_nonnumeric_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_wide_array_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_flat_array_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_flat_list_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_flat_series_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_series_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_arrays_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_list_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_series_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_arrays_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_lists_variables\nPASSED tests/test_relational.py::TestRelationalPlotter::test_relplot_complex\nPASSED tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[series]\nPASSED tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[numpy]\nPASSED tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[list]\nPASSED tests/test_relational.py::TestRelationalPlotter::test_relplot_wide\nPASSED tests/test_relational.py::TestRelationalPlotter::test_relplot_hues\nPASSED tests/test_relational.py::TestRelationalPlotter::test_relplot_sizes\nPASSED tests/test_relational.py::TestRelationalPlotter::test_relplot_styles\nPASSED tests/test_relational.py::TestRelationalPlotter::test_relplot_stringy_numerics\nPASSED tests/test_relational.py::TestRelationalPlotter::test_relplot_data\nPASSED tests/test_relational.py::TestRelationalPlotter::test_facet_variable_collision\nPASSED tests/test_relational.py::TestRelationalPlotter::test_ax_kwarg_removal\nPASSED tests/test_relational.py::TestLinePlotter::test_legend_data\nPASSED tests/test_relational.py::TestLinePlotter::test_plot\nPASSED tests/test_relational.py::TestLinePlotter::test_axis_labels\nPASSED tests/test_relational.py::TestScatterPlotter::test_color\nPASSED tests/test_relational.py::TestScatterPlotter::test_legend_data\nPASSED tests/test_relational.py::TestScatterPlotter::test_plot\nPASSED tests/test_relational.py::TestScatterPlotter::test_axis_labels\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_axes\nPASSED tests/test_relational.py::TestScatterPlotter::test_literal_attribute_vectors\nPASSED tests/test_relational.py::TestScatterPlotter::test_supplied_color_array\nPASSED tests/test_relational.py::TestScatterPlotter::test_hue_order\nPASSED tests/test_relational.py::TestScatterPlotter::test_linewidths\nPASSED tests/test_relational.py::TestScatterPlotter::test_size_norm_extrapolation\nPASSED tests/test_relational.py::TestScatterPlotter::test_datetime_scale\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics0]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics1]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics2]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics3]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics4]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics5]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics6]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics7]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics8]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics9]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics10]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics11]\nPASSED tests/test_relational.py::TestScatterPlotter::test_scatterplot_smoke\nFAILED tests/test_relational.py::TestRelationalPlotter::test_relplot_simple\nFAILED tests/test_relational.py::TestRelationalPlotter::test_relplot_legend\nFAILED tests/test_relational.py::TestLinePlotter::test_color - pandas._config...\nFAILED tests/test_relational.py::TestLinePlotter::test_log_scale - pandas._co...\nFAILED tests/test_relational.py::TestLinePlotter::test_matplotlib_kwargs - pa...\nFAILED tests/test_relational.py::TestLinePlotter::test_nonmapped_dashes - pan...\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_axes - pandas...\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics0]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics1]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics2]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics3]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics4]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics5]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics6]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics7]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics8]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics9]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics10]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics11]\nFAILED tests/test_relational.py::TestLinePlotter::test_lineplot_smoke - panda...\nFAILED tests/test_relational.py::TestLinePlotter::test_ci_deprecation - panda...\nFAILED tests/test_relational.py::TestScatterPlotter::test_unfilled_marker_edgecolor_warning\n================= 22 failed, 51 passed, 165 warnings in 18.68s =================\n", {"tests/test_relational.py::TestRelationalPlotter::test_wide_df_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_wide_df_with_nonnumeric_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_wide_array_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_flat_array_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_flat_list_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_flat_series_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_series_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_arrays_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_list_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_series_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_arrays_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_lists_variables": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_complex": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[series]": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[numpy]": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[list]": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_wide": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_hues": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_sizes": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_styles": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_stringy_numerics": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_data": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_facet_variable_collision": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_ax_kwarg_removal": "PASSED", "tests/test_relational.py::TestLinePlotter::test_legend_data": "PASSED", "tests/test_relational.py::TestLinePlotter::test_plot": "PASSED", "tests/test_relational.py::TestLinePlotter::test_axis_labels": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_color": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_legend_data": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_plot": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_axis_labels": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_axes": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_literal_attribute_vectors": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_supplied_color_array": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_hue_order": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_linewidths": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_size_norm_extrapolation": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_datetime_scale": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics0]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics1]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics2]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics3]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics4]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics5]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics6]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics7]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics8]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics9]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics10]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics11]": "PASSED", "tests/test_relational.py::TestScatterPlotter::test_scatterplot_smoke": "PASSED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_simple": "FAILED", "tests/test_relational.py::TestRelationalPlotter::test_relplot_legend": "FAILED", "tests/test_relational.py::TestLinePlotter::test_color": "FAILED", "tests/test_relational.py::TestLinePlotter::test_log_scale": "FAILED", "tests/test_relational.py::TestLinePlotter::test_matplotlib_kwargs": "FAILED", "tests/test_relational.py::TestLinePlotter::test_nonmapped_dashes": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_axes": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics0]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics1]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics2]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics3]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics4]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics5]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics6]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics7]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics8]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics9]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics10]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics11]": "FAILED", "tests/test_relational.py::TestLinePlotter::test_lineplot_smoke": "FAILED", "tests/test_relational.py::TestLinePlotter::test_ci_deprecation": "FAILED", "tests/test_relational.py::TestScatterPlotter::test_unfilled_marker_edgecolor_warning": "FAILED"}]