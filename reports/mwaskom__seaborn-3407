[{"repo": "mwaskom/seaborn", "instance_id": "mwaskom__seaborn-3407", "base_commit": "515286e02be3e4c0ff2ef4addb34a53c4a676ee4", "patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1472,8 +1472,8 @@ def map_diag(self, func, **kwargs):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+            self.diag_vars = diag_vars\n+            self.diag_axes = diag_axes\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\n", "test_patch": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -1422,6 +1422,13 @@ def test_pairplot_markers(self):\n         with pytest.warns(UserWarning):\n             g = ag.pairplot(self.df, hue=\"a\", vars=vars, markers=markers[:-2])\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+\n     def test_corner_despine(self):\n \n         g = ag.PairGrid(self.df, corner=True, despine=False)\n", "problem_statement": "pairplot raises KeyError with MultiIndex DataFrame\nWhen trying to pairplot a MultiIndex DataFrame, `pairplot` raises a `KeyError`:\r\n\r\nMRE:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport seaborn as sns\r\n\r\n\r\ndata = {\r\n    (\"A\", \"1\"): np.random.rand(100),\r\n    (\"A\", \"2\"): np.random.rand(100),\r\n    (\"B\", \"1\"): np.random.rand(100),\r\n    (\"B\", \"2\"): np.random.rand(100),\r\n}\r\ndf = pd.DataFrame(data)\r\nsns.pairplot(df)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in pairplot(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\r\n   2142     diag_kws.setdefault(\"legend\", False)\r\n   2143     if diag_kind == \"hist\":\r\n-> 2144         grid.map_diag(histplot, **diag_kws)\r\n   2145     elif diag_kind == \"kde\":\r\n   2146         diag_kws.setdefault(\"fill\", True)\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in map_diag(self, func, **kwargs)\r\n   1488                 plt.sca(ax)\r\n   1489 \r\n-> 1490             vector = self.data[var]\r\n   1491             if self._hue_var is not None:\r\n   1492                 hue = self.data[self._hue_var]\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/frame.py) in __getitem__(self, key)\r\n   3765             if is_iterator(key):\r\n   3766                 key = list(key)\r\n-> 3767             indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\r\n   3768 \r\n   3769         # take() does not accept boolean indexers\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _get_indexer_strict(self, key, axis_name)\r\n   2534             indexer = self._get_indexer_level_0(keyarr)\r\n   2535 \r\n-> 2536             self._raise_if_missing(key, indexer, axis_name)\r\n   2537             return self[indexer], indexer\r\n   2538 \r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _raise_if_missing(self, key, indexer, axis_name)\r\n   2552                 cmask = check == -1\r\n   2553                 if cmask.any():\r\n-> 2554                     raise KeyError(f\"{keyarr[cmask]} not in index\")\r\n   2555                 # We get here when levels still contain values which are not\r\n   2556                 # actually in Index anymore\r\n\r\nKeyError: \"['1'] not in index\"\r\n```\r\n\r\nA workaround is to \"flatten\" the columns:\r\n\r\n```python\r\ndf.columns = [\"\".join(column) for column in df.columns]\r\n```\n", "hints_text": "", "created_at": "2023-06-27T23:17:29Z", "version": "0.13", "FAIL_TO_PASS": "[\"tests/test_axisgrid.py::TestPairGrid::test_pairplot_column_multiindex\"]", "PASS_TO_PASS": "[\"tests/test_axisgrid.py::TestFacetGrid::test_self_data\", \"tests/test_axisgrid.py::TestFacetGrid::test_self_figure\", \"tests/test_axisgrid.py::TestFacetGrid::test_self_axes\", \"tests/test_axisgrid.py::TestFacetGrid::test_axes_array_size\", \"tests/test_axisgrid.py::TestFacetGrid::test_single_axes\", \"tests/test_axisgrid.py::TestFacetGrid::test_col_wrap\", \"tests/test_axisgrid.py::TestFacetGrid::test_normal_axes\", \"tests/test_axisgrid.py::TestFacetGrid::test_wrapped_axes\", \"tests/test_axisgrid.py::TestFacetGrid::test_axes_dict\", \"tests/test_axisgrid.py::TestFacetGrid::test_figure_size\", \"tests/test_axisgrid.py::TestFacetGrid::test_figure_size_with_legend\", \"tests/test_axisgrid.py::TestFacetGrid::test_legend_data\", \"tests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level\", \"tests/test_axisgrid.py::TestFacetGrid::test_get_boolean_legend_data\", \"tests/test_axisgrid.py::TestFacetGrid::test_legend_tuples\", \"tests/test_axisgrid.py::TestFacetGrid::test_legend_options\", \"tests/test_axisgrid.py::TestFacetGrid::test_legendout_with_colwrap\", \"tests/test_axisgrid.py::TestFacetGrid::test_legend_tight_layout\", \"tests/test_axisgrid.py::TestFacetGrid::test_subplot_kws\", \"tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws\", \"tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws_col_wrap\", \"tests/test_axisgrid.py::TestFacetGrid::test_data_generator\", \"tests/test_axisgrid.py::TestFacetGrid::test_map\", \"tests/test_axisgrid.py::TestFacetGrid::test_map_dataframe\", \"tests/test_axisgrid.py::TestFacetGrid::test_set\", \"tests/test_axisgrid.py::TestFacetGrid::test_set_titles\", \"tests/test_axisgrid.py::TestFacetGrid::test_set_titles_margin_titles\", \"tests/test_axisgrid.py::TestFacetGrid::test_set_ticklabels\", \"tests/test_axisgrid.py::TestFacetGrid::test_set_axis_labels\", \"tests/test_axisgrid.py::TestFacetGrid::test_axis_lims\", \"tests/test_axisgrid.py::TestFacetGrid::test_data_orders\", \"tests/test_axisgrid.py::TestFacetGrid::test_palette\", \"tests/test_axisgrid.py::TestFacetGrid::test_hue_kws\", \"tests/test_axisgrid.py::TestFacetGrid::test_dropna\", \"tests/test_axisgrid.py::TestFacetGrid::test_categorical_column_missing_categories\", \"tests/test_axisgrid.py::TestFacetGrid::test_categorical_warning\", \"tests/test_axisgrid.py::TestFacetGrid::test_refline\", \"tests/test_axisgrid.py::TestFacetGrid::test_apply\", \"tests/test_axisgrid.py::TestFacetGrid::test_pipe\", \"tests/test_axisgrid.py::TestFacetGrid::test_tick_params\", \"tests/test_axisgrid.py::TestPairGrid::test_self_data\", \"tests/test_axisgrid.py::TestPairGrid::test_ignore_datelike_data\", \"tests/test_axisgrid.py::TestPairGrid::test_self_figure\", \"tests/test_axisgrid.py::TestPairGrid::test_self_axes\", \"tests/test_axisgrid.py::TestPairGrid::test_default_axes\", \"tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars0]\", \"tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars1]\", \"tests/test_axisgrid.py::TestPairGrid::test_remove_hue_from_default\", \"tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars0-y_vars0]\", \"tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars1-z]\", \"tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars2-y_vars2]\", \"tests/test_axisgrid.py::TestPairGrid::test_corner\", \"tests/test_axisgrid.py::TestPairGrid::test_size\", \"tests/test_axisgrid.py::TestPairGrid::test_empty_grid\", \"tests/test_axisgrid.py::TestPairGrid::test_map\", \"tests/test_axisgrid.py::TestPairGrid::test_map_nonsquare\", \"tests/test_axisgrid.py::TestPairGrid::test_map_lower\", \"tests/test_axisgrid.py::TestPairGrid::test_map_upper\", \"tests/test_axisgrid.py::TestPairGrid::test_map_mixed_funcsig\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag_rectangular\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag_color\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag_palette\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag_and_offdiag\", \"tests/test_axisgrid.py::TestPairGrid::test_diag_sharey\", \"tests/test_axisgrid.py::TestPairGrid::test_map_diag_matplotlib\", \"tests/test_axisgrid.py::TestPairGrid::test_palette\", \"tests/test_axisgrid.py::TestPairGrid::test_hue_kws\", \"tests/test_axisgrid.py::TestPairGrid::test_hue_order\", \"tests/test_axisgrid.py::TestPairGrid::test_hue_order_missing_level\", \"tests/test_axisgrid.py::TestPairGrid::test_hue_in_map\", \"tests/test_axisgrid.py::TestPairGrid::test_nondefault_index\", \"tests/test_axisgrid.py::TestPairGrid::test_dropna[scatterplot]\", \"tests/test_axisgrid.py::TestPairGrid::test_dropna[scatter]\", \"tests/test_axisgrid.py::TestPairGrid::test_histplot_legend\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg_hue\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_diag_kde\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_kde\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_hist\", \"tests/test_axisgrid.py::TestPairGrid::test_pairplot_markers\", \"tests/test_axisgrid.py::TestPairGrid::test_corner_despine\", \"tests/test_axisgrid.py::TestPairGrid::test_corner_set\", \"tests/test_axisgrid.py::TestPairGrid::test_legend\", \"tests/test_axisgrid.py::TestPairGrid::test_tick_params\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_lists\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_arrays\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_series\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe_bad_variable\", \"tests/test_axisgrid.py::TestJointGrid::test_margin_grid_axis_labels\", \"tests/test_axisgrid.py::TestJointGrid::test_dropna\", \"tests/test_axisgrid.py::TestJointGrid::test_axlims\", \"tests/test_axisgrid.py::TestJointGrid::test_marginal_ticks\", \"tests/test_axisgrid.py::TestJointGrid::test_bivariate_plot\", \"tests/test_axisgrid.py::TestJointGrid::test_univariate_plot\", \"tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_distplot\", \"tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_matplotlib\", \"tests/test_axisgrid.py::TestJointGrid::test_plot\", \"tests/test_axisgrid.py::TestJointGrid::test_space\", \"tests/test_axisgrid.py::TestJointGrid::test_hue[True]\", \"tests/test_axisgrid.py::TestJointGrid::test_hue[False]\", \"tests/test_axisgrid.py::TestJointGrid::test_refline\", \"tests/test_axisgrid.py::TestJointPlot::test_scatter\", \"tests/test_axisgrid.py::TestJointPlot::test_scatter_hue\", \"tests/test_axisgrid.py::TestJointPlot::test_reg\", \"tests/test_axisgrid.py::TestJointPlot::test_resid\", \"tests/test_axisgrid.py::TestJointPlot::test_hist\", \"tests/test_axisgrid.py::TestJointPlot::test_hex\", \"tests/test_axisgrid.py::TestJointPlot::test_kde\", \"tests/test_axisgrid.py::TestJointPlot::test_kde_hue\", \"tests/test_axisgrid.py::TestJointPlot::test_color\", \"tests/test_axisgrid.py::TestJointPlot::test_palette\", \"tests/test_axisgrid.py::TestJointPlot::test_hex_customise\", \"tests/test_axisgrid.py::TestJointPlot::test_bad_kind\", \"tests/test_axisgrid.py::TestJointPlot::test_unsupported_hue_kind\", \"tests/test_axisgrid.py::TestJointPlot::test_leaky_dict\", \"tests/test_axisgrid.py::TestJointPlot::test_distplot_kwarg_warning\", \"tests/test_axisgrid.py::TestJointPlot::test_ax_warning\"]", "environment_setup_commit": "23860365816440b050e9211e1c395a966de3c403"}, "On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   seaborn/axisgrid.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\ncommit 515286e02be3e4c0ff2ef4addb34a53c4a676ee4\nAuthor: Michael Waskom <mwaskom@users.noreply.github.com>\nDate:   Mon Jun 19 20:52:44 2023 -0400\n\n    Improve handling of edge cases with nullable dtypes (#3394)\n    \n    * Improve handling of numeric type edge cases\n    \n    * Ensure numeric data after scaling in Plot\n    \n    * Remove some back-compat flexibility around pd.NA\n\ndiff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex a73af9bf..66e4ec8d 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1392,11 +1392,11 @@ class Plotter:\n                         spec_error = PlotSpecError._during(\"Scaling operation\", var)\n                         raise spec_error from err\n \n-            # Now the transformed data series are complete, set update the layer data\n+            # Now the transformed data series are complete, update the layer data\n             for layer, new_series in zip(layers, transformed_data):\n                 layer_df = layer[\"data\"].frame\n                 if var in layer_df:\n-                    layer_df[var] = new_series\n+                    layer_df[var] = pd.to_numeric(new_series)\n \n     def _plot_layer(self, p: Plot, layer: Layer) -> None:\n \ndiff --git a/seaborn/_core/rules.py b/seaborn/_core/rules.py\nindex 7ba5247d..5057221f 100644\n--- a/seaborn/_core/rules.py\n+++ b/seaborn/_core/rules.py\n@@ -74,6 +74,9 @@ def variable_type(\n     if pd.isna(vector).all():\n         return VarType(\"numeric\")\n \n+    # Now drop nulls to simplify further type inference\n+    vector = vector.dropna()\n+\n     # Special-case binary/boolean data, allow caller to determine\n     # This triggers a numpy warning when vector has strings/objects\n     # https://github.com/numpy/numpy/issues/6784\n@@ -94,7 +97,7 @@ def variable_type(\n                 boolean_dtypes = [\"bool\"]\n             boolean_vector = vector.dtype in boolean_dtypes\n         else:\n-            boolean_vector = bool(np.isin(vector.dropna(), [0, 1]).all())\n+            boolean_vector = bool(np.isin(vector, [0, 1]).all())\n         if boolean_vector:\n             return VarType(boolean_type)\n \ndiff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py\nindex f1dab46f..c0fd2fa4 100644\n--- a/seaborn/_oldcore.py\n+++ b/seaborn/_oldcore.py\n@@ -1128,7 +1128,7 @@ class VectorPlotter:\n                             # it is similar to GH2419, but more complicated because\n                             # supporting `order` in categorical plots is tricky\n                             orig = orig[orig.isin(self.var_levels[var])]\n-                    comp = pd.to_numeric(converter.convert_units(orig))\n+                    comp = pd.to_numeric(converter.convert_units(orig)).astype(float)\n                     if converter.get_scale() == \"log\":\n                         comp = np.log10(comp)\n                     parts.append(pd.Series(comp, orig.index, name=orig.name))\n@@ -1505,6 +1505,9 @@ def variable_type(vector, boolean_type=\"numeric\"):\n     if pd.isna(vector).all():\n         return VariableType(\"numeric\")\n \n+    # At this point, drop nans to simplify further type inference\n+    vector = vector.dropna()\n+\n     # Special-case binary/boolean data, allow caller to determine\n     # This triggers a numpy warning when vector has strings/objects\n     # https://github.com/numpy/numpy/issues/6784\n@@ -1517,7 +1520,7 @@ def variable_type(vector, boolean_type=\"numeric\"):\n         warnings.simplefilter(\n             action='ignore', category=(FutureWarning, DeprecationWarning)\n         )\n-        if np.isin(vector.dropna(), [0, 1]).all():\n+        if np.isin(vector, [0, 1]).all():\n             return VariableType(boolean_type)\n \n     # Defer to positive pandas tests\ndiff --git a/tests/_core/test_rules.py b/tests/_core/test_rules.py\nindex c7617ecd..714d5ead 100644\n--- a/tests/_core/test_rules.py\n+++ b/tests/_core/test_rules.py\n@@ -38,6 +38,12 @@ def test_variable_type():\n     s = pd.Series([pd.NA, pd.NA])\n     assert variable_type(s) == \"numeric\"\n \n+    s = pd.Series([1, 2, pd.NA], dtype=\"Int64\")\n+    assert variable_type(s) == \"numeric\"\n+\n+    s = pd.Series([1, 2, pd.NA], dtype=object)\n+    assert variable_type(s) == \"numeric\"\n+\n     s = pd.Series([\"1\", \"2\", \"3\"])\n     assert variable_type(s) == \"categorical\"\n \ndiff --git a/tests/test_core.py b/tests/test_core.py\nindex 1e528688..7b256884 100644\n--- a/tests/test_core.py\n+++ b/tests/test_core.py\n@@ -23,16 +23,9 @@ from seaborn._oldcore import (\n     categorical_order,\n )\n from seaborn.utils import desaturate\n-\n from seaborn.palettes import color_palette\n \n \n-try:\n-    from pandas import NA as PD_NA\n-except ImportError:\n-    PD_NA = None\n-\n-\n @pytest.fixture(params=[\n     dict(x=\"x\", y=\"y\"),\n     dict(x=\"t\", y=\"y\"),\n@@ -1302,13 +1295,11 @@ class TestVectorPlotter:\n \n     @pytest.fixture(\n         params=itertools.product(\n-            [None, np.nan, PD_NA],\n-            [\"numeric\", \"category\", \"datetime\"]\n+            [None, np.nan, pd.NA],\n+            [\"numeric\", \"category\", \"datetime\"],\n         )\n     )\n-    @pytest.mark.parametrize(\n-        \"NA,var_type\",\n-    )\n+    @pytest.mark.parametrize(\"NA,var_type\")\n     def comp_data_missing_fixture(self, request):\n \n         # This fixture holds the logic for parameterizing\n@@ -1316,14 +1307,11 @@ class TestVectorPlotter:\n \n         NA, var_type = request.param\n \n-        if NA is None:\n-            pytest.skip(\"No pandas.NA available\")\n-\n         comp_data = [0, 1, np.nan, 2, np.nan, 1]\n         if var_type == \"numeric\":\n             orig_data = [0, 1, NA, 2, np.inf, 1]\n         elif var_type == \"category\":\n-            orig_data = [\"a\", \"b\", NA, \"c\", NA, \"b\"]\n+            orig_data = [\"a\", \"b\", NA, \"c\", pd.NA, \"b\"]\n         elif var_type == \"datetime\":\n             # Use 1-based numbers to avoid issue on matplotlib<3.2\n             # Could simplify the test a bit when we roll off that version\n@@ -1343,6 +1331,7 @@ class TestVectorPlotter:\n         ax = plt.figure().subplots()\n         p._attach(ax)\n         assert_array_equal(p.comp_data[\"x\"], comp_data)\n+        assert p.comp_data[\"x\"].dtype == \"float\"\n \n     def test_comp_data_duplicate_index(self):\n \n@@ -1352,6 +1341,15 @@ class TestVectorPlotter:\n         p._attach(ax)\n         assert_array_equal(p.comp_data[\"x\"], x)\n \n+    def test_comp_data_nullable_dtype(self):\n+\n+        x = pd.Series([1, 2, 3, 4], dtype=\"Int64\")\n+        p = VectorPlotter(variables={\"x\": x})\n+        ax = plt.figure().subplots()\n+        p._attach(ax)\n+        assert_array_equal(p.comp_data[\"x\"], x)\n+        assert p.comp_data[\"x\"].dtype == \"float\"\n+\n     def test_var_order(self, long_df):\n \n         order = [\"c\", \"b\", \"a\"]\n@@ -1456,7 +1454,12 @@ class TestCoreFunc:\n         assert variable_type(s) == \"numeric\"\n \n         s = pd.Series([np.nan, np.nan])\n-        # s = pd.Series([pd.NA, pd.NA])\n+        assert variable_type(s) == \"numeric\"\n+\n+        s = pd.Series([pd.NA, pd.NA])\n+        assert variable_type(s) == \"numeric\"\n+\n+        s = pd.Series([1, 2, pd.NA], dtype=\"Int64\")\n         assert variable_type(s) == \"numeric\"\n \n         s = pd.Series([\"1\", \"2\", \"3\"])\ndiff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..5eaa7997 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1472,8 +1472,8 @@ class PairGrid(Grid):\n                 for ax in diag_axes[1:]:\n                     share_axis(diag_axes[0], ax, \"y\")\n \n-            self.diag_vars = np.array(diag_vars, np.object_)\n-            self.diag_axes = np.array(diag_axes, np.object_)\n+            self.diag_vars = diag_vars\n+            self.diag_axes = diag_axes\n \n         if \"hue\" not in signature(func).parameters:\n             return self._map_diag_iter_hue(func, **kwargs)\nObtaining file:///testbed\n  Installing build dependencies: started\n  Installing build dependencies: finished with status 'done'\n  Checking if build backend supports build_editable: started\n  Checking if build backend supports build_editable: finished with status 'done'\n  Getting requirements to build editable: started\n  Getting requirements to build editable: finished with status 'done'\n  Preparing editable metadata (pyproject.toml): started\n  Preparing editable metadata (pyproject.toml): finished with status 'done'\nRequirement already satisfied: numpy!=1.24.0,>=1.20 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (1.25.2)\nRequirement already satisfied: pandas>=1.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (2.0.0)\nRequirement already satisfied: matplotlib!=3.6.1,>=3.3 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (3.7.2)\nRequirement already satisfied: pytest in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (8.3.3)\nRequirement already satisfied: pytest-cov in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (5.0.0)\nRequirement already satisfied: pytest-xdist in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (3.6.1)\nRequirement already satisfied: flake8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (7.1.1)\nRequirement already satisfied: mypy in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (1.11.2)\nRequirement already satisfied: pandas-stubs in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (2.2.2.240807)\nRequirement already satisfied: pre-commit in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (4.0.0)\nRequirement already satisfied: flit in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from seaborn==0.13.0.dev0) (3.9.0)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (1.1.0)\nRequirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (0.11.0)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (4.42.1)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (1.4.5)\nRequirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (23.1)\nRequirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (10.0.0)\nRequirement already satisfied: pyparsing<3.1,>=2.3.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (3.0.9)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (2.8.2)\nRequirement already satisfied: importlib-resources>=3.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (6.0.1)\nRequirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas>=1.2->seaborn==0.13.0.dev0) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas>=1.2->seaborn==0.13.0.dev0) (2023.1)\nRequirement already satisfied: mccabe<0.8.0,>=0.7.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flake8->seaborn==0.13.0.dev0) (0.7.0)\nRequirement already satisfied: pycodestyle<2.13.0,>=2.12.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flake8->seaborn==0.13.0.dev0) (2.12.1)\nRequirement already satisfied: pyflakes<3.3.0,>=3.2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flake8->seaborn==0.13.0.dev0) (3.2.0)\nRequirement already satisfied: flit_core>=3.9.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.13.0.dev0) (3.9.0)\nRequirement already satisfied: requests in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.13.0.dev0) (2.32.3)\nRequirement already satisfied: docutils in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.13.0.dev0) (0.21.2)\nRequirement already satisfied: tomli-w in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from flit->seaborn==0.13.0.dev0) (1.0.0)\nRequirement already satisfied: typing-extensions>=4.6.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from mypy->seaborn==0.13.0.dev0) (4.12.2)\nRequirement already satisfied: mypy-extensions>=1.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from mypy->seaborn==0.13.0.dev0) (1.0.0)\nRequirement already satisfied: tomli>=1.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from mypy->seaborn==0.13.0.dev0) (2.0.2)\nRequirement already satisfied: types-pytz>=2022.1.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pandas-stubs->seaborn==0.13.0.dev0) (2024.2.0.20241003)\nRequirement already satisfied: cfgv>=2.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.13.0.dev0) (3.4.0)\nRequirement already satisfied: identify>=1.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.13.0.dev0) (2.6.1)\nRequirement already satisfied: nodeenv>=0.11.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.13.0.dev0) (1.9.1)\nRequirement already satisfied: pyyaml>=5.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.13.0.dev0) (6.0.2)\nRequirement already satisfied: virtualenv>=20.10.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pre-commit->seaborn==0.13.0.dev0) (20.26.6)\nRequirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->seaborn==0.13.0.dev0) (2.0.0)\nRequirement already satisfied: pluggy<2,>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->seaborn==0.13.0.dev0) (1.5.0)\nRequirement already satisfied: exceptiongroup>=1.0.0rc8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->seaborn==0.13.0.dev0) (1.2.2)\nRequirement already satisfied: coverage>=5.2.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from coverage[toml]>=5.2.1->pytest-cov->seaborn==0.13.0.dev0) (7.6.1)\nRequirement already satisfied: execnet>=2.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest-xdist->seaborn==0.13.0.dev0) (2.1.1)\nRequirement already satisfied: zipp>=3.1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from importlib-resources>=3.2.0->matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (3.16.2)\nRequirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.3->seaborn==0.13.0.dev0) (1.16.0)\nRequirement already satisfied: distlib<1,>=0.3.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from virtualenv>=20.10.0->pre-commit->seaborn==0.13.0.dev0) (0.3.8)\nRequirement already satisfied: filelock<4,>=3.12.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from virtualenv>=20.10.0->pre-commit->seaborn==0.13.0.dev0) (3.16.1)\nRequirement already satisfied: platformdirs<5,>=3.9.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from virtualenv>=20.10.0->pre-commit->seaborn==0.13.0.dev0) (4.3.6)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.13.0.dev0) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.13.0.dev0) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.13.0.dev0) (2.2.3)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests->flit->seaborn==0.13.0.dev0) (2024.8.30)\nBuilding wheels for collected packages: seaborn\n  Building editable for seaborn (pyproject.toml): started\n  Building editable for seaborn (pyproject.toml): finished with status 'done'\n  Created wheel for seaborn: filename=seaborn-0.13.0.dev0-py3-none-any.whl size=3872 sha256=ef24d298f4a459660a51d6b203c28a5be50cf93c01c6714600f9d9bb7d7bd906\n  Stored in directory: /tmp/pip-ephem-wheel-cache-m_ge3r_f/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4\nSuccessfully built seaborn\nInstalling collected packages: seaborn\n  Attempting uninstall: seaborn\n    Found existing installation: seaborn 0.13.0.dev0\n    Uninstalling seaborn-0.13.0.dev0:\n      Successfully uninstalled seaborn-0.13.0.dev0\nSuccessfully installed seaborn-0.13.0.dev0\n============================= test session starts ==============================\ncollected 121 items\n\ntests/test_axisgrid.py ................................................. [ 40%]\n........................................................................ [100%]\n\n=============================== warnings summary ===============================\ntests/test_axisgrid.py::TestFacetGrid::test_legend_data\ntests/test_axisgrid.py::TestFacetGrid::test_legend_data\ntests/test_axisgrid.py::TestFacetGrid::test_legend_data\ntests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level\ntests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level\ntests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level\ntests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level\n  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/core/dtypes/cast.py:1429: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.\n  See https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)\n    return np.find_common_type(types, [])\n\ntests/test_axisgrid.py: 32 warnings\n  /testbed/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n    self._figure.tight_layout(*args, **kwargs)\n\ntests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws\n  /testbed/tests/test_axisgrid.py:344: UserWarning: The figure layout has changed to tight\n    g.figure.tight_layout()\n\ntests/test_axisgrid.py::TestFacetGrid::test_set_ticklabels\ntests/test_axisgrid.py::TestFacetGrid::test_categorical_warning\ntests/test_axisgrid.py::TestFacetGrid::test_categorical_warning\n  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pandas/core/algorithms.py:525: DeprecationWarning: np.find_common_type is deprecated.  Please use `np.result_type` or `np.promote_types`.\n  See https://numpy.org/devdocs/release/1.25.0-notes.html and the docs for more information.  (Deprecated NumPy 1.25)\n    common = np.find_common_type([values.dtype, comps_array.dtype], [])\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n==================================== PASSES ====================================\n=========================== short test summary info ============================\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_self_data\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_self_figure\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_self_axes\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_axes_array_size\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_single_axes\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_col_wrap\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_normal_axes\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_wrapped_axes\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_axes_dict\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_figure_size\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_figure_size_with_legend\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_legend_data\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_get_boolean_legend_data\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_legend_tuples\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_legend_options\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_legendout_with_colwrap\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_legend_tight_layout\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_subplot_kws\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws_col_wrap\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_data_generator\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_map\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_map_dataframe\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_set\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_set_titles\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_set_titles_margin_titles\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_set_ticklabels\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_set_axis_labels\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_axis_lims\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_data_orders\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_palette\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_hue_kws\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_dropna\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_categorical_column_missing_categories\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_categorical_warning\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_refline\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_apply\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_pipe\nPASSED tests/test_axisgrid.py::TestFacetGrid::test_tick_params\nPASSED tests/test_axisgrid.py::TestPairGrid::test_self_data\nPASSED tests/test_axisgrid.py::TestPairGrid::test_ignore_datelike_data\nPASSED tests/test_axisgrid.py::TestPairGrid::test_self_figure\nPASSED tests/test_axisgrid.py::TestPairGrid::test_self_axes\nPASSED tests/test_axisgrid.py::TestPairGrid::test_default_axes\nPASSED tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars0]\nPASSED tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars1]\nPASSED tests/test_axisgrid.py::TestPairGrid::test_remove_hue_from_default\nPASSED tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars0-y_vars0]\nPASSED tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars1-z]\nPASSED tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars2-y_vars2]\nPASSED tests/test_axisgrid.py::TestPairGrid::test_corner\nPASSED tests/test_axisgrid.py::TestPairGrid::test_size\nPASSED tests/test_axisgrid.py::TestPairGrid::test_empty_grid\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map_nonsquare\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map_lower\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map_upper\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map_mixed_funcsig\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map_diag\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map_diag_rectangular\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map_diag_color\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map_diag_palette\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map_diag_and_offdiag\nPASSED tests/test_axisgrid.py::TestPairGrid::test_diag_sharey\nPASSED tests/test_axisgrid.py::TestPairGrid::test_map_diag_matplotlib\nPASSED tests/test_axisgrid.py::TestPairGrid::test_palette\nPASSED tests/test_axisgrid.py::TestPairGrid::test_hue_kws\nPASSED tests/test_axisgrid.py::TestPairGrid::test_hue_order\nPASSED tests/test_axisgrid.py::TestPairGrid::test_hue_order_missing_level\nPASSED tests/test_axisgrid.py::TestPairGrid::test_hue_in_map\nPASSED tests/test_axisgrid.py::TestPairGrid::test_nondefault_index\nPASSED tests/test_axisgrid.py::TestPairGrid::test_dropna[scatterplot]\nPASSED tests/test_axisgrid.py::TestPairGrid::test_dropna[scatter]\nPASSED tests/test_axisgrid.py::TestPairGrid::test_histplot_legend\nPASSED tests/test_axisgrid.py::TestPairGrid::test_pairplot\nPASSED tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg\nPASSED tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg_hue\nPASSED tests/test_axisgrid.py::TestPairGrid::test_pairplot_diag_kde\nPASSED tests/test_axisgrid.py::TestPairGrid::test_pairplot_kde\nPASSED tests/test_axisgrid.py::TestPairGrid::test_pairplot_hist\nPASSED tests/test_axisgrid.py::TestPairGrid::test_pairplot_markers\nPASSED tests/test_axisgrid.py::TestPairGrid::test_pairplot_column_multiindex\nPASSED tests/test_axisgrid.py::TestPairGrid::test_corner_despine\nPASSED tests/test_axisgrid.py::TestPairGrid::test_corner_set\nPASSED tests/test_axisgrid.py::TestPairGrid::test_legend\nPASSED tests/test_axisgrid.py::TestPairGrid::test_tick_params\nPASSED tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_lists\nPASSED tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_arrays\nPASSED tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_series\nPASSED tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe\nPASSED tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe_bad_variable\nPASSED tests/test_axisgrid.py::TestJointGrid::test_margin_grid_axis_labels\nPASSED tests/test_axisgrid.py::TestJointGrid::test_dropna\nPASSED tests/test_axisgrid.py::TestJointGrid::test_axlims\nPASSED tests/test_axisgrid.py::TestJointGrid::test_marginal_ticks\nPASSED tests/test_axisgrid.py::TestJointGrid::test_bivariate_plot\nPASSED tests/test_axisgrid.py::TestJointGrid::test_univariate_plot\nPASSED tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_distplot\nPASSED tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_matplotlib\nPASSED tests/test_axisgrid.py::TestJointGrid::test_plot\nPASSED tests/test_axisgrid.py::TestJointGrid::test_space\nPASSED tests/test_axisgrid.py::TestJointGrid::test_hue[True]\nPASSED tests/test_axisgrid.py::TestJointGrid::test_hue[False]\nPASSED tests/test_axisgrid.py::TestJointGrid::test_refline\nPASSED tests/test_axisgrid.py::TestJointPlot::test_scatter\nPASSED tests/test_axisgrid.py::TestJointPlot::test_scatter_hue\nPASSED tests/test_axisgrid.py::TestJointPlot::test_reg\nPASSED tests/test_axisgrid.py::TestJointPlot::test_resid\nPASSED tests/test_axisgrid.py::TestJointPlot::test_hist\nPASSED tests/test_axisgrid.py::TestJointPlot::test_hex\nPASSED tests/test_axisgrid.py::TestJointPlot::test_kde\nPASSED tests/test_axisgrid.py::TestJointPlot::test_kde_hue\nPASSED tests/test_axisgrid.py::TestJointPlot::test_color\nPASSED tests/test_axisgrid.py::TestJointPlot::test_palette\nPASSED tests/test_axisgrid.py::TestJointPlot::test_hex_customise\nPASSED tests/test_axisgrid.py::TestJointPlot::test_bad_kind\nPASSED tests/test_axisgrid.py::TestJointPlot::test_unsupported_hue_kind\nPASSED tests/test_axisgrid.py::TestJointPlot::test_leaky_dict\nPASSED tests/test_axisgrid.py::TestJointPlot::test_distplot_kwarg_warning\nPASSED tests/test_axisgrid.py::TestJointPlot::test_ax_warning\n================= 121 passed, 43 warnings in 64.47s (0:01:04) ==================\n", {"tests/test_axisgrid.py::TestFacetGrid::test_self_data": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_self_figure": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_self_axes": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_axes_array_size": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_single_axes": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_col_wrap": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_normal_axes": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_wrapped_axes": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_axes_dict": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_figure_size": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_figure_size_with_legend": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_legend_data": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_get_boolean_legend_data": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_legend_tuples": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_legend_options": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_legendout_with_colwrap": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_legend_tight_layout": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_subplot_kws": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws_col_wrap": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_data_generator": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_map": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_map_dataframe": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_set": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_set_titles": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_set_titles_margin_titles": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_set_ticklabels": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_set_axis_labels": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_axis_lims": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_data_orders": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_palette": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_hue_kws": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_dropna": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_categorical_column_missing_categories": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_categorical_warning": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_refline": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_apply": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_pipe": "PASSED", "tests/test_axisgrid.py::TestFacetGrid::test_tick_params": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_self_data": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_ignore_datelike_data": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_self_figure": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_self_axes": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_default_axes": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars0]": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars1]": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_remove_hue_from_default": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars0-y_vars0]": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars1-z]": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars2-y_vars2]": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_corner": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_size": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_empty_grid": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map_nonsquare": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map_lower": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map_upper": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map_mixed_funcsig": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map_diag": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map_diag_rectangular": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map_diag_color": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map_diag_palette": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map_diag_and_offdiag": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_diag_sharey": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_map_diag_matplotlib": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_palette": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_hue_kws": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_hue_order": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_hue_order_missing_level": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_hue_in_map": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_nondefault_index": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_dropna[scatterplot]": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_dropna[scatter]": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_histplot_legend": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_pairplot": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg_hue": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_pairplot_diag_kde": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_pairplot_kde": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_pairplot_hist": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_pairplot_markers": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_pairplot_column_multiindex": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_corner_despine": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_corner_set": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_legend": "PASSED", "tests/test_axisgrid.py::TestPairGrid::test_tick_params": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_lists": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_arrays": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_series": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe_bad_variable": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_axis_labels": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_dropna": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_axlims": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_marginal_ticks": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_bivariate_plot": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_distplot": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_matplotlib": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_plot": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_space": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_hue[True]": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_hue[False]": "PASSED", "tests/test_axisgrid.py::TestJointGrid::test_refline": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_scatter": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_scatter_hue": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_reg": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_resid": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_hist": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_hex": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_kde": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_kde_hue": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_color": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_palette": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_hex_customise": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_bad_kind": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_unsupported_hue_kind": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_leaky_dict": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_distplot_kwarg_warning": "PASSED", "tests/test_axisgrid.py::TestJointPlot::test_ax_warning": "PASSED"}]